
Blinky.axf:     file format elf32-littlearm


Disassembly of section .flash:

08000000 <Reset_Handler-0xb8>:
 8000000:	20020000 	.word	0x20020000
 8000004:	080000b9 	.word	0x080000b9
 8000008:	08000105 	.word	0x08000105
 800000c:	08000105 	.word	0x08000105
 8000010:	08000105 	.word	0x08000105
 8000014:	08000105 	.word	0x08000105
 8000018:	08000105 	.word	0x08000105
	...
 800002c:	08000105 	.word	0x08000105
 8000030:	08000105 	.word	0x08000105
 8000034:	00000000 	.word	0x00000000
 8000038:	08000105 	.word	0x08000105
 800003c:	08000105 	.word	0x08000105
	...
 80000b0:	0800032b 	.word	0x0800032b
 80000b4:	0800035f 	.word	0x0800035f

080000b8 <Reset_Handler>:
	.thumb_func 			@; identify target type to linker
Reset_Handler:				@; @; start-from-reset code; initialize hardware and system data, launch main()
	@; copy .data section (initialized data) from flash to RAM (currently we must do this in each source file)
	@; (!!todo: figure out how we can get the compiler/asembler/linker to place constants in .rodata, etc)
copy_data:	
	ldr r1, DATA_BEG
 80000b8:	490e      	ldr	r1, [pc, #56]	; (80000f4 <DATA_BEG>)
	ldr r2, TEXT_END
 80000ba:	4a0d      	ldr	r2, [pc, #52]	; (80000f0 <TEXT_END>)
	ldr r3, DATA_END
 80000bc:	4b0e      	ldr	r3, [pc, #56]	; (80000f8 <DATA_END>)
	subs r3, r3, r1			@; length of initialized data
 80000be:	1a5b      	subs	r3, r3, r1
	beq zero_bss			@; skip if none
 80000c0:	d005      	beq.n	80000ce <zero_bss>

080000c2 <copy_data_loop>:
copy_data_loop: 
	ldrb r4,[r2], #1		@; read byte from flash
 80000c2:	f812 4b01 	ldrb.w	r4, [r2], #1
	strb r4, [r1], #1  		@; store byte to RAM
 80000c6:	f801 4b01 	strb.w	r4, [r1], #1
	subs r3, r3, #1  		@; decrement counter
 80000ca:	3b01      	subs	r3, #1
	bgt copy_data_loop		@; repeat until done
 80000cc:	dcf9      	bgt.n	80000c2 <copy_data_loop>

080000ce <zero_bss>:

	@; zero out .bss section (uninitialized data) (currently we must do this in each source file)
	@; (!!todo: figure out how to get the linker to give us the extents of the merged .bss sections)
zero_bss: 	
	ldr r1, BSS_BEG
 80000ce:	490b      	ldr	r1, [pc, #44]	; (80000fc <BSS_BEG>)
	ldr r3, BSS_END
 80000d0:	4b0b      	ldr	r3, [pc, #44]	; (8000100 <BSS_END>)
	subs r3, r3, r1			@; Length of uninitialized data
 80000d2:	1a5b      	subs	r3, r3, r1
	beq initPLL				@; Skip if none
 80000d4:	d005      	beq.n	80000e2 <call_main>
	mov r2, #0				@; value to initialize .bss with
 80000d6:	f04f 0200 	mov.w	r2, #0

080000da <zero_bss_loop>:
zero_bss_loop: 	
	strb r2, [r1],#1		@; Store zero
 80000da:	f801 2b01 	strb.w	r2, [r1], #1
	subs r3, r3, #1			@; Decrement counter
 80000de:	3b01      	subs	r3, #1
	bgt zero_bss_loop		@; Repeat until done
 80000e0:	dcfb      	bgt.n	80000da <zero_bss_loop>

080000e2 <call_main>:
@;	bl CortexM3asmOps_init @; !!todo -- fix this!	
	@;here with everything set up and ready to go
	
	@exit to main (wont return)
call_main:	
	mov	r0, #0				@; argc=0
 80000e2:	f04f 0000 	mov.w	r0, #0
	mov r1, #0				@; argv=NULL
 80000e6:	f04f 0100 	mov.w	r1, #0
	bl	main 				@; gone
 80000ea:	f002 ff07 	bl	8002efc <main>
	b .						@; trap if return
 80000ee:	e7fe      	b.n	80000ee <call_main+0xc>

080000f0 <TEXT_END>:
 80000f0:	08003ddc 	.word	0x08003ddc

080000f4 <DATA_BEG>:
 80000f4:	20000000 	.word	0x20000000

080000f8 <DATA_END>:
 80000f8:	20000024 	.word	0x20000024

080000fc <BSS_BEG>:
 80000fc:	20000024 	.word	0x20000024

08000100 <BSS_END>:
 8000100:	20000040 	.word	0x20000040

08000104 <BusFault_Handler>:
DebugMon_Handler:
	.thumb_func
PendSV_Handler:
	.thumb_func
SysTick_Handler:
	bx  r14	 /* put a breakpoint here when we're debugging so we can trap here but then return to interrupted code */
 8000104:	4770      	bx	lr
	...

08000108 <mikes_IO_init>:
	.global mikes_IO_init
	.thumb_func
mikes_IO_init:

	@; 1) Standard prologue.
	push {lr}
 8000108:	b500      	push	{lr}
	push {r0-r12}				@; Total of 13 Saved Registers at the beginning of the stack.
 800010a:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	adds r7, sp, #0				@; Make current stack pointer the new base pointer.	
 800010e:	f11d 0700 	adds.w	r7, sp, #0
	
	
	@; 2) Enable pins in RCC->AHB1ENR.  O disables, 1 enables.
	ldr r0, =RCC_AHB1ENR		@; r0: RCC_AHB1ENR address
 8000112:	f8df 0500 	ldr.w	r0, [pc, #1280]	; 8000614 <increment+0xc>
	ldr r1, [r0]				@; r1: value at ahb1enr.
 8000116:	6801      	ldr	r1, [r0, #0]
	@; OR this value with bitpattern for pins to be turned on.
	orr r1, r1, 0xf				@; r1: old ahb1enr bitpattern with A B, c, and D turned on.
 8000118:	f041 010f 	orr.w	r1, r1, #15
	str r1, [r0]
 800011c:	6001      	str	r1, [r0, #0]
	
	
	@; 3) Set MODER.
	ldr r0, =GPIOA_MODER		@; r0: GPIOA_MODER address
 800011e:	f8df 04f8 	ldr.w	r0, [pc, #1272]	; 8000618 <increment+0x10>
	ldr r1, [r0]				@; r1: GPIOA_MODER value
 8000122:	6801      	ldr	r1, [r0, #0]
	@; We must first reset bit duplets we want to 0, so that an OR bitmask will overwrite them entirely.
	@; This is done with an AND bitmask.
	@; Start with GPIOA->MODER
	ldr r2, =0xffff00f0
 8000124:	f8df 24f4 	ldr.w	r2, [pc, #1268]	; 800061c <increment+0x14>
	and r1, r1, r2				@; Relevant values cleared to receive.
 8000128:	ea01 0102 	and.w	r1, r1, r2
	ldr r2, =0x00005505
 800012c:	f8df 24f0 	ldr.w	r2, [pc, #1264]	; 8000620 <increment+0x18>
	orr r1, r1, r2				@; Relevant values received.
 8000130:	ea41 0102 	orr.w	r1, r1, r2
	str r1, [r0]				@; GPIOA_MODER set!
 8000134:	6001      	str	r1, [r0, #0]
	@; Time to do gpioC->MODER.
	ldr r3, =GPIOC_MODER		@; r3: GPIOC_MODER address
 8000136:	f8df 34ec 	ldr.w	r3, [pc, #1260]	; 8000624 <increment+0x1c>
	ldr r1, [r3]
 800013a:	6819      	ldr	r1, [r3, #0]
	ldr r2, =0xfc0ff000
 800013c:	f8df 24e8 	ldr.w	r2, [pc, #1256]	; 8000628 <increment+0x20>
	and r1, r1, r2
 8000140:	ea01 0102 	and.w	r1, r1, r2
	ldr r2, =0x00500555
 8000144:	f8df 24e4 	ldr.w	r2, [pc, #1252]	; 800062c <increment+0x24>
	orr r1, r1, r2
 8000148:	ea41 0102 	orr.w	r1, r1, r2
	str r1, [r3]				@; GPIOC_MODER set!
 800014c:	6019      	str	r1, [r3, #0]
	@; Time to do gpioB->MODER.
	ldr r3, =GPIOB_MODER		@; r3: GPIOB_MODER address
 800014e:	f8df 34e0 	ldr.w	r3, [pc, #1248]	; 8000630 <increment+0x28>
	ldr r1, [r3]
 8000152:	6819      	ldr	r1, [r3, #0]
	ldr r2, =0xfff3c3f0
 8000154:	f8df 24dc 	ldr.w	r2, [pc, #1244]	; 8000634 <increment+0x2c>
	and r1, r1, r2
 8000158:	ea01 0102 	and.w	r1, r1, r2
	ldr r2, =0x00040000
 800015c:	f8df 24d8 	ldr.w	r2, [pc, #1240]	; 8000638 <increment+0x30>
	orr r1, r1, r2
 8000160:	ea41 0102 	orr.w	r1, r1, r2
	str r1, [r3]				@; GPIOB_MODER set!
 8000164:	6019      	str	r1, [r3, #0]
	@; Time to do gpioD->MODER.
	ldr r3, =GPIOD_MODER		@; r3: GPIOD_MODER address
 8000166:	f8df 34d4 	ldr.w	r3, [pc, #1236]	; 800063c <increment+0x34>
	ldr r1, [r3]
 800016a:	6819      	ldr	r1, [r3, #0]
	ldr r2, =0xffffffcf
 800016c:	f8df 24d0 	ldr.w	r2, [pc, #1232]	; 8000640 <increment+0x38>
	and r1, r1, r2
 8000170:	ea01 0102 	and.w	r1, r1, r2
	str r1, [r3]				@; GPIOD_MODER set!
 8000174:	6019      	str	r1, [r3, #0]
	
	
	@; 4) set GPIOA->OTYPER and GPIOC->OTYPER.
	ldr r0, =GPIOA_OTYPER		@; r0: GPIOA->OTYPER address
 8000176:	f8df 04cc 	ldr.w	r0, [pc, #1228]	; 8000644 <increment+0x3c>
	@; Zero out pins 0,1,4,5,6,7.
	ldr r1, [r0]
 800017a:	6801      	ldr	r1, [r0, #0]
	and r1, r1, #0xffffff0c
 800017c:	f021 01f3 	bic.w	r1, r1, #243	; 0xf3
	str r1, [r0]
 8000180:	6001      	str	r1, [r0, #0]
	@; Now do reg C.  Zero pins 0,1,2,3,4,5, 10,11.
	ldr r3, =GPIOC_OTYPER		@; r3: GPIOC->OTYPER address
 8000182:	f8df 34c4 	ldr.w	r3, [pc, #1220]	; 8000648 <increment+0x40>
	ldr r1, [r3]				@; r1: gpioc-otyper value
 8000186:	6819      	ldr	r1, [r3, #0]
	ldr r2, =C_OTYPER_MASK
 8000188:	f8df 24c0 	ldr.w	r2, [pc, #1216]	; 800064c <increment+0x44>
	and r1, r1, r2
 800018c:	ea01 0102 	and.w	r1, r1, r2
@;	and r1, r1, #0xfffff3c0
	str r1, [r3]
 8000190:	6019      	str	r1, [r3, #0]
	@; Now do reg B.  Zero pin 9.
	ldr r4, =GPIOB_OTYPER		@; r2: GPIOb->OTYPER address
 8000192:	f8df 44bc 	ldr.w	r4, [pc, #1212]	; 8000650 <increment+0x48>
	ldr r1, [r4]				@; r1: gpiob-otyper value
 8000196:	6821      	ldr	r1, [r4, #0]
	and r1, r1, #0xfffffdff
 8000198:	f421 7100 	bic.w	r1, r1, #512	; 0x200
	str r1, [r4] 
 800019c:	6021      	str	r1, [r4, #0]
	
	@; remember: r0=GPIOA_OTYPER, r1=tmp, r2=tmp, r3=GPIOC_OTYPER, r4 =GPIOB_OTYPER
	
	
	@; 5) Set OSPEEDR.
	adds r0, r0, #4
 800019e:	3004      	adds	r0, #4
	adds r4, r4, #4
 80001a0:	3404      	adds	r4, #4
	adds r3, r3, #4
 80001a2:	3304      	adds	r3, #4
	ldr r1, [r0]				@; r1: gpioA-ospeedr value
 80001a4:	6801      	ldr	r1, [r0, #0]
	ldr r2, =0xffff00f0
 80001a6:	f8df 2474 	ldr.w	r2, [pc, #1140]	; 800061c <increment+0x14>
	and r1, r1, r2				@; Relevant values cleared to receive.
 80001aa:	ea01 0102 	and.w	r1, r1, r2
	ldr r2, =0x0000aa0a
 80001ae:	f8df 24a4 	ldr.w	r2, [pc, #1188]	; 8000654 <increment+0x4c>
	orr r1, r1, r2				@; Relevant values received.
 80001b2:	ea41 0102 	orr.w	r1, r1, r2
	str r1, [r0]				@; gpioA-ospeedr set!
 80001b6:	6001      	str	r1, [r0, #0]
	@; On to gpio C.
	ldr r1, [r3]
 80001b8:	6819      	ldr	r1, [r3, #0]
	ldr r2, =0xff0ff000
 80001ba:	f8df 249c 	ldr.w	r2, [pc, #1180]	; 8000658 <increment+0x50>
	and r1, r1, r2				@; Relevant values cleared to receive.
 80001be:	ea01 0102 	and.w	r1, r1, r2
	ldr r2, =0x00a00aaa
 80001c2:	f8df 2498 	ldr.w	r2, [pc, #1176]	; 800065c <increment+0x54>
	orr r1, r1, r2				@; Relevant values received.
 80001c6:	ea41 0102 	orr.w	r1, r1, r2
	str r1, [r3]				@; gpioA-ospeedr set!
 80001ca:	6019      	str	r1, [r3, #0]
	@; On to gpio B.
	ldr r1, [r4]				@; r1: value at GPIOB_OTYPER
 80001cc:	6821      	ldr	r1, [r4, #0]
	ldr r2, =0xfff3ffff
 80001ce:	f8df 2490 	ldr.w	r2, [pc, #1168]	; 8000660 <increment+0x58>
	and r1, r1, r2				@; relevant values cleared to receive
 80001d2:	ea01 0102 	and.w	r1, r1, r2
	ldr r2, =0x00080000
 80001d6:	f8df 248c 	ldr.w	r2, [pc, #1164]	; 8000664 <increment+0x5c>
	orr r1, r1, r2
 80001da:	ea41 0102 	orr.w	r1, r1, r2
	str r1, [r4]
 80001de:	6021      	str	r1, [r4, #0]
	
	@; 6) Set PUPDR to pull-up (01).
	adds r0, r0, #4
 80001e0:	3004      	adds	r0, #4
	adds r4, r4, #4
 80001e2:	3404      	adds	r4, #4
	adds r3, r3, #4
 80001e4:	3304      	adds	r3, #4
	ldr r1, [r0]
 80001e6:	6801      	ldr	r1, [r0, #0]
	ldr r2, =0xffff00f0
 80001e8:	f8df 2430 	ldr.w	r2, [pc, #1072]	; 800061c <increment+0x14>
	and r1, r1, r2				@; Relevant values cleared to receive.
 80001ec:	ea01 0102 	and.w	r1, r1, r2
	ldr r2, =0x00005505
 80001f0:	f8df 242c 	ldr.w	r2, [pc, #1068]	; 8000620 <increment+0x18>
	orr r1, r1, r2				@; Relevant values received.
 80001f4:	ea41 0102 	orr.w	r1, r1, r2
	str r1, [r0]				@; GPIOA_PUPDR set!
 80001f8:	6001      	str	r1, [r0, #0]
	@; Time to do gpioC->PUPDR.
	ldr r1, [r3]
 80001fa:	6819      	ldr	r1, [r3, #0]
	ldr r2, =0xfc0ff000
 80001fc:	f8df 2428 	ldr.w	r2, [pc, #1064]	; 8000628 <increment+0x20>
	and r1, r1, r2
 8000200:	ea01 0102 	and.w	r1, r1, r2
	ldr r2, =0x01500555
 8000204:	f8df 2460 	ldr.w	r2, [pc, #1120]	; 8000668 <increment+0x60>
	orr r1, r1, r2
 8000208:	ea41 0102 	orr.w	r1, r1, r2
	str r1, [r3]				@; GPIOC_PUPDR set!
 800020c:	6019      	str	r1, [r3, #0]
	@; Time to do gpioB_PUPDR.
	ldr r1, [r4]
 800020e:	6821      	ldr	r1, [r4, #0]
	ldr r2, =0xfff3c3f0
 8000210:	f8df 2420 	ldr.w	r2, [pc, #1056]	; 8000634 <increment+0x2c>
	and r1, r1, r2				@; relevant values cleared to receive
 8000214:	ea01 0102 	and.w	r1, r1, r2
	ldr r2, =0x00041405
 8000218:	f8df 2450 	ldr.w	r2, [pc, #1104]	; 800066c <increment+0x64>
	orr r1, r1, r2
 800021c:	ea41 0102 	orr.w	r1, r1, r2
	str r1, [r4]
 8000220:	6021      	str	r1, [r4, #0]
	@; Time to do gpioD_PUPDR.
	ldr r5, =GPIOD_PUPDR
 8000222:	f8df 544c 	ldr.w	r5, [pc, #1100]	; 8000670 <increment+0x68>
	ldr r1, [r5]				@;value
 8000226:	6829      	ldr	r1, [r5, #0]
	ldr r2, =0xffffffcf			@;and mask
 8000228:	f8df 2414 	ldr.w	r2, [pc, #1044]	; 8000640 <increment+0x38>
	and r1, r1, r2				@; r1: pupdr value with rel value zeroed
 800022c:	ea01 0102 	and.w	r1, r1, r2
	ldr r2, =0x00000010
 8000230:	f8df 2440 	ldr.w	r2, [pc, #1088]	; 8000674 <increment+0x6c>
	orr r1, r1, r2
 8000234:	ea41 0102 	orr.w	r1, r1, r2
	str r1, [r5]
 8000238:	6029      	str	r1, [r5, #0]
	
	@; 7) Standard epilogue.
	subs r1, sp, r7				@; r1: sp - bp
 800023a:	ebbd 0107 	subs.w	r1, sp, r7
	movs r2, #0					@; r2: 0
 800023e:	2200      	movs	r2, #0
	subs r1, r2, r1				@; r1: bp - sp
 8000240:	1a51      	subs	r1, r2, r1
	adds sp, sp, r1				@; sp: sp - (gap between sp and bp).  Stack frame cleared!
 8000242:	eb1d 0d01 	adds.w	sp, sp, r1
	adds sp, sp, #4				@; Decrement sp past Saved Register R0, since that is the one Caller-Saves register.
 8000246:	f11d 0d04 	adds.w	sp, sp, #4
	pop {r1-r12}				@; Assume ALL function calls overwrite r0 (i.e. it will not be restored).
 800024a:	e8bd 1ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	pop {pc}
 800024e:	bd00      	pop	{pc}

08000250 <timer_init>:
	.global timer_init
	.thumb_func
timer_init:

	@; 1) Standard prologue.
	push {lr}
 8000250:	b500      	push	{lr}
	push {r0-r12}				@; Total of 13 Saved Registers at the beginning of the stack.
 8000252:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	adds r7, sp, #0				@; Make current stack pointer the new base pointer.	
 8000256:	f11d 0700 	adds.w	r7, sp, #0
	
	@; 2) Enable TIM2 from RCC_APB1ENR.
	ldr r1, =RCC_APB1ENR
 800025a:	f8df 141c 	ldr.w	r1, [pc, #1052]	; 8000678 <increment+0x70>
	ldr r2, [r1]
 800025e:	680a      	ldr	r2, [r1, #0]
	mov r3, #1
 8000260:	f04f 0301 	mov.w	r3, #1
	orr r2, r2, r3
 8000264:	ea42 0203 	orr.w	r2, r2, r3
	str r2, [r1]
 8000268:	600a      	str	r2, [r1, #0]
	
	@; Set TIM2 prescaler to 0
	ldr r1, =TIM2_PSC
 800026a:	f8df 1410 	ldr.w	r1, [pc, #1040]	; 800067c <increment+0x74>
	mov r2, #0
 800026e:	f04f 0200 	mov.w	r2, #0
	str r2, [r1]
 8000272:	600a      	str	r2, [r1, #0]
	
	@; 4) Enable update interrupt for TIM2, using TIM2_DIER.
	ldr r1, =TIM2_DIER
 8000274:	f8df 1408 	ldr.w	r1, [pc, #1032]	; 8000680 <increment+0x78>
	mov r2, #0x1
 8000278:	f04f 0201 	mov.w	r2, #1
	str r2, [r1]	
 800027c:	600a      	str	r2, [r1, #0]
	
	@; Pre-load countdown value.
	ldr r1, =TIM2_ARR
 800027e:	f8df 1404 	ldr.w	r1, [pc, #1028]	; 8000684 <increment+0x7c>
	str r0, [r1]
 8000282:	6008      	str	r0, [r1, #0]
	
	@; 3) Configure TIM2 settings from TIM2_CR1.
	ldr r1, =TIM2_CR1
 8000284:	f8df 1400 	ldr.w	r1, [pc, #1024]	; 8000688 <increment+0x80>
	mov r2, #0x81
 8000288:	f04f 0281 	mov.w	r2, #129	; 0x81
	str r2, [r1]
 800028c:	600a      	str	r2, [r1, #0]
	
	@; trigger update event to reload timer registers (TIM2_EGR)
	ldr r1, =TIM2_EGR
 800028e:	49ff      	ldr	r1, [pc, #1020]	; (800068c <increment+0x84>)
	mov r2, #1
 8000290:	f04f 0201 	mov.w	r2, #1
	str r2, [r1]
 8000294:	600a      	str	r2, [r1, #0]
	
	@; Reset TIM2_SR (status register)
	mov r1, #0
 8000296:	f04f 0100 	mov.w	r1, #0
	ldr r2, =TIM2_SR
 800029a:	4afd      	ldr	r2, [pc, #1012]	; (8000690 <increment+0x88>)
	str r1, [r2]
 800029c:	6011      	str	r1, [r2, #0]
	
	@; 5) enable the TIM2 interrupt in the NVIC table
	ldr r1, =NVIC_BASE1			@; ISER1 (interrupt set-enable register) r1: address of ISER1
 800029e:	49fd      	ldr	r1, [pc, #1012]	; (8000694 <increment+0x8c>)
	ldr r2, [r1]				@; r2: value of ISER1
 80002a0:	680a      	ldr	r2, [r1, #0]
	mov r3, #0x10000000		    @; or mask for TIM2 IRQ enable
 80002a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	orr r2, r3, r2				@; r2: new ISER1 value
 80002a6:	ea43 0202 	orr.w	r2, r3, r2
	str r2, [r1]
 80002aa:	600a      	str	r2, [r1, #0]
	
	@; 7) Standard epilogue.
	subs r1, sp, r7				@; r1: sp - bp
 80002ac:	ebbd 0107 	subs.w	r1, sp, r7
	movs r2, #0					@; r2: 0
 80002b0:	2200      	movs	r2, #0
	subs r1, r2, r1				@; r1: bp - sp
 80002b2:	1a51      	subs	r1, r2, r1
	adds sp, sp, r1				@; sp: sp - (gap between sp and bp).  Stack frame cleared!
 80002b4:	eb1d 0d01 	adds.w	sp, sp, r1
	adds sp, sp, #4				@; Decrement sp past Saved Register R0, since that is the one Caller-Saves register.
 80002b8:	f11d 0d04 	adds.w	sp, sp, #4
	pop {r1-r12}				@; Assume ALL function calls overwrite r0 (i.e. it will not be restored).
 80002bc:	e8bd 1ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	pop {pc}
 80002c0:	bd00      	pop	{pc}

080002c2 <wallClk_init>:
	.global wallClk_init
	.thumb_func
wallClk_init:

	@; 1) Standard prologue.
	push {lr}
 80002c2:	b500      	push	{lr}
	push {r0-r12}				@; Total of 13 Saved Registers at the beginning of the stack.
 80002c4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	adds r7, sp, #0				@; Make current stack pointer the new base pointer.	
 80002c8:	f11d 0700 	adds.w	r7, sp, #0
	
	@; 2) Enable TIM2 from RCC_APB1ENR.
	ldr r1, =RCC_APB1ENR
 80002cc:	49ea      	ldr	r1, [pc, #936]	; (8000678 <increment+0x70>)
	ldr r2, [r1]
 80002ce:	680a      	ldr	r2, [r1, #0]
	mov r3, #2
 80002d0:	f04f 0302 	mov.w	r3, #2
	orr r2, r2, r3
 80002d4:	ea42 0203 	orr.w	r2, r2, r3
	str r2, [r1]
 80002d8:	600a      	str	r2, [r1, #0]
	
	@; Set TIM3 prescaler so that we get 16^4 times slower 
	ldr r1, =TIM3_PSC
 80002da:	49ef      	ldr	r1, [pc, #956]	; (8000698 <increment+0x90>)
	mov r2, #0
 80002dc:	f04f 0200 	mov.w	r2, #0
	str r2, [r1]
 80002e0:	600a      	str	r2, [r1, #0]
	
	@; 4) Enable update interrupt for TIM3, using TIM3_DIER.
	ldr r1, =TIM3_DIER
 80002e2:	49ee      	ldr	r1, [pc, #952]	; (800069c <increment+0x94>)
	mov r2, #0x1
 80002e4:	f04f 0201 	mov.w	r2, #1
	str r2, [r1]	
 80002e8:	600a      	str	r2, [r1, #0]
	
	@; Pre-load countdown value.
	ldr r1, =TIM3_ARR
 80002ea:	49ed      	ldr	r1, [pc, #948]	; (80006a0 <increment+0x98>)
	str r0, [r1]
 80002ec:	6008      	str	r0, [r1, #0]
	
	@; 3) Configure TIM3 settings from TIM3_CR1.
	ldr r1, =TIM3_CR1
 80002ee:	49ed      	ldr	r1, [pc, #948]	; (80006a4 <increment+0x9c>)
	mov r2, #0x81
 80002f0:	f04f 0281 	mov.w	r2, #129	; 0x81
	str r2, [r1]
 80002f4:	600a      	str	r2, [r1, #0]
	
	@; trigger update event to reload timer registers (TIM3_EGR)
	ldr r1, =TIM3_EGR
 80002f6:	49ec      	ldr	r1, [pc, #944]	; (80006a8 <increment+0xa0>)
	mov r2, #1
 80002f8:	f04f 0201 	mov.w	r2, #1
	str r2, [r1]
 80002fc:	600a      	str	r2, [r1, #0]
	
	@; Reset TIM3_SR (status register)
	mov r1, #0
 80002fe:	f04f 0100 	mov.w	r1, #0
	ldr r2, =TIM3_SR
 8000302:	4aea      	ldr	r2, [pc, #936]	; (80006ac <increment+0xa4>)
	str r1, [r2]
 8000304:	6011      	str	r1, [r2, #0]
	
	@; 5) enable the TIM3 interrupt in the NVIC table
	ldr r1, =NVIC_BASE1			@; ISER1 (interrupt set-enable register) r1: address of ISER1
 8000306:	49e3      	ldr	r1, [pc, #908]	; (8000694 <increment+0x8c>)
	ldr r2, [r1]				@; r2: value of ISER1
 8000308:	680a      	ldr	r2, [r1, #0]
	mov r3, #0x20000000		    @; or mask for TIM3 IRQ enable
 800030a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	orr r2, r3, r2				@; r2: new ISER1 value
 800030e:	ea43 0202 	orr.w	r2, r3, r2
	str r2, [r1]	
 8000312:	600a      	str	r2, [r1, #0]
	
	@; 7) Standard epilogue.
	subs r1, sp, r7				@; r1: sp - bp
 8000314:	ebbd 0107 	subs.w	r1, sp, r7
	movs r2, #0					@; r2: 0
 8000318:	2200      	movs	r2, #0
	subs r1, r2, r1				@; r1: bp - sp
 800031a:	1a51      	subs	r1, r2, r1
	adds sp, sp, r1				@; sp: sp - (gap between sp and bp).  Stack frame cleared!
 800031c:	eb1d 0d01 	adds.w	sp, sp, r1
	adds sp, sp, #4				@; Decrement sp past Saved Register R0, since that is the one Caller-Saves register.
 8000320:	f11d 0d04 	adds.w	sp, sp, #4
	pop {r1-r12}				@; Assume ALL function calls overwrite r0 (i.e. it will not be restored).
 8000324:	e8bd 1ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	pop {pc}
 8000328:	bd00      	pop	{pc}

0800032a <TIM2_IRQHandler>:
	@; DON'T TOUCH R0.
	.global TIM2_IRQHandler
	.thumb_func
TIM2_IRQHandler:
	@; 1) Standard prologue:
	push {lr}
 800032a:	b500      	push	{lr}
	push {r0-r12}				@; Total of 13 Saved Registers at the beginning of the stack.
 800032c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	adds r7, sp, #0				@; Make current stack pointer the new base pointer.	
 8000330:	f11d 0700 	adds.w	r7, sp, #0
	
	@; Reset TIM2_SR (status register)
	mov r1, #0
 8000334:	f04f 0100 	mov.w	r1, #0
	ldr r2, =TIM2_SR
 8000338:	4ad5      	ldr	r2, [pc, #852]	; (8000690 <increment+0x88>)
	str r1, [r2]
 800033a:	6011      	str	r1, [r2, #0]
	
	@; Pause clock
	
	@; update display
	bl mikes_display_update
 800033c:	f002 fa24 	bl	8002788 <mikes_display_update>
	
	@; reset clock
	mov r1, #0
 8000340:	f04f 0100 	mov.w	r1, #0
	ldr r2, =TIM2_CNT
 8000344:	4ada      	ldr	r2, [pc, #872]	; (80006b0 <increment+0xa8>)
	str r1, [r2]
 8000346:	6011      	str	r1, [r2, #0]

	@; 7) Standard epilogue.
	subs r1, sp, r7				@; r1: sp - bp
 8000348:	ebbd 0107 	subs.w	r1, sp, r7
	movs r2, #0					@; r2: 0
 800034c:	2200      	movs	r2, #0
	subs r1, r2, r1				@; r1: bp - sp
 800034e:	1a51      	subs	r1, r2, r1
	adds sp, sp, r1				@; sp: sp - (gap between sp and bp).  Stack frame cleared!
 8000350:	eb1d 0d01 	adds.w	sp, sp, r1
	adds sp, sp, #4				@; Decrement sp past Saved Register R0, since that is the one Caller-Saves register.
 8000354:	f11d 0d04 	adds.w	sp, sp, #4
	pop {r1-r12}				@; Assume ALL function calls overwrite r0 (i.e. it will not be restored).
 8000358:	e8bd 1ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	
	
	pop {pc}
 800035c:	bd00      	pop	{pc}

0800035e <TIM3_IRQHandler>:
	@; More specifically, we're using TIM3 interrupt to trigger the incrementing of our "wall clock" global var.
	.global TIM3_IRQHandler
	.thumb_func
TIM3_IRQHandler:
	@; 1) Standard prologue:
	push {lr}
 800035e:	b500      	push	{lr}
	push {r0-r12}				@; Total of 13 Saved Registers at the beginning of the stack.
 8000360:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	adds r7, sp, #0				@; Make current stack pointer the new base pointer.	
 8000364:	f11d 0700 	adds.w	r7, sp, #0
	
		@; Reset TIM2_SR (status register)
	mov r1, #0
 8000368:	f04f 0100 	mov.w	r1, #0
	ldr r2, =TIM3_SR
 800036c:	4acf      	ldr	r2, [pc, #828]	; (80006ac <increment+0xa4>)
	str r1, [r2]
 800036e:	6011      	str	r1, [r2, #0]
	
	@; increment counter
	ldr r1, =wallClk			@; r1: address of wallClk var
 8000370:	49d0      	ldr	r1, [pc, #832]	; (80006b4 <increment+0xac>)
	ldr r2, [r1]				@; r2: value of wallClk var
 8000372:	680a      	ldr	r2, [r1, #0]
	adds r2, r2, #1				@; increment value
 8000374:	3201      	adds	r2, #1
	str r2, [r1]				@; put back
 8000376:	600a      	str	r2, [r1, #0]
	
	@; reset clock
	mov r1, #0
 8000378:	f04f 0100 	mov.w	r1, #0
	ldr r2, =TIM3_CNT
 800037c:	4ace      	ldr	r2, [pc, #824]	; (80006b8 <increment+0xb0>)
	str r1, [r2]
 800037e:	6011      	str	r1, [r2, #0]

	@; 7) Standard epilogue.
	subs r1, sp, r7				@; r1: sp - bp
 8000380:	ebbd 0107 	subs.w	r1, sp, r7
	movs r2, #0					@; r2: 0
 8000384:	2200      	movs	r2, #0
	subs r1, r2, r1				@; r1: bp - sp
 8000386:	1a51      	subs	r1, r2, r1
	adds sp, sp, r1				@; sp: sp - (gap between sp and bp).  Stack frame cleared!
 8000388:	eb1d 0d01 	adds.w	sp, sp, r1
	adds sp, sp, #4				@; Decrement sp past Saved Register R0, since that is the one Caller-Saves register.
 800038c:	f11d 0d04 	adds.w	sp, sp, #4
	pop {r1-r12}				@; Assume ALL function calls overwrite r0 (i.e. it will not be restored).
 8000390:	e8bd 1ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	
	pop {pc}
 8000394:	bd00      	pop	{pc}

08000396 <display_bitpattern_at_digit>:
	.global display_bitpattern_at_digit
	.thumb_func
display_bitpattern_at_digit:

	@; 1) Standard prologue:
	push {lr}
 8000396:	b500      	push	{lr}
	push {r0-r12}				@; Total of 13 Saved Registers at the beginning of the stack.
 8000398:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	adds r7, sp, #0				@; Make current stack pointer the new base pointer.	
 800039c:	f11d 0700 	adds.w	r7, sp, #0
								@; r0: GPIOA_BSSR value for cathode bit-pattern
								@; r1: GPIOC_BSSR value for cathode bit-pattern
								@; r2: GPIOA_BSSR value for anode bit-pattern
								@; r3: GPIOC_BSSR value for anode bit-pattern

	ldr r4, =GPIOA_BSRR			@; r4: GPIOA_BSRR address
 80003a0:	4cc6      	ldr	r4, [pc, #792]	; (80006bc <increment+0xb4>)
	ldr r5, =GPIOC_BSRR			@; r5: GPIOC_BSRR address
 80003a2:	4dc7      	ldr	r5, [pc, #796]	; (80006c0 <increment+0xb8>)
	ldr r6, =0x00000040			@; disable cathode via register A
 80003a4:	4ec7      	ldr	r6, [pc, #796]	; (80006c4 <increment+0xbc>)
	str r6, [r4]
 80003a6:	6026      	str	r6, [r4, #0]
	ldr r6, =0x00000002			@; disable anode via register C
 80003a8:	4ec7      	ldr	r6, [pc, #796]	; (80006c8 <increment+0xc0>)
	str r6, [r5]
 80003aa:	602e      	str	r6, [r5, #0]
	
	@; 3) Put appropriate bit pattern to cathodes (remember to both activate desired segments AND to deactivate undesired segments).
	str r0, [r4]				@; bit pattern for cathode register A
 80003ac:	6020      	str	r0, [r4, #0]
	str r1, [r5]				@; bit pattern for cathode reigster C
 80003ae:	6029      	str	r1, [r5, #0]
	
	@; 4) Trip cathode clock lo/hi (rising edge supposedly triggers).
	ldr r6, =0x00200000
 80003b0:	4ec6      	ldr	r6, [pc, #792]	; (80006cc <increment+0xc4>)
	str r6, [r5]
 80003b2:	602e      	str	r6, [r5, #0]
	ldr r6, =0x00000020
 80003b4:	4ec6      	ldr	r6, [pc, #792]	; (80006d0 <increment+0xc8>)
	str r6, [r5]
 80003b6:	602e      	str	r6, [r5, #0]
	
	@; 5) Put appropriate pattern to anodes (activate just digit1, deactivate all others).
	@; caller saves r0:
	str r2, [r4]				@; put to reg A
 80003b8:	6022      	str	r2, [r4, #0]
	str r3, [r5]				@; put to reg C
 80003ba:	602b      	str	r3, [r5, #0]
	
	@; 5) Trip anode clock lo/hi.
	ldr r6, =0x00100000
 80003bc:	4ec5      	ldr	r6, [pc, #788]	; (80006d4 <increment+0xcc>)
	str r6, [r5]
 80003be:	602e      	str	r6, [r5, #0]
	ldr r6, =0x00000010
 80003c0:	4eac      	ldr	r6, [pc, #688]	; (8000674 <increment+0x6c>)
	str r6, [r5]
 80003c2:	602e      	str	r6, [r5, #0]
	
	@; 6) Re-enable display drivers.
	ldr r6, =0x00400000			@; disable cathode via register A
 80003c4:	4ec4      	ldr	r6, [pc, #784]	; (80006d8 <increment+0xd0>)
	str r6, [r4]
 80003c6:	6026      	str	r6, [r4, #0]
	ldr r6, =0x00020000			@; disable anode via register C
 80003c8:	4ec4      	ldr	r6, [pc, #784]	; (80006dc <increment+0xd4>)
	str r6, [r5]
 80003ca:	602e      	str	r6, [r5, #0]
	
	@; 7) Standard epilogue:
	subs r1, sp, r7				@; r1: sp - bp
 80003cc:	ebbd 0107 	subs.w	r1, sp, r7
	movs r2, #0					@; r2: 0
 80003d0:	2200      	movs	r2, #0
	subs r1, r2, r1				@; r1: bp - sp
 80003d2:	1a51      	subs	r1, r2, r1
	adds sp, sp, r1				@; sp: sp - (gap between sp and bp).  Stack frame cleared!
 80003d4:	eb1d 0d01 	adds.w	sp, sp, r1
	adds sp, sp, #4				@; Decrement sp past Saved Register R0, since that is the one Caller-Saves register.
 80003d8:	f11d 0d04 	adds.w	sp, sp, #4
	pop {r1-r12}				@; Assume ALL function calls overwrite r0 (i.e. it will not be restored).
 80003dc:	e8bd 1ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	pop {pc}
 80003e0:	bd00      	pop	{pc}

080003e2 <mikes_get_switch>:
	@; return R0: 0 if switch is on, 1 if it is off.
	.global mikes_get_switch
	.thumb_func
mikes_get_switch:
	@; 1) Standard prologue:
	push {lr}
 80003e2:	b500      	push	{lr}
	push {r0-r12}				@; Total of 13 Saved Registers at the beginning of the stack.
 80003e4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	adds r7, sp, #0				@; Make current stack pointer the new base pointer.	
 80003e8:	f11d 0700 	adds.w	r7, sp, #0
	
	@; 2) Setup values used in the switch statement.
	ldr r1, =GPIOB_BSRR			@; r1: address of set-reset register for GPIO B
 80003ec:	49bc      	ldr	r1, [pc, #752]	; (80006e0 <increment+0xd8>)
	ldr r2, =GPIOC_BSRR			@; r2: address of set-reset register for GPIO C
 80003ee:	4ab4      	ldr	r2, [pc, #720]	; (80006c0 <increment+0xb8>)
	
	ldr r3, =GPIOB_IDR			@; r3: address of input-data register for GPIO B
 80003f0:	4bbc      	ldr	r3, [pc, #752]	; (80006e4 <increment+0xdc>)
	ldr r4, =GPIOD_IDR			@; r4: address of input-data register for GPIO D
 80003f2:	4cbd      	ldr	r4, [pc, #756]	; (80006e8 <increment+0xe0>)
	
	@;  The following three registers are altered by the switch statement.
	ldr r5, =0x02000000			@; r5: B9 BSRR value
 80003f4:	4dbd      	ldr	r5, [pc, #756]	; (80006ec <increment+0xe4>)
	ldr r6, =0x04000000			@; r6: C10 BSRR value
 80003f6:	4ebe      	ldr	r6, [pc, #760]	; (80006f0 <increment+0xe8>)
	ldr r8, =0x08000000			@; r8: C11 BSRR value
 80003f8:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 80006f4 <increment+0xec>
		
		
	@; 3) Twelve-part switch statement; Registers r9-r12 free to use.
	@; If arg is 1:
	cmp r0, #1
 80003fc:	2801      	cmp	r0, #1
	ldr r10, =0x00000001			@; r10: IDR and-mask for B0
 80003fe:	f8df a2f8 	ldr.w	sl, [pc, #760]	; 80006f8 <increment+0xf0>
	beq one
 8000402:	d000      	beq.n	8000406 <one>
	b	notOne
 8000404:	e009      	b.n	800041a <notOne>

08000406 <one>:
one:
	sampleSwitchMacro r1,r3,r5
 8000406:	600d      	str	r5, [r1, #0]
 8000408:	f000 f8fc 	bl	8000604 <wait>
 800040c:	6818      	ldr	r0, [r3, #0]
 800040e:	ea00 000a 	and.w	r0, r0, sl
 8000412:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8000416:	600d      	str	r5, [r1, #0]
	b endSwitch	
 8000418:	e0ab      	b.n	8000572 <endSwitch>

0800041a <notOne>:
	
notOne:
	@; Else, if arg is 2:
	cmp r0, #2
 800041a:	2802      	cmp	r0, #2
	ldr r10, =0x00000004			@; r10: IDR and-mask for D2
 800041c:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 80006fc <increment+0xf4>
	beq two
 8000420:	d000      	beq.n	8000424 <two>
	b notTwo
 8000422:	e009      	b.n	8000438 <notTwo>

08000424 <two>:
two:
	sampleSwitchMacro r1,r4,r5
 8000424:	600d      	str	r5, [r1, #0]
 8000426:	f000 f8ed 	bl	8000604 <wait>
 800042a:	6820      	ldr	r0, [r4, #0]
 800042c:	ea00 000a 	and.w	r0, r0, sl
 8000430:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8000434:	600d      	str	r5, [r1, #0]
	b endSwitch
 8000436:	e09c      	b.n	8000572 <endSwitch>

08000438 <notTwo>:
notTwo:
	@; Else, if arg is 3:
	cmp r0, #3
 8000438:	2803      	cmp	r0, #3
	ldr r10, =0x00000002			@; r10: IDR and-mask for B1
 800043a:	f8df a28c 	ldr.w	sl, [pc, #652]	; 80006c8 <increment+0xc0>
	beq three
 800043e:	d000      	beq.n	8000442 <three>
	b notThree
 8000440:	e009      	b.n	8000456 <notThree>

08000442 <three>:
three:
	sampleSwitchMacro r1,r3,r5
 8000442:	600d      	str	r5, [r1, #0]
 8000444:	f000 f8de 	bl	8000604 <wait>
 8000448:	6818      	ldr	r0, [r3, #0]
 800044a:	ea00 000a 	and.w	r0, r0, sl
 800044e:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8000452:	600d      	str	r5, [r1, #0]
	b endSwitch
 8000454:	e08d      	b.n	8000572 <endSwitch>

08000456 <notThree>:
notThree:
	@; Else, if arg is 4:
	cmp r0, #4
 8000456:	2804      	cmp	r0, #4
	ldr r10, =0x00000040			@; r10: IDR and-mask for B6
 8000458:	f8df a268 	ldr.w	sl, [pc, #616]	; 80006c4 <increment+0xbc>
	beq four
 800045c:	d000      	beq.n	8000460 <four>
	b notFour
 800045e:	e009      	b.n	8000474 <notFour>

08000460 <four>:
four:
	sampleSwitchMacro r1,r3,r5
 8000460:	600d      	str	r5, [r1, #0]
 8000462:	f000 f8cf 	bl	8000604 <wait>
 8000466:	6818      	ldr	r0, [r3, #0]
 8000468:	ea00 000a 	and.w	r0, r0, sl
 800046c:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8000470:	600d      	str	r5, [r1, #0]
	b endSwitch
 8000472:	e07e      	b.n	8000572 <endSwitch>

08000474 <notFour>:
notFour:
	@; Else, if arg is 5:
	cmp r0, #5
 8000474:	2805      	cmp	r0, #5
	ldr r10, =0x00000001			@; r10: IDR and-mask for B0
 8000476:	f8df a280 	ldr.w	sl, [pc, #640]	; 80006f8 <increment+0xf0>
	beq five
 800047a:	d000      	beq.n	800047e <five>
	b notFive
 800047c:	e009      	b.n	8000492 <notFive>

0800047e <five>:
five:
	sampleSwitchMacro r2,r3,r6
 800047e:	6016      	str	r6, [r2, #0]
 8000480:	f000 f8c0 	bl	8000604 <wait>
 8000484:	6818      	ldr	r0, [r3, #0]
 8000486:	ea00 000a 	and.w	r0, r0, sl
 800048a:	ea4f 4616 	mov.w	r6, r6, lsr #16
 800048e:	6016      	str	r6, [r2, #0]
	b endSwitch
 8000490:	e06f      	b.n	8000572 <endSwitch>

08000492 <notFive>:
notFive:
	@; Else, if arg is 6:
	cmp r0, #6
 8000492:	2806      	cmp	r0, #6
	ldr r10, =0x00000004			@; r10: IDR and-mask for D2
 8000494:	f8df a264 	ldr.w	sl, [pc, #612]	; 80006fc <increment+0xf4>
	beq six
 8000498:	d000      	beq.n	800049c <six>
	b notSix
 800049a:	e009      	b.n	80004b0 <notSix>

0800049c <six>:
six:
	sampleSwitchMacro r2,r4,r6
 800049c:	6016      	str	r6, [r2, #0]
 800049e:	f000 f8b1 	bl	8000604 <wait>
 80004a2:	6820      	ldr	r0, [r4, #0]
 80004a4:	ea00 000a 	and.w	r0, r0, sl
 80004a8:	ea4f 4616 	mov.w	r6, r6, lsr #16
 80004ac:	6016      	str	r6, [r2, #0]
	b endSwitch
 80004ae:	e060      	b.n	8000572 <endSwitch>

080004b0 <notSix>:
notSix:
	@; Else, if arg is 7:
	cmp r0, #7
 80004b0:	2807      	cmp	r0, #7
	ldr r10, =0x00000002			@; r10: IDR and-mask for B1
 80004b2:	f8df a214 	ldr.w	sl, [pc, #532]	; 80006c8 <increment+0xc0>
	beq seven
 80004b6:	d000      	beq.n	80004ba <seven>
	b notSeven
 80004b8:	e009      	b.n	80004ce <notSeven>

080004ba <seven>:
seven:
	sampleSwitchMacro r2,r3,r6
 80004ba:	6016      	str	r6, [r2, #0]
 80004bc:	f000 f8a2 	bl	8000604 <wait>
 80004c0:	6818      	ldr	r0, [r3, #0]
 80004c2:	ea00 000a 	and.w	r0, r0, sl
 80004c6:	ea4f 4616 	mov.w	r6, r6, lsr #16
 80004ca:	6016      	str	r6, [r2, #0]
	b endSwitch
 80004cc:	e051      	b.n	8000572 <endSwitch>

080004ce <notSeven>:
notSeven:
	@; Else, if arg is 8:
	cmp r0, #8
 80004ce:	2808      	cmp	r0, #8
	ldr r10, =0x00000040			@; r10: IDR and-mask for B6
 80004d0:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 80006c4 <increment+0xbc>
	beq eight
 80004d4:	d000      	beq.n	80004d8 <eight>
	b notEight
 80004d6:	e009      	b.n	80004ec <notEight>

080004d8 <eight>:
eight:
	sampleSwitchMacro r2,r3,r6
 80004d8:	6016      	str	r6, [r2, #0]
 80004da:	f000 f893 	bl	8000604 <wait>
 80004de:	6818      	ldr	r0, [r3, #0]
 80004e0:	ea00 000a 	and.w	r0, r0, sl
 80004e4:	ea4f 4616 	mov.w	r6, r6, lsr #16
 80004e8:	6016      	str	r6, [r2, #0]
	b endSwitch
 80004ea:	e042      	b.n	8000572 <endSwitch>

080004ec <notEight>:
notEight:
	@; Else, if arg is 9:
	cmp r0, #9
 80004ec:	2809      	cmp	r0, #9
	ldr r10, =0x00000001			@; r10: IDR and-mask for B0
 80004ee:	f8df a208 	ldr.w	sl, [pc, #520]	; 80006f8 <increment+0xf0>
	beq nine
 80004f2:	d000      	beq.n	80004f6 <nine>
	b notNine
 80004f4:	e00b      	b.n	800050e <notNine>

080004f6 <nine>:
nine:
	sampleSwitchMacro r2,r3,r8
 80004f6:	f8c2 8000 	str.w	r8, [r2]
 80004fa:	f000 f883 	bl	8000604 <wait>
 80004fe:	6818      	ldr	r0, [r3, #0]
 8000500:	ea00 000a 	and.w	r0, r0, sl
 8000504:	ea4f 4818 	mov.w	r8, r8, lsr #16
 8000508:	f8c2 8000 	str.w	r8, [r2]
	b endSwitch
 800050c:	e031      	b.n	8000572 <endSwitch>

0800050e <notNine>:
notNine:
	@; Else, if arg is 10:
	cmp r0, #10
 800050e:	280a      	cmp	r0, #10
	ldr r10, =0x00000004			@; r10: IDR and-mask for D2
 8000510:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 80006fc <increment+0xf4>
	beq ten
 8000514:	d000      	beq.n	8000518 <ten>
	b notTen
 8000516:	e00b      	b.n	8000530 <notTen>

08000518 <ten>:
ten:
	sampleSwitchMacro r2,r4,r8
 8000518:	f8c2 8000 	str.w	r8, [r2]
 800051c:	f000 f872 	bl	8000604 <wait>
 8000520:	6820      	ldr	r0, [r4, #0]
 8000522:	ea00 000a 	and.w	r0, r0, sl
 8000526:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800052a:	f8c2 8000 	str.w	r8, [r2]
	b endSwitch
 800052e:	e020      	b.n	8000572 <endSwitch>

08000530 <notTen>:
notTen:
	@; Else, if arg is 11:
	cmp r0, #11
 8000530:	280b      	cmp	r0, #11
	ldr r10, =0x00000002			@; r10: IDR and-mask for B1
 8000532:	f8df a194 	ldr.w	sl, [pc, #404]	; 80006c8 <increment+0xc0>
	beq eleven
 8000536:	d000      	beq.n	800053a <eleven>
	b notEleven
 8000538:	e00b      	b.n	8000552 <notEleven>

0800053a <eleven>:
eleven:
	sampleSwitchMacro r2,r3,r8
 800053a:	f8c2 8000 	str.w	r8, [r2]
 800053e:	f000 f861 	bl	8000604 <wait>
 8000542:	6818      	ldr	r0, [r3, #0]
 8000544:	ea00 000a 	and.w	r0, r0, sl
 8000548:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800054c:	f8c2 8000 	str.w	r8, [r2]
	b endSwitch
 8000550:	e00f      	b.n	8000572 <endSwitch>

08000552 <notEleven>:
notEleven:
	@; Else, if arg is 12:
	cmp r0, #12
 8000552:	280c      	cmp	r0, #12
	ldr r10, =0x00000040			@; r10: IDR and-mask for B6
 8000554:	f8df a16c 	ldr.w	sl, [pc, #364]	; 80006c4 <increment+0xbc>
	beq twelve
 8000558:	d000      	beq.n	800055c <twelve>
	b endSwitch
 800055a:	e00a      	b.n	8000572 <endSwitch>

0800055c <twelve>:
twelve:
	sampleSwitchMacro r2,r3,r8
 800055c:	f8c2 8000 	str.w	r8, [r2]
 8000560:	f000 f850 	bl	8000604 <wait>
 8000564:	6818      	ldr	r0, [r3, #0]
 8000566:	ea00 000a 	and.w	r0, r0, sl
 800056a:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800056e:	f8c2 8000 	str.w	r8, [r2]

08000572 <endSwitch>:
	
endSwitch:
	@; 4) Standard epilogue:
	subs r1, sp, r7				@; r1: sp - bp
 8000572:	ebbd 0107 	subs.w	r1, sp, r7
	movs r2, #0					@; r2: 0
 8000576:	2200      	movs	r2, #0
	subs r1, r2, r1				@; r1: bp - sp
 8000578:	1a51      	subs	r1, r2, r1
	adds sp, sp, r1				@; sp: sp - (gap between sp and bp).  Stack frame cleared!
 800057a:	eb1d 0d01 	adds.w	sp, sp, r1
	adds sp, sp, #4				@; Decrement sp past Saved Register R0, since that is the one Caller-Saves register.
 800057e:	f11d 0d04 	adds.w	sp, sp, #4
	pop {r1-r12}				@; Assume ALL function calls overwrite r0 (i.e. it will not be restored).
 8000582:	e8bd 1ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	pop {pc}
 8000586:	bd00      	pop	{pc}

08000588 <read_encoderA>:
@; The following function simply reads the value being output by the encoder's "signal A" pin.
	.global read_encoderA
	.thumb_func
read_encoderA:
	@; 1) Standard prologue:
	push {lr}
 8000588:	b500      	push	{lr}
	push {r0-r12}				@; Total of 13 Saved Registers at the beginning of the stack.
 800058a:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	adds r7, sp, #0				@; Make current stack pointer the new base pointer.
 800058e:	f11d 0700 	adds.w	r7, sp, #0
	
	@; 2) Read pin C12 (IDR register)
	ldr r0, =GPIOC_IDR			@; r0: address of gpioc values
 8000592:	485b      	ldr	r0, [pc, #364]	; (8000700 <increment+0xf8>)
	ldr r0, [r0]				@; r0: value of gpioc values
 8000594:	6800      	ldr	r0, [r0, #0]
	and r0, r0, 0x00001000
 8000596:	f400 5080 	and.w	r0, r0, #4096	; 0x1000
	lsr r0, #12
 800059a:	ea4f 3010 	mov.w	r0, r0, lsr #12
	

	@; Standard epilogue:
	subs r1, sp, r7				@; r1: sp - bp
 800059e:	ebbd 0107 	subs.w	r1, sp, r7
	movs r2, #0					@; r2: 0
 80005a2:	2200      	movs	r2, #0
	subs r1, r2, r1				@; r1: bp - sp
 80005a4:	1a51      	subs	r1, r2, r1
	adds sp, sp, r1				@; sp: sp - (gap between sp and bp).  Stack frame cleared!
 80005a6:	eb1d 0d01 	adds.w	sp, sp, r1
	adds sp, sp, #4				@; Decrement sp past Saved Register R0, since that is the one Caller-Saves register.
 80005aa:	f11d 0d04 	adds.w	sp, sp, #4
	pop {r1-r12}				@; Assume ALL function calls overwrite r0 (i.e. it will not be restored).
 80005ae:	e8bd 1ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	pop {pc}
 80005b2:	bd00      	pop	{pc}

080005b4 <read_encoderB>:
	@; The following function simply reads the value being output by the encoder's "signal A" pin.
	.global read_encoderB
	.thumb_func
read_encoderB:
	@; 1) Standard prologue:
	push {lr}
 80005b4:	b500      	push	{lr}
	push {r0-r12}				@; Total of 13 Saved Registers at the beginning of the stack.
 80005b6:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	adds r7, sp, #0				@; Make current stack pointer the new base pointer.
 80005ba:	f11d 0700 	adds.w	r7, sp, #0
	
	@; 2) Read pin B5 (IDR register)
	ldr r0, =GPIOB_IDR			@; r0: address of gpiob values
 80005be:	4849      	ldr	r0, [pc, #292]	; (80006e4 <increment+0xdc>)
	ldr r0, [r0]				@; r0: value of gpiob values
 80005c0:	6800      	ldr	r0, [r0, #0]
	and r0, r0, 0x00000020
 80005c2:	f000 0020 	and.w	r0, r0, #32
	lsr r0, #5
 80005c6:	ea4f 1050 	mov.w	r0, r0, lsr #5
	

	@; Standard epilogue:
	subs r1, sp, r7				@; r1: sp - bp
 80005ca:	ebbd 0107 	subs.w	r1, sp, r7
	movs r2, #0					@; r2: 0
 80005ce:	2200      	movs	r2, #0
	subs r1, r2, r1				@; r1: bp - sp
 80005d0:	1a51      	subs	r1, r2, r1
	adds sp, sp, r1				@; sp: sp - (gap between sp and bp).  Stack frame cleared!
 80005d2:	eb1d 0d01 	adds.w	sp, sp, r1
	adds sp, sp, #4				@; Decrement sp past Saved Register R0, since that is the one Caller-Saves register.
 80005d6:	f11d 0d04 	adds.w	sp, sp, #4
	pop {r1-r12}				@; Assume ALL function calls overwrite r0 (i.e. it will not be restored).
 80005da:	e8bd 1ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	pop {pc}
 80005de:	bd00      	pop	{pc}

080005e0 <getTime>:
		@; Just returns the wallClk value.  Every 900 ticks is about a second.
	.global getTime
	.thumb_func
getTime:
	@; 1) Standard prologue:
	push {lr}
 80005e0:	b500      	push	{lr}
	push {r0-r12}				@; Total of 13 Saved Registers at the beginning of the stack.
 80005e2:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	adds r7, sp, #0				@; Make current stack pointer the new base pointer.
 80005e6:	f11d 0700 	adds.w	r7, sp, #0
	
	@; 2) Read pin B5 (IDR register)
	ldr r0, =wallClk
 80005ea:	4832      	ldr	r0, [pc, #200]	; (80006b4 <increment+0xac>)
	ldr r0, [r0]
 80005ec:	6800      	ldr	r0, [r0, #0]
	
	@; 3) Standard epilogue:
	subs r1, sp, r7				@; r1: sp - bp
 80005ee:	ebbd 0107 	subs.w	r1, sp, r7
	movs r2, #0					@; r2: 0
 80005f2:	2200      	movs	r2, #0
	subs r1, r2, r1				@; r1: bp - sp
 80005f4:	1a51      	subs	r1, r2, r1
	adds sp, sp, r1				@; sp: sp - (gap between sp and bp).  Stack frame cleared!
 80005f6:	eb1d 0d01 	adds.w	sp, sp, r1
	adds sp, sp, #4				@; Decrement sp past Saved Register R0, since that is the one Caller-Saves register.
 80005fa:	f11d 0d04 	adds.w	sp, sp, #4
	pop {r1-r12}				@; Assume ALL function calls overwrite r0 (i.e. it will not be restored).
 80005fe:	e8bd 1ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	pop {pc}
 8000602:	bd00      	pop	{pc}

08000604 <wait>:
	
	
	
@; Wait Function (caller saves, simple format, like a mini-function)
wait:
	push {r0}
 8000604:	b401      	push	{r0}
	ldr r0, =0x0
 8000606:	483f      	ldr	r0, [pc, #252]	; (8000704 <increment+0xfc>)

08000608 <increment>:
increment:
	add r0, r0, #1
 8000608:	f100 0001 	add.w	r0, r0, #1
	cmp r0, #100
 800060c:	2864      	cmp	r0, #100	; 0x64
	bne increment
 800060e:	d1fb      	bne.n	8000608 <increment>
	pop {r0}
 8000610:	bc01      	pop	{r0}
	bx lr
 8000612:	4770      	bx	lr
 8000614:	40023830 	.word	0x40023830
 8000618:	40020000 	.word	0x40020000
 800061c:	ffff00f0 	.word	0xffff00f0
 8000620:	00005505 	.word	0x00005505
 8000624:	40020800 	.word	0x40020800
 8000628:	fc0ff000 	.word	0xfc0ff000
 800062c:	00500555 	.word	0x00500555
 8000630:	40020400 	.word	0x40020400
 8000634:	fff3c3f0 	.word	0xfff3c3f0
 8000638:	00040000 	.word	0x00040000
 800063c:	40020c00 	.word	0x40020c00
 8000640:	ffffffcf 	.word	0xffffffcf
 8000644:	40020004 	.word	0x40020004
 8000648:	40020804 	.word	0x40020804
 800064c:	fffff3c0 	.word	0xfffff3c0
 8000650:	40020404 	.word	0x40020404
 8000654:	0000aa0a 	.word	0x0000aa0a
 8000658:	ff0ff000 	.word	0xff0ff000
 800065c:	00a00aaa 	.word	0x00a00aaa
 8000660:	fff3ffff 	.word	0xfff3ffff
 8000664:	00080000 	.word	0x00080000
 8000668:	01500555 	.word	0x01500555
 800066c:	00041405 	.word	0x00041405
 8000670:	40020c0c 	.word	0x40020c0c
 8000674:	00000010 	.word	0x00000010
 8000678:	40023840 	.word	0x40023840
 800067c:	40000028 	.word	0x40000028
 8000680:	4000000c 	.word	0x4000000c
 8000684:	4000002c 	.word	0x4000002c
 8000688:	40000000 	.word	0x40000000
 800068c:	40000014 	.word	0x40000014
 8000690:	40000010 	.word	0x40000010
 8000694:	e000e100 	.word	0xe000e100
 8000698:	40000428 	.word	0x40000428
 800069c:	4000040c 	.word	0x4000040c
 80006a0:	4000042c 	.word	0x4000042c
 80006a4:	40000400 	.word	0x40000400
 80006a8:	40000414 	.word	0x40000414
 80006ac:	40000410 	.word	0x40000410
 80006b0:	40000024 	.word	0x40000024
 80006b4:	20000000 	.word	0x20000000
 80006b8:	40000424 	.word	0x40000424
 80006bc:	40020018 	.word	0x40020018
 80006c0:	40020818 	.word	0x40020818
 80006c4:	00000040 	.word	0x00000040
 80006c8:	00000002 	.word	0x00000002
 80006cc:	00200000 	.word	0x00200000
 80006d0:	00000020 	.word	0x00000020
 80006d4:	00100000 	.word	0x00100000
 80006d8:	00400000 	.word	0x00400000
 80006dc:	00020000 	.word	0x00020000
 80006e0:	40020418 	.word	0x40020418
 80006e4:	40020410 	.word	0x40020410
 80006e8:	40020c10 	.word	0x40020c10
 80006ec:	02000000 	.word	0x02000000
 80006f0:	04000000 	.word	0x04000000
 80006f4:	08000000 	.word	0x08000000
 80006f8:	00000001 	.word	0x00000001
 80006fc:	00000004 	.word	0x00000004
 8000700:	40020810 	.word	0x40020810
 8000704:	00000000 	.word	0x00000000

08000708 <ST_P24DISPLAY_init>:
 8000708:	f643 0230 	movw	r2, #14384	; 0x3830
 800070c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000710:	6811      	ldr	r1, [r2, #0]
 8000712:	f041 0101 	orr.w	r1, r1, #1
 8000716:	6011      	str	r1, [r2, #0]
 8000718:	f643 0230 	movw	r2, #14384	; 0x3830
 800071c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000720:	6811      	ldr	r1, [r2, #0]
 8000722:	f041 0104 	orr.w	r1, r1, #4
 8000726:	6011      	str	r1, [r2, #0]
 8000728:	f640 0200 	movw	r2, #2048	; 0x800
 800072c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000730:	6811      	ldr	r1, [r2, #0]
 8000732:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8000736:	6011      	str	r1, [r2, #0]
 8000738:	6811      	ldr	r1, [r2, #0]
 800073a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800073e:	6011      	str	r1, [r2, #0]
 8000740:	6851      	ldr	r1, [r2, #4]
 8000742:	f021 0110 	bic.w	r1, r1, #16
 8000746:	6051      	str	r1, [r2, #4]
 8000748:	6891      	ldr	r1, [r2, #8]
 800074a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800074e:	6091      	str	r1, [r2, #8]
 8000750:	6891      	ldr	r1, [r2, #8]
 8000752:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8000756:	6091      	str	r1, [r2, #8]
 8000758:	68d1      	ldr	r1, [r2, #12]
 800075a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800075e:	60d1      	str	r1, [r2, #12]
 8000760:	68d1      	ldr	r1, [r2, #12]
 8000762:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000766:	60d1      	str	r1, [r2, #12]
 8000768:	f240 0200 	movw	r2, #0
 800076c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000770:	6811      	ldr	r1, [r2, #0]
 8000772:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8000776:	6011      	str	r1, [r2, #0]
 8000778:	6811      	ldr	r1, [r2, #0]
 800077a:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800077e:	6011      	str	r1, [r2, #0]
 8000780:	6851      	ldr	r1, [r2, #4]
 8000782:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8000786:	6051      	str	r1, [r2, #4]
 8000788:	6891      	ldr	r1, [r2, #8]
 800078a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800078e:	6091      	str	r1, [r2, #8]
 8000790:	6891      	ldr	r1, [r2, #8]
 8000792:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8000796:	6091      	str	r1, [r2, #8]
 8000798:	68d1      	ldr	r1, [r2, #12]
 800079a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800079e:	60d1      	str	r1, [r2, #12]
 80007a0:	68d1      	ldr	r1, [r2, #12]
 80007a2:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80007a6:	60d1      	str	r1, [r2, #12]
 80007a8:	f640 0200 	movw	r2, #2048	; 0x800
 80007ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007b0:	6811      	ldr	r1, [r2, #0]
 80007b2:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 80007b6:	6011      	str	r1, [r2, #0]
 80007b8:	6811      	ldr	r1, [r2, #0]
 80007ba:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80007be:	6011      	str	r1, [r2, #0]
 80007c0:	6851      	ldr	r1, [r2, #4]
 80007c2:	f021 0120 	bic.w	r1, r1, #32
 80007c6:	6051      	str	r1, [r2, #4]
 80007c8:	6891      	ldr	r1, [r2, #8]
 80007ca:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 80007ce:	6091      	str	r1, [r2, #8]
 80007d0:	6891      	ldr	r1, [r2, #8]
 80007d2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80007d6:	6091      	str	r1, [r2, #8]
 80007d8:	68d1      	ldr	r1, [r2, #12]
 80007da:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 80007de:	60d1      	str	r1, [r2, #12]
 80007e0:	68d1      	ldr	r1, [r2, #12]
 80007e2:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80007e6:	60d1      	str	r1, [r2, #12]
 80007e8:	f640 0200 	movw	r2, #2048	; 0x800
 80007ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007f0:	6811      	ldr	r1, [r2, #0]
 80007f2:	f021 010c 	bic.w	r1, r1, #12
 80007f6:	6011      	str	r1, [r2, #0]
 80007f8:	6811      	ldr	r1, [r2, #0]
 80007fa:	f041 0104 	orr.w	r1, r1, #4
 80007fe:	6011      	str	r1, [r2, #0]
 8000800:	6851      	ldr	r1, [r2, #4]
 8000802:	f021 0102 	bic.w	r1, r1, #2
 8000806:	6051      	str	r1, [r2, #4]
 8000808:	6891      	ldr	r1, [r2, #8]
 800080a:	f021 010c 	bic.w	r1, r1, #12
 800080e:	6091      	str	r1, [r2, #8]
 8000810:	6891      	ldr	r1, [r2, #8]
 8000812:	f041 0108 	orr.w	r1, r1, #8
 8000816:	6091      	str	r1, [r2, #8]
 8000818:	68d1      	ldr	r1, [r2, #12]
 800081a:	f021 010c 	bic.w	r1, r1, #12
 800081e:	60d1      	str	r1, [r2, #12]
 8000820:	68d1      	ldr	r1, [r2, #12]
 8000822:	f041 0104 	orr.w	r1, r1, #4
 8000826:	60d1      	str	r1, [r2, #12]
 8000828:	f640 0200 	movw	r2, #2048	; 0x800
 800082c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000830:	6811      	ldr	r1, [r2, #0]
 8000832:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8000836:	6011      	str	r1, [r2, #0]
 8000838:	6811      	ldr	r1, [r2, #0]
 800083a:	f041 0110 	orr.w	r1, r1, #16
 800083e:	6011      	str	r1, [r2, #0]
 8000840:	6851      	ldr	r1, [r2, #4]
 8000842:	f021 0104 	bic.w	r1, r1, #4
 8000846:	6051      	str	r1, [r2, #4]
 8000848:	6891      	ldr	r1, [r2, #8]
 800084a:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 800084e:	6091      	str	r1, [r2, #8]
 8000850:	6891      	ldr	r1, [r2, #8]
 8000852:	f041 0120 	orr.w	r1, r1, #32
 8000856:	6091      	str	r1, [r2, #8]
 8000858:	68d1      	ldr	r1, [r2, #12]
 800085a:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 800085e:	60d1      	str	r1, [r2, #12]
 8000860:	68d1      	ldr	r1, [r2, #12]
 8000862:	f041 0110 	orr.w	r1, r1, #16
 8000866:	60d1      	str	r1, [r2, #12]
 8000868:	f240 0200 	movw	r2, #0
 800086c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000870:	6811      	ldr	r1, [r2, #0]
 8000872:	f021 0103 	bic.w	r1, r1, #3
 8000876:	6011      	str	r1, [r2, #0]
 8000878:	6811      	ldr	r1, [r2, #0]
 800087a:	f041 0101 	orr.w	r1, r1, #1
 800087e:	6011      	str	r1, [r2, #0]
 8000880:	6851      	ldr	r1, [r2, #4]
 8000882:	f021 0101 	bic.w	r1, r1, #1
 8000886:	6051      	str	r1, [r2, #4]
 8000888:	6891      	ldr	r1, [r2, #8]
 800088a:	f021 0103 	bic.w	r1, r1, #3
 800088e:	6091      	str	r1, [r2, #8]
 8000890:	6891      	ldr	r1, [r2, #8]
 8000892:	f041 0102 	orr.w	r1, r1, #2
 8000896:	6091      	str	r1, [r2, #8]
 8000898:	68d1      	ldr	r1, [r2, #12]
 800089a:	f021 0103 	bic.w	r1, r1, #3
 800089e:	60d1      	str	r1, [r2, #12]
 80008a0:	68d1      	ldr	r1, [r2, #12]
 80008a2:	f041 0101 	orr.w	r1, r1, #1
 80008a6:	60d1      	str	r1, [r2, #12]
 80008a8:	f640 0200 	movw	r2, #2048	; 0x800
 80008ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80008b0:	6811      	ldr	r1, [r2, #0]
 80008b2:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80008b6:	6011      	str	r1, [r2, #0]
 80008b8:	6811      	ldr	r1, [r2, #0]
 80008ba:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80008be:	6011      	str	r1, [r2, #0]
 80008c0:	6851      	ldr	r1, [r2, #4]
 80008c2:	f021 0108 	bic.w	r1, r1, #8
 80008c6:	6051      	str	r1, [r2, #4]
 80008c8:	6891      	ldr	r1, [r2, #8]
 80008ca:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80008ce:	6091      	str	r1, [r2, #8]
 80008d0:	6891      	ldr	r1, [r2, #8]
 80008d2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80008d6:	6091      	str	r1, [r2, #8]
 80008d8:	68d1      	ldr	r1, [r2, #12]
 80008da:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80008de:	60d1      	str	r1, [r2, #12]
 80008e0:	68d1      	ldr	r1, [r2, #12]
 80008e2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80008e6:	60d1      	str	r1, [r2, #12]
 80008e8:	f240 0200 	movw	r2, #0
 80008ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80008f0:	6811      	ldr	r1, [r2, #0]
 80008f2:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 80008f6:	6011      	str	r1, [r2, #0]
 80008f8:	6811      	ldr	r1, [r2, #0]
 80008fa:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80008fe:	6011      	str	r1, [r2, #0]
 8000900:	6851      	ldr	r1, [r2, #4]
 8000902:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8000906:	6051      	str	r1, [r2, #4]
 8000908:	6891      	ldr	r1, [r2, #8]
 800090a:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 800090e:	6091      	str	r1, [r2, #8]
 8000910:	6891      	ldr	r1, [r2, #8]
 8000912:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8000916:	6091      	str	r1, [r2, #8]
 8000918:	68d1      	ldr	r1, [r2, #12]
 800091a:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 800091e:	60d1      	str	r1, [r2, #12]
 8000920:	68d1      	ldr	r1, [r2, #12]
 8000922:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000926:	60d1      	str	r1, [r2, #12]
 8000928:	f240 0200 	movw	r2, #0
 800092c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000930:	6811      	ldr	r1, [r2, #0]
 8000932:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8000936:	6011      	str	r1, [r2, #0]
 8000938:	6811      	ldr	r1, [r2, #0]
 800093a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800093e:	6011      	str	r1, [r2, #0]
 8000940:	6851      	ldr	r1, [r2, #4]
 8000942:	f021 0110 	bic.w	r1, r1, #16
 8000946:	6051      	str	r1, [r2, #4]
 8000948:	6891      	ldr	r1, [r2, #8]
 800094a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800094e:	6091      	str	r1, [r2, #8]
 8000950:	6891      	ldr	r1, [r2, #8]
 8000952:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8000956:	6091      	str	r1, [r2, #8]
 8000958:	68d1      	ldr	r1, [r2, #12]
 800095a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800095e:	60d1      	str	r1, [r2, #12]
 8000960:	68d1      	ldr	r1, [r2, #12]
 8000962:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000966:	60d1      	str	r1, [r2, #12]
 8000968:	f640 0200 	movw	r2, #2048	; 0x800
 800096c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000970:	6811      	ldr	r1, [r2, #0]
 8000972:	f021 0103 	bic.w	r1, r1, #3
 8000976:	6011      	str	r1, [r2, #0]
 8000978:	6811      	ldr	r1, [r2, #0]
 800097a:	f041 0101 	orr.w	r1, r1, #1
 800097e:	6011      	str	r1, [r2, #0]
 8000980:	6851      	ldr	r1, [r2, #4]
 8000982:	f021 0101 	bic.w	r1, r1, #1
 8000986:	6051      	str	r1, [r2, #4]
 8000988:	6891      	ldr	r1, [r2, #8]
 800098a:	f021 0103 	bic.w	r1, r1, #3
 800098e:	6091      	str	r1, [r2, #8]
 8000990:	6891      	ldr	r1, [r2, #8]
 8000992:	f041 0102 	orr.w	r1, r1, #2
 8000996:	6091      	str	r1, [r2, #8]
 8000998:	68d1      	ldr	r1, [r2, #12]
 800099a:	f021 0103 	bic.w	r1, r1, #3
 800099e:	60d1      	str	r1, [r2, #12]
 80009a0:	68d1      	ldr	r1, [r2, #12]
 80009a2:	f041 0101 	orr.w	r1, r1, #1
 80009a6:	60d1      	str	r1, [r2, #12]
 80009a8:	f240 0200 	movw	r2, #0
 80009ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80009b0:	6811      	ldr	r1, [r2, #0]
 80009b2:	f021 010c 	bic.w	r1, r1, #12
 80009b6:	6011      	str	r1, [r2, #0]
 80009b8:	6811      	ldr	r1, [r2, #0]
 80009ba:	f041 0104 	orr.w	r1, r1, #4
 80009be:	6011      	str	r1, [r2, #0]
 80009c0:	6851      	ldr	r1, [r2, #4]
 80009c2:	f021 0102 	bic.w	r1, r1, #2
 80009c6:	6051      	str	r1, [r2, #4]
 80009c8:	6891      	ldr	r1, [r2, #8]
 80009ca:	f021 010c 	bic.w	r1, r1, #12
 80009ce:	6091      	str	r1, [r2, #8]
 80009d0:	6891      	ldr	r1, [r2, #8]
 80009d2:	f041 0108 	orr.w	r1, r1, #8
 80009d6:	6091      	str	r1, [r2, #8]
 80009d8:	68d1      	ldr	r1, [r2, #12]
 80009da:	f021 010c 	bic.w	r1, r1, #12
 80009de:	60d1      	str	r1, [r2, #12]
 80009e0:	68d1      	ldr	r1, [r2, #12]
 80009e2:	f041 0104 	orr.w	r1, r1, #4
 80009e6:	60d1      	str	r1, [r2, #12]
 80009e8:	f240 0200 	movw	r2, #0
 80009ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80009f0:	6811      	ldr	r1, [r2, #0]
 80009f2:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 80009f6:	6011      	str	r1, [r2, #0]
 80009f8:	6811      	ldr	r1, [r2, #0]
 80009fa:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80009fe:	6011      	str	r1, [r2, #0]
 8000a00:	6851      	ldr	r1, [r2, #4]
 8000a02:	f021 0120 	bic.w	r1, r1, #32
 8000a06:	6051      	str	r1, [r2, #4]
 8000a08:	6891      	ldr	r1, [r2, #8]
 8000a0a:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8000a0e:	6091      	str	r1, [r2, #8]
 8000a10:	6891      	ldr	r1, [r2, #8]
 8000a12:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8000a16:	6091      	str	r1, [r2, #8]
 8000a18:	68d1      	ldr	r1, [r2, #12]
 8000a1a:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8000a1e:	60d1      	str	r1, [r2, #12]
 8000a20:	68d1      	ldr	r1, [r2, #12]
 8000a22:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000a26:	60d1      	str	r1, [r2, #12]
 8000a28:	4770      	bx	lr

08000a2a <ST_P24SWITCH_init>:
 8000a2a:	f643 0230 	movw	r2, #14384	; 0x3830
 8000a2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a32:	6811      	ldr	r1, [r2, #0]
 8000a34:	f041 0102 	orr.w	r1, r1, #2
 8000a38:	6011      	str	r1, [r2, #0]
 8000a3a:	f643 0230 	movw	r2, #14384	; 0x3830
 8000a3e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a42:	6811      	ldr	r1, [r2, #0]
 8000a44:	f041 0104 	orr.w	r1, r1, #4
 8000a48:	6011      	str	r1, [r2, #0]
 8000a4a:	f643 0230 	movw	r2, #14384	; 0x3830
 8000a4e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a52:	6811      	ldr	r1, [r2, #0]
 8000a54:	f041 0108 	orr.w	r1, r1, #8
 8000a58:	6011      	str	r1, [r2, #0]
 8000a5a:	f240 4200 	movw	r2, #1024	; 0x400
 8000a5e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a62:	6811      	ldr	r1, [r2, #0]
 8000a64:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 8000a68:	6011      	str	r1, [r2, #0]
 8000a6a:	6811      	ldr	r1, [r2, #0]
 8000a6c:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8000a70:	6011      	str	r1, [r2, #0]
 8000a72:	6851      	ldr	r1, [r2, #4]
 8000a74:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8000a78:	6051      	str	r1, [r2, #4]
 8000a7a:	6891      	ldr	r1, [r2, #8]
 8000a7c:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 8000a80:	6091      	str	r1, [r2, #8]
 8000a82:	6891      	ldr	r1, [r2, #8]
 8000a84:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8000a88:	6091      	str	r1, [r2, #8]
 8000a8a:	68d1      	ldr	r1, [r2, #12]
 8000a8c:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 8000a90:	60d1      	str	r1, [r2, #12]
 8000a92:	68d1      	ldr	r1, [r2, #12]
 8000a94:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8000a98:	60d1      	str	r1, [r2, #12]
 8000a9a:	f240 4200 	movw	r2, #1024	; 0x400
 8000a9e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000aa2:	6811      	ldr	r1, [r2, #0]
 8000aa4:	f021 0103 	bic.w	r1, r1, #3
 8000aa8:	6011      	str	r1, [r2, #0]
 8000aaa:	6891      	ldr	r1, [r2, #8]
 8000aac:	f021 0103 	bic.w	r1, r1, #3
 8000ab0:	6091      	str	r1, [r2, #8]
 8000ab2:	6891      	ldr	r1, [r2, #8]
 8000ab4:	f041 0102 	orr.w	r1, r1, #2
 8000ab8:	6091      	str	r1, [r2, #8]
 8000aba:	68d1      	ldr	r1, [r2, #12]
 8000abc:	f021 0103 	bic.w	r1, r1, #3
 8000ac0:	60d1      	str	r1, [r2, #12]
 8000ac2:	68d1      	ldr	r1, [r2, #12]
 8000ac4:	f041 0101 	orr.w	r1, r1, #1
 8000ac8:	60d1      	str	r1, [r2, #12]
 8000aca:	f640 4200 	movw	r2, #3072	; 0xc00
 8000ace:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ad2:	6811      	ldr	r1, [r2, #0]
 8000ad4:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8000ad8:	6011      	str	r1, [r2, #0]
 8000ada:	6891      	ldr	r1, [r2, #8]
 8000adc:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8000ae0:	6091      	str	r1, [r2, #8]
 8000ae2:	6891      	ldr	r1, [r2, #8]
 8000ae4:	f041 0120 	orr.w	r1, r1, #32
 8000ae8:	6091      	str	r1, [r2, #8]
 8000aea:	68d1      	ldr	r1, [r2, #12]
 8000aec:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8000af0:	60d1      	str	r1, [r2, #12]
 8000af2:	68d1      	ldr	r1, [r2, #12]
 8000af4:	f041 0110 	orr.w	r1, r1, #16
 8000af8:	60d1      	str	r1, [r2, #12]
 8000afa:	f240 4200 	movw	r2, #1024	; 0x400
 8000afe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b02:	6811      	ldr	r1, [r2, #0]
 8000b04:	f021 010c 	bic.w	r1, r1, #12
 8000b08:	6011      	str	r1, [r2, #0]
 8000b0a:	6891      	ldr	r1, [r2, #8]
 8000b0c:	f021 010c 	bic.w	r1, r1, #12
 8000b10:	6091      	str	r1, [r2, #8]
 8000b12:	6891      	ldr	r1, [r2, #8]
 8000b14:	f041 0108 	orr.w	r1, r1, #8
 8000b18:	6091      	str	r1, [r2, #8]
 8000b1a:	68d1      	ldr	r1, [r2, #12]
 8000b1c:	f021 010c 	bic.w	r1, r1, #12
 8000b20:	60d1      	str	r1, [r2, #12]
 8000b22:	68d1      	ldr	r1, [r2, #12]
 8000b24:	f041 0104 	orr.w	r1, r1, #4
 8000b28:	60d1      	str	r1, [r2, #12]
 8000b2a:	f240 4200 	movw	r2, #1024	; 0x400
 8000b2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b32:	6811      	ldr	r1, [r2, #0]
 8000b34:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8000b38:	6011      	str	r1, [r2, #0]
 8000b3a:	6891      	ldr	r1, [r2, #8]
 8000b3c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8000b40:	6091      	str	r1, [r2, #8]
 8000b42:	6891      	ldr	r1, [r2, #8]
 8000b44:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8000b48:	6091      	str	r1, [r2, #8]
 8000b4a:	68d1      	ldr	r1, [r2, #12]
 8000b4c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8000b50:	60d1      	str	r1, [r2, #12]
 8000b52:	68d1      	ldr	r1, [r2, #12]
 8000b54:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8000b58:	60d1      	str	r1, [r2, #12]
 8000b5a:	f640 0200 	movw	r2, #2048	; 0x800
 8000b5e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b62:	6811      	ldr	r1, [r2, #0]
 8000b64:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8000b68:	6011      	str	r1, [r2, #0]
 8000b6a:	6811      	ldr	r1, [r2, #0]
 8000b6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b70:	6011      	str	r1, [r2, #0]
 8000b72:	6851      	ldr	r1, [r2, #4]
 8000b74:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8000b78:	6051      	str	r1, [r2, #4]
 8000b7a:	6891      	ldr	r1, [r2, #8]
 8000b7c:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8000b80:	6091      	str	r1, [r2, #8]
 8000b82:	6891      	ldr	r1, [r2, #8]
 8000b84:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8000b88:	6091      	str	r1, [r2, #8]
 8000b8a:	68d1      	ldr	r1, [r2, #12]
 8000b8c:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8000b90:	60d1      	str	r1, [r2, #12]
 8000b92:	68d1      	ldr	r1, [r2, #12]
 8000b94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b98:	60d1      	str	r1, [r2, #12]
 8000b9a:	f640 0200 	movw	r2, #2048	; 0x800
 8000b9e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ba2:	6811      	ldr	r1, [r2, #0]
 8000ba4:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 8000ba8:	6011      	str	r1, [r2, #0]
 8000baa:	6811      	ldr	r1, [r2, #0]
 8000bac:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8000bb0:	6011      	str	r1, [r2, #0]
 8000bb2:	6851      	ldr	r1, [r2, #4]
 8000bb4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8000bb8:	6051      	str	r1, [r2, #4]
 8000bba:	6891      	ldr	r1, [r2, #8]
 8000bbc:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 8000bc0:	6091      	str	r1, [r2, #8]
 8000bc2:	6891      	ldr	r1, [r2, #8]
 8000bc4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bc8:	6091      	str	r1, [r2, #8]
 8000bca:	68d1      	ldr	r1, [r2, #12]
 8000bcc:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 8000bd0:	60d1      	str	r1, [r2, #12]
 8000bd2:	68d1      	ldr	r1, [r2, #12]
 8000bd4:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8000bd8:	60d1      	str	r1, [r2, #12]
 8000bda:	f640 0200 	movw	r2, #2048	; 0x800
 8000bde:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000be2:	6811      	ldr	r1, [r2, #0]
 8000be4:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 8000be8:	6011      	str	r1, [r2, #0]
 8000bea:	6891      	ldr	r1, [r2, #8]
 8000bec:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 8000bf0:	6091      	str	r1, [r2, #8]
 8000bf2:	6891      	ldr	r1, [r2, #8]
 8000bf4:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8000bf8:	6091      	str	r1, [r2, #8]
 8000bfa:	68d1      	ldr	r1, [r2, #12]
 8000bfc:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 8000c00:	60d1      	str	r1, [r2, #12]
 8000c02:	68d1      	ldr	r1, [r2, #12]
 8000c04:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8000c08:	60d1      	str	r1, [r2, #12]
 8000c0a:	f240 4200 	movw	r2, #1024	; 0x400
 8000c0e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c12:	6811      	ldr	r1, [r2, #0]
 8000c14:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8000c18:	6011      	str	r1, [r2, #0]
 8000c1a:	6891      	ldr	r1, [r2, #8]
 8000c1c:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8000c20:	6091      	str	r1, [r2, #8]
 8000c22:	6891      	ldr	r1, [r2, #8]
 8000c24:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8000c28:	6091      	str	r1, [r2, #8]
 8000c2a:	68d1      	ldr	r1, [r2, #12]
 8000c2c:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8000c30:	60d1      	str	r1, [r2, #12]
 8000c32:	68d1      	ldr	r1, [r2, #12]
 8000c34:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000c38:	60d1      	str	r1, [r2, #12]
 8000c3a:	f240 4200 	movw	r2, #1024	; 0x400
 8000c3e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c46:	6191      	str	r1, [r2, #24]
 8000c48:	f640 0200 	movw	r2, #2048	; 0x800
 8000c4c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c54:	6191      	str	r1, [r2, #24]
 8000c56:	f640 0200 	movw	r2, #2048	; 0x800
 8000c5a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c62:	6191      	str	r1, [r2, #24]
 8000c64:	4770      	bx	lr

08000c66 <wrCATHODE_0>:
 8000c66:	f640 0200 	movw	r2, #2048	; 0x800
 8000c6a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c6e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000c72:	6191      	str	r1, [r2, #24]
 8000c74:	f240 0200 	movw	r2, #0
 8000c78:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c7c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000c80:	6191      	str	r1, [r2, #24]
 8000c82:	f640 0200 	movw	r2, #2048	; 0x800
 8000c86:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c8a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000c8e:	6191      	str	r1, [r2, #24]
 8000c90:	f240 0200 	movw	r2, #0
 8000c94:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c98:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8000c9c:	6191      	str	r1, [r2, #24]
 8000c9e:	f240 0200 	movw	r2, #0
 8000ca2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ca6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000caa:	6191      	str	r1, [r2, #24]
 8000cac:	f640 0200 	movw	r2, #2048	; 0x800
 8000cb0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000cb4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000cb8:	6191      	str	r1, [r2, #24]
 8000cba:	f240 0200 	movw	r2, #0
 8000cbe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000cc2:	f04f 0102 	mov.w	r1, #2
 8000cc6:	6191      	str	r1, [r2, #24]
 8000cc8:	f240 0200 	movw	r2, #0
 8000ccc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000cd0:	f04f 0120 	mov.w	r1, #32
 8000cd4:	6191      	str	r1, [r2, #24]
 8000cd6:	f640 0200 	movw	r2, #2048	; 0x800
 8000cda:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000cde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000ce2:	6191      	str	r1, [r2, #24]
 8000ce4:	f640 0200 	movw	r2, #2048	; 0x800
 8000ce8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000cec:	f04f 0120 	mov.w	r1, #32
 8000cf0:	6191      	str	r1, [r2, #24]
 8000cf2:	4770      	bx	lr

08000cf4 <printHEX>:
 8000cf4:	bf00      	nop
 8000cf6:	f000 000f 	and.w	r0, r0, #15
 8000cfa:	ea4f 0080 	mov.w	r0, r0, lsl #2
 8000cfe:	a201      	add	r2, pc, #4	; (adr r2, 8000d04 <printHEX_dispatch_table>)
 8000d00:	f852 f000 	ldr.w	pc, [r2, r0]

08000d04 <printHEX_dispatch_table>:
 8000d04:	08000d45 	.word	0x08000d45
 8000d08:	08000dd3 	.word	0x08000dd3
 8000d0c:	08000e61 	.word	0x08000e61
 8000d10:	08000eef 	.word	0x08000eef
 8000d14:	08000f7d 	.word	0x08000f7d
 8000d18:	0800100b 	.word	0x0800100b
 8000d1c:	08001099 	.word	0x08001099
 8000d20:	08001127 	.word	0x08001127
 8000d24:	080011b5 	.word	0x080011b5
 8000d28:	08001243 	.word	0x08001243
 8000d2c:	080012d1 	.word	0x080012d1
 8000d30:	0800135f 	.word	0x0800135f
 8000d34:	080013ed 	.word	0x080013ed
 8000d38:	0800147b 	.word	0x0800147b
 8000d3c:	08001509 	.word	0x08001509
 8000d40:	08001597 	.word	0x08001597

08000d44 <write0>:
 8000d44:	f640 0200 	movw	r2, #2048	; 0x800
 8000d48:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d4c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000d50:	6191      	str	r1, [r2, #24]
 8000d52:	f240 0200 	movw	r2, #0
 8000d56:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d5a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000d5e:	6191      	str	r1, [r2, #24]
 8000d60:	f640 0200 	movw	r2, #2048	; 0x800
 8000d64:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d68:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000d6c:	6191      	str	r1, [r2, #24]
 8000d6e:	f240 0200 	movw	r2, #0
 8000d72:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d76:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8000d7a:	6191      	str	r1, [r2, #24]
 8000d7c:	f240 0200 	movw	r2, #0
 8000d80:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d84:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000d88:	6191      	str	r1, [r2, #24]
 8000d8a:	f640 0200 	movw	r2, #2048	; 0x800
 8000d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d92:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000d96:	6191      	str	r1, [r2, #24]
 8000d98:	f240 0200 	movw	r2, #0
 8000d9c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000da0:	f04f 0102 	mov.w	r1, #2
 8000da4:	6191      	str	r1, [r2, #24]
 8000da6:	f240 0200 	movw	r2, #0
 8000daa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000dae:	f04f 0120 	mov.w	r1, #32
 8000db2:	6191      	str	r1, [r2, #24]
 8000db4:	f640 0200 	movw	r2, #2048	; 0x800
 8000db8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000dbc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000dc0:	6191      	str	r1, [r2, #24]
 8000dc2:	f640 0200 	movw	r2, #2048	; 0x800
 8000dc6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000dca:	f04f 0120 	mov.w	r1, #32
 8000dce:	6191      	str	r1, [r2, #24]
 8000dd0:	4770      	bx	lr

08000dd2 <write1>:
 8000dd2:	f640 0200 	movw	r2, #2048	; 0x800
 8000dd6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000dda:	f04f 0104 	mov.w	r1, #4
 8000dde:	6191      	str	r1, [r2, #24]
 8000de0:	f240 0200 	movw	r2, #0
 8000de4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000de8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000dec:	6191      	str	r1, [r2, #24]
 8000dee:	f640 0200 	movw	r2, #2048	; 0x800
 8000df2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000df6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000dfa:	6191      	str	r1, [r2, #24]
 8000dfc:	f240 0200 	movw	r2, #0
 8000e00:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e04:	f04f 0180 	mov.w	r1, #128	; 0x80
 8000e08:	6191      	str	r1, [r2, #24]
 8000e0a:	f240 0200 	movw	r2, #0
 8000e0e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e12:	f04f 0110 	mov.w	r1, #16
 8000e16:	6191      	str	r1, [r2, #24]
 8000e18:	f640 0200 	movw	r2, #2048	; 0x800
 8000e1c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e20:	f04f 0101 	mov.w	r1, #1
 8000e24:	6191      	str	r1, [r2, #24]
 8000e26:	f240 0200 	movw	r2, #0
 8000e2a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e2e:	f04f 0102 	mov.w	r1, #2
 8000e32:	6191      	str	r1, [r2, #24]
 8000e34:	f240 0200 	movw	r2, #0
 8000e38:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e3c:	f04f 0120 	mov.w	r1, #32
 8000e40:	6191      	str	r1, [r2, #24]
 8000e42:	f640 0200 	movw	r2, #2048	; 0x800
 8000e46:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000e4e:	6191      	str	r1, [r2, #24]
 8000e50:	f640 0200 	movw	r2, #2048	; 0x800
 8000e54:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e58:	f04f 0120 	mov.w	r1, #32
 8000e5c:	6191      	str	r1, [r2, #24]
 8000e5e:	4770      	bx	lr

08000e60 <write2>:
 8000e60:	f640 0200 	movw	r2, #2048	; 0x800
 8000e64:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e68:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000e6c:	6191      	str	r1, [r2, #24]
 8000e6e:	f240 0200 	movw	r2, #0
 8000e72:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e76:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000e7a:	6191      	str	r1, [r2, #24]
 8000e7c:	f640 0200 	movw	r2, #2048	; 0x800
 8000e80:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e84:	f04f 0108 	mov.w	r1, #8
 8000e88:	6191      	str	r1, [r2, #24]
 8000e8a:	f240 0200 	movw	r2, #0
 8000e8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e92:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8000e96:	6191      	str	r1, [r2, #24]
 8000e98:	f240 0200 	movw	r2, #0
 8000e9c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ea0:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000ea4:	6191      	str	r1, [r2, #24]
 8000ea6:	f640 0200 	movw	r2, #2048	; 0x800
 8000eaa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000eae:	f04f 0101 	mov.w	r1, #1
 8000eb2:	6191      	str	r1, [r2, #24]
 8000eb4:	f240 0200 	movw	r2, #0
 8000eb8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ebc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000ec0:	6191      	str	r1, [r2, #24]
 8000ec2:	f240 0200 	movw	r2, #0
 8000ec6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000eca:	f04f 0120 	mov.w	r1, #32
 8000ece:	6191      	str	r1, [r2, #24]
 8000ed0:	f640 0200 	movw	r2, #2048	; 0x800
 8000ed4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ed8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000edc:	6191      	str	r1, [r2, #24]
 8000ede:	f640 0200 	movw	r2, #2048	; 0x800
 8000ee2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ee6:	f04f 0120 	mov.w	r1, #32
 8000eea:	6191      	str	r1, [r2, #24]
 8000eec:	4770      	bx	lr

08000eee <write3>:
 8000eee:	f640 0200 	movw	r2, #2048	; 0x800
 8000ef2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ef6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000efa:	6191      	str	r1, [r2, #24]
 8000efc:	f240 0200 	movw	r2, #0
 8000f00:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f04:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000f08:	6191      	str	r1, [r2, #24]
 8000f0a:	f640 0200 	movw	r2, #2048	; 0x800
 8000f0e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f12:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000f16:	6191      	str	r1, [r2, #24]
 8000f18:	f240 0200 	movw	r2, #0
 8000f1c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f20:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8000f24:	6191      	str	r1, [r2, #24]
 8000f26:	f240 0200 	movw	r2, #0
 8000f2a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f2e:	f04f 0110 	mov.w	r1, #16
 8000f32:	6191      	str	r1, [r2, #24]
 8000f34:	f640 0200 	movw	r2, #2048	; 0x800
 8000f38:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f3c:	f04f 0101 	mov.w	r1, #1
 8000f40:	6191      	str	r1, [r2, #24]
 8000f42:	f240 0200 	movw	r2, #0
 8000f46:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f4a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000f4e:	6191      	str	r1, [r2, #24]
 8000f50:	f240 0200 	movw	r2, #0
 8000f54:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f58:	f04f 0120 	mov.w	r1, #32
 8000f5c:	6191      	str	r1, [r2, #24]
 8000f5e:	f640 0200 	movw	r2, #2048	; 0x800
 8000f62:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000f6a:	6191      	str	r1, [r2, #24]
 8000f6c:	f640 0200 	movw	r2, #2048	; 0x800
 8000f70:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f74:	f04f 0120 	mov.w	r1, #32
 8000f78:	6191      	str	r1, [r2, #24]
 8000f7a:	4770      	bx	lr

08000f7c <write4>:
 8000f7c:	f640 0200 	movw	r2, #2048	; 0x800
 8000f80:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f84:	f04f 0104 	mov.w	r1, #4
 8000f88:	6191      	str	r1, [r2, #24]
 8000f8a:	f240 0200 	movw	r2, #0
 8000f8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f92:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000f96:	6191      	str	r1, [r2, #24]
 8000f98:	f640 0200 	movw	r2, #2048	; 0x800
 8000f9c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fa0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000fa4:	6191      	str	r1, [r2, #24]
 8000fa6:	f240 0200 	movw	r2, #0
 8000faa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fae:	f04f 0180 	mov.w	r1, #128	; 0x80
 8000fb2:	6191      	str	r1, [r2, #24]
 8000fb4:	f240 0200 	movw	r2, #0
 8000fb8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fbc:	f04f 0110 	mov.w	r1, #16
 8000fc0:	6191      	str	r1, [r2, #24]
 8000fc2:	f640 0200 	movw	r2, #2048	; 0x800
 8000fc6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fca:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000fce:	6191      	str	r1, [r2, #24]
 8000fd0:	f240 0200 	movw	r2, #0
 8000fd4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fd8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000fdc:	6191      	str	r1, [r2, #24]
 8000fde:	f240 0200 	movw	r2, #0
 8000fe2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fe6:	f04f 0120 	mov.w	r1, #32
 8000fea:	6191      	str	r1, [r2, #24]
 8000fec:	f640 0200 	movw	r2, #2048	; 0x800
 8000ff0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ff4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000ff8:	6191      	str	r1, [r2, #24]
 8000ffa:	f640 0200 	movw	r2, #2048	; 0x800
 8000ffe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001002:	f04f 0120 	mov.w	r1, #32
 8001006:	6191      	str	r1, [r2, #24]
 8001008:	4770      	bx	lr

0800100a <write5>:
 800100a:	f640 0200 	movw	r2, #2048	; 0x800
 800100e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001012:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8001016:	6191      	str	r1, [r2, #24]
 8001018:	f240 0200 	movw	r2, #0
 800101c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001020:	f04f 0101 	mov.w	r1, #1
 8001024:	6191      	str	r1, [r2, #24]
 8001026:	f640 0200 	movw	r2, #2048	; 0x800
 800102a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800102e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001032:	6191      	str	r1, [r2, #24]
 8001034:	f240 0200 	movw	r2, #0
 8001038:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800103c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8001040:	6191      	str	r1, [r2, #24]
 8001042:	f240 0200 	movw	r2, #0
 8001046:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800104a:	f04f 0110 	mov.w	r1, #16
 800104e:	6191      	str	r1, [r2, #24]
 8001050:	f640 0200 	movw	r2, #2048	; 0x800
 8001054:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001058:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800105c:	6191      	str	r1, [r2, #24]
 800105e:	f240 0200 	movw	r2, #0
 8001062:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001066:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800106a:	6191      	str	r1, [r2, #24]
 800106c:	f240 0200 	movw	r2, #0
 8001070:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001074:	f04f 0120 	mov.w	r1, #32
 8001078:	6191      	str	r1, [r2, #24]
 800107a:	f640 0200 	movw	r2, #2048	; 0x800
 800107e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001082:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001086:	6191      	str	r1, [r2, #24]
 8001088:	f640 0200 	movw	r2, #2048	; 0x800
 800108c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001090:	f04f 0120 	mov.w	r1, #32
 8001094:	6191      	str	r1, [r2, #24]
 8001096:	4770      	bx	lr

08001098 <write6>:
 8001098:	f640 0200 	movw	r2, #2048	; 0x800
 800109c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010a0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80010a4:	6191      	str	r1, [r2, #24]
 80010a6:	f240 0200 	movw	r2, #0
 80010aa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010ae:	f04f 0101 	mov.w	r1, #1
 80010b2:	6191      	str	r1, [r2, #24]
 80010b4:	f640 0200 	movw	r2, #2048	; 0x800
 80010b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010bc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80010c0:	6191      	str	r1, [r2, #24]
 80010c2:	f240 0200 	movw	r2, #0
 80010c6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010ca:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80010ce:	6191      	str	r1, [r2, #24]
 80010d0:	f240 0200 	movw	r2, #0
 80010d4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010d8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80010dc:	6191      	str	r1, [r2, #24]
 80010de:	f640 0200 	movw	r2, #2048	; 0x800
 80010e2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010e6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80010ea:	6191      	str	r1, [r2, #24]
 80010ec:	f240 0200 	movw	r2, #0
 80010f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010f4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80010f8:	6191      	str	r1, [r2, #24]
 80010fa:	f240 0200 	movw	r2, #0
 80010fe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001102:	f04f 0120 	mov.w	r1, #32
 8001106:	6191      	str	r1, [r2, #24]
 8001108:	f640 0200 	movw	r2, #2048	; 0x800
 800110c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001110:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001114:	6191      	str	r1, [r2, #24]
 8001116:	f640 0200 	movw	r2, #2048	; 0x800
 800111a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800111e:	f04f 0120 	mov.w	r1, #32
 8001122:	6191      	str	r1, [r2, #24]
 8001124:	4770      	bx	lr

08001126 <write7>:
 8001126:	f640 0200 	movw	r2, #2048	; 0x800
 800112a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800112e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8001132:	6191      	str	r1, [r2, #24]
 8001134:	f240 0200 	movw	r2, #0
 8001138:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800113c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001140:	6191      	str	r1, [r2, #24]
 8001142:	f640 0200 	movw	r2, #2048	; 0x800
 8001146:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800114a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800114e:	6191      	str	r1, [r2, #24]
 8001150:	f240 0200 	movw	r2, #0
 8001154:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001158:	f04f 0180 	mov.w	r1, #128	; 0x80
 800115c:	6191      	str	r1, [r2, #24]
 800115e:	f240 0200 	movw	r2, #0
 8001162:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001166:	f04f 0110 	mov.w	r1, #16
 800116a:	6191      	str	r1, [r2, #24]
 800116c:	f640 0200 	movw	r2, #2048	; 0x800
 8001170:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001174:	f04f 0101 	mov.w	r1, #1
 8001178:	6191      	str	r1, [r2, #24]
 800117a:	f240 0200 	movw	r2, #0
 800117e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001182:	f04f 0102 	mov.w	r1, #2
 8001186:	6191      	str	r1, [r2, #24]
 8001188:	f240 0200 	movw	r2, #0
 800118c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001190:	f04f 0120 	mov.w	r1, #32
 8001194:	6191      	str	r1, [r2, #24]
 8001196:	f640 0200 	movw	r2, #2048	; 0x800
 800119a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800119e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80011a2:	6191      	str	r1, [r2, #24]
 80011a4:	f640 0200 	movw	r2, #2048	; 0x800
 80011a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011ac:	f04f 0120 	mov.w	r1, #32
 80011b0:	6191      	str	r1, [r2, #24]
 80011b2:	4770      	bx	lr

080011b4 <write8>:
 80011b4:	f640 0200 	movw	r2, #2048	; 0x800
 80011b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011bc:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80011c0:	6191      	str	r1, [r2, #24]
 80011c2:	f240 0200 	movw	r2, #0
 80011c6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011ca:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80011ce:	6191      	str	r1, [r2, #24]
 80011d0:	f640 0200 	movw	r2, #2048	; 0x800
 80011d4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011d8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80011dc:	6191      	str	r1, [r2, #24]
 80011de:	f240 0200 	movw	r2, #0
 80011e2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011e6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80011ea:	6191      	str	r1, [r2, #24]
 80011ec:	f240 0200 	movw	r2, #0
 80011f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011f4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80011f8:	6191      	str	r1, [r2, #24]
 80011fa:	f640 0200 	movw	r2, #2048	; 0x800
 80011fe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001202:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001206:	6191      	str	r1, [r2, #24]
 8001208:	f240 0200 	movw	r2, #0
 800120c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001210:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001214:	6191      	str	r1, [r2, #24]
 8001216:	f240 0200 	movw	r2, #0
 800121a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800121e:	f04f 0120 	mov.w	r1, #32
 8001222:	6191      	str	r1, [r2, #24]
 8001224:	f640 0200 	movw	r2, #2048	; 0x800
 8001228:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800122c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001230:	6191      	str	r1, [r2, #24]
 8001232:	f640 0200 	movw	r2, #2048	; 0x800
 8001236:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800123a:	f04f 0120 	mov.w	r1, #32
 800123e:	6191      	str	r1, [r2, #24]
 8001240:	4770      	bx	lr

08001242 <write9>:
 8001242:	f640 0200 	movw	r2, #2048	; 0x800
 8001246:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800124a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800124e:	6191      	str	r1, [r2, #24]
 8001250:	f240 0200 	movw	r2, #0
 8001254:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001258:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800125c:	6191      	str	r1, [r2, #24]
 800125e:	f640 0200 	movw	r2, #2048	; 0x800
 8001262:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001266:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800126a:	6191      	str	r1, [r2, #24]
 800126c:	f240 0200 	movw	r2, #0
 8001270:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001274:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8001278:	6191      	str	r1, [r2, #24]
 800127a:	f240 0200 	movw	r2, #0
 800127e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001282:	f04f 0110 	mov.w	r1, #16
 8001286:	6191      	str	r1, [r2, #24]
 8001288:	f640 0200 	movw	r2, #2048	; 0x800
 800128c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001290:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001294:	6191      	str	r1, [r2, #24]
 8001296:	f240 0200 	movw	r2, #0
 800129a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800129e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80012a2:	6191      	str	r1, [r2, #24]
 80012a4:	f240 0200 	movw	r2, #0
 80012a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012ac:	f04f 0120 	mov.w	r1, #32
 80012b0:	6191      	str	r1, [r2, #24]
 80012b2:	f640 0200 	movw	r2, #2048	; 0x800
 80012b6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80012be:	6191      	str	r1, [r2, #24]
 80012c0:	f640 0200 	movw	r2, #2048	; 0x800
 80012c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012c8:	f04f 0120 	mov.w	r1, #32
 80012cc:	6191      	str	r1, [r2, #24]
 80012ce:	4770      	bx	lr

080012d0 <writeA>:
 80012d0:	f640 0200 	movw	r2, #2048	; 0x800
 80012d4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012d8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80012dc:	6191      	str	r1, [r2, #24]
 80012de:	f240 0200 	movw	r2, #0
 80012e2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012e6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80012ea:	6191      	str	r1, [r2, #24]
 80012ec:	f640 0200 	movw	r2, #2048	; 0x800
 80012f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012f4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80012f8:	6191      	str	r1, [r2, #24]
 80012fa:	f240 0200 	movw	r2, #0
 80012fe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001302:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001306:	6191      	str	r1, [r2, #24]
 8001308:	f240 0200 	movw	r2, #0
 800130c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001310:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8001314:	6191      	str	r1, [r2, #24]
 8001316:	f640 0200 	movw	r2, #2048	; 0x800
 800131a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800131e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001322:	6191      	str	r1, [r2, #24]
 8001324:	f240 0200 	movw	r2, #0
 8001328:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800132c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001330:	6191      	str	r1, [r2, #24]
 8001332:	f240 0200 	movw	r2, #0
 8001336:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800133a:	f04f 0120 	mov.w	r1, #32
 800133e:	6191      	str	r1, [r2, #24]
 8001340:	f640 0200 	movw	r2, #2048	; 0x800
 8001344:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001348:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800134c:	6191      	str	r1, [r2, #24]
 800134e:	f640 0200 	movw	r2, #2048	; 0x800
 8001352:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001356:	f04f 0120 	mov.w	r1, #32
 800135a:	6191      	str	r1, [r2, #24]
 800135c:	4770      	bx	lr

0800135e <writeB>:
 800135e:	f640 0200 	movw	r2, #2048	; 0x800
 8001362:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001366:	f04f 0104 	mov.w	r1, #4
 800136a:	6191      	str	r1, [r2, #24]
 800136c:	f240 0200 	movw	r2, #0
 8001370:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001374:	f04f 0101 	mov.w	r1, #1
 8001378:	6191      	str	r1, [r2, #24]
 800137a:	f640 0200 	movw	r2, #2048	; 0x800
 800137e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001382:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001386:	6191      	str	r1, [r2, #24]
 8001388:	f240 0200 	movw	r2, #0
 800138c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001390:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8001394:	6191      	str	r1, [r2, #24]
 8001396:	f240 0200 	movw	r2, #0
 800139a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800139e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80013a2:	6191      	str	r1, [r2, #24]
 80013a4:	f640 0200 	movw	r2, #2048	; 0x800
 80013a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013ac:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80013b0:	6191      	str	r1, [r2, #24]
 80013b2:	f240 0200 	movw	r2, #0
 80013b6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013ba:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80013be:	6191      	str	r1, [r2, #24]
 80013c0:	f240 0200 	movw	r2, #0
 80013c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013c8:	f04f 0120 	mov.w	r1, #32
 80013cc:	6191      	str	r1, [r2, #24]
 80013ce:	f640 0200 	movw	r2, #2048	; 0x800
 80013d2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80013da:	6191      	str	r1, [r2, #24]
 80013dc:	f640 0200 	movw	r2, #2048	; 0x800
 80013e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013e4:	f04f 0120 	mov.w	r1, #32
 80013e8:	6191      	str	r1, [r2, #24]
 80013ea:	4770      	bx	lr

080013ec <writeC>:
 80013ec:	f640 0200 	movw	r2, #2048	; 0x800
 80013f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013f4:	f04f 0104 	mov.w	r1, #4
 80013f8:	6191      	str	r1, [r2, #24]
 80013fa:	f240 0200 	movw	r2, #0
 80013fe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001402:	f04f 0101 	mov.w	r1, #1
 8001406:	6191      	str	r1, [r2, #24]
 8001408:	f640 0200 	movw	r2, #2048	; 0x800
 800140c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001410:	f04f 0108 	mov.w	r1, #8
 8001414:	6191      	str	r1, [r2, #24]
 8001416:	f240 0200 	movw	r2, #0
 800141a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800141e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8001422:	6191      	str	r1, [r2, #24]
 8001424:	f240 0200 	movw	r2, #0
 8001428:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800142c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8001430:	6191      	str	r1, [r2, #24]
 8001432:	f640 0200 	movw	r2, #2048	; 0x800
 8001436:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800143a:	f04f 0101 	mov.w	r1, #1
 800143e:	6191      	str	r1, [r2, #24]
 8001440:	f240 0200 	movw	r2, #0
 8001444:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001448:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800144c:	6191      	str	r1, [r2, #24]
 800144e:	f240 0200 	movw	r2, #0
 8001452:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001456:	f04f 0120 	mov.w	r1, #32
 800145a:	6191      	str	r1, [r2, #24]
 800145c:	f640 0200 	movw	r2, #2048	; 0x800
 8001460:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001464:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001468:	6191      	str	r1, [r2, #24]
 800146a:	f640 0200 	movw	r2, #2048	; 0x800
 800146e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001472:	f04f 0120 	mov.w	r1, #32
 8001476:	6191      	str	r1, [r2, #24]
 8001478:	4770      	bx	lr

0800147a <writeD>:
 800147a:	f640 0200 	movw	r2, #2048	; 0x800
 800147e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001482:	f04f 0104 	mov.w	r1, #4
 8001486:	6191      	str	r1, [r2, #24]
 8001488:	f240 0200 	movw	r2, #0
 800148c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001490:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001494:	6191      	str	r1, [r2, #24]
 8001496:	f640 0200 	movw	r2, #2048	; 0x800
 800149a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800149e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80014a2:	6191      	str	r1, [r2, #24]
 80014a4:	f240 0200 	movw	r2, #0
 80014a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80014ac:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80014b0:	6191      	str	r1, [r2, #24]
 80014b2:	f240 0200 	movw	r2, #0
 80014b6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80014ba:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80014be:	6191      	str	r1, [r2, #24]
 80014c0:	f640 0200 	movw	r2, #2048	; 0x800
 80014c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80014c8:	f04f 0101 	mov.w	r1, #1
 80014cc:	6191      	str	r1, [r2, #24]
 80014ce:	f240 0200 	movw	r2, #0
 80014d2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80014d6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80014da:	6191      	str	r1, [r2, #24]
 80014dc:	f240 0200 	movw	r2, #0
 80014e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80014e4:	f04f 0120 	mov.w	r1, #32
 80014e8:	6191      	str	r1, [r2, #24]
 80014ea:	f640 0200 	movw	r2, #2048	; 0x800
 80014ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80014f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80014f6:	6191      	str	r1, [r2, #24]
 80014f8:	f640 0200 	movw	r2, #2048	; 0x800
 80014fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001500:	f04f 0120 	mov.w	r1, #32
 8001504:	6191      	str	r1, [r2, #24]
 8001506:	4770      	bx	lr

08001508 <writeE>:
 8001508:	f640 0200 	movw	r2, #2048	; 0x800
 800150c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001510:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8001514:	6191      	str	r1, [r2, #24]
 8001516:	f240 0200 	movw	r2, #0
 800151a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800151e:	f04f 0101 	mov.w	r1, #1
 8001522:	6191      	str	r1, [r2, #24]
 8001524:	f640 0200 	movw	r2, #2048	; 0x800
 8001528:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800152c:	f04f 0108 	mov.w	r1, #8
 8001530:	6191      	str	r1, [r2, #24]
 8001532:	f240 0200 	movw	r2, #0
 8001536:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800153a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800153e:	6191      	str	r1, [r2, #24]
 8001540:	f240 0200 	movw	r2, #0
 8001544:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001548:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800154c:	6191      	str	r1, [r2, #24]
 800154e:	f640 0200 	movw	r2, #2048	; 0x800
 8001552:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001556:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800155a:	6191      	str	r1, [r2, #24]
 800155c:	f240 0200 	movw	r2, #0
 8001560:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001564:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001568:	6191      	str	r1, [r2, #24]
 800156a:	f240 0200 	movw	r2, #0
 800156e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001572:	f04f 0120 	mov.w	r1, #32
 8001576:	6191      	str	r1, [r2, #24]
 8001578:	f640 0200 	movw	r2, #2048	; 0x800
 800157c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001580:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001584:	6191      	str	r1, [r2, #24]
 8001586:	f640 0200 	movw	r2, #2048	; 0x800
 800158a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800158e:	f04f 0120 	mov.w	r1, #32
 8001592:	6191      	str	r1, [r2, #24]
 8001594:	4770      	bx	lr

08001596 <writeF>:
 8001596:	f640 0200 	movw	r2, #2048	; 0x800
 800159a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800159e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80015a2:	6191      	str	r1, [r2, #24]
 80015a4:	f240 0200 	movw	r2, #0
 80015a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015ac:	f04f 0101 	mov.w	r1, #1
 80015b0:	6191      	str	r1, [r2, #24]
 80015b2:	f640 0200 	movw	r2, #2048	; 0x800
 80015b6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015ba:	f04f 0108 	mov.w	r1, #8
 80015be:	6191      	str	r1, [r2, #24]
 80015c0:	f240 0200 	movw	r2, #0
 80015c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015c8:	f04f 0180 	mov.w	r1, #128	; 0x80
 80015cc:	6191      	str	r1, [r2, #24]
 80015ce:	f240 0200 	movw	r2, #0
 80015d2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015d6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80015da:	6191      	str	r1, [r2, #24]
 80015dc:	f640 0200 	movw	r2, #2048	; 0x800
 80015e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015e4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80015e8:	6191      	str	r1, [r2, #24]
 80015ea:	f240 0200 	movw	r2, #0
 80015ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015f2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80015f6:	6191      	str	r1, [r2, #24]
 80015f8:	f240 0200 	movw	r2, #0
 80015fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001600:	f04f 0120 	mov.w	r1, #32
 8001604:	6191      	str	r1, [r2, #24]
 8001606:	f640 0200 	movw	r2, #2048	; 0x800
 800160a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800160e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001612:	6191      	str	r1, [r2, #24]
 8001614:	f640 0200 	movw	r2, #2048	; 0x800
 8001618:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800161c:	f04f 0120 	mov.w	r1, #32
 8001620:	6191      	str	r1, [r2, #24]
 8001622:	4770      	bx	lr

08001624 <displayEnab>:
 8001624:	f000 0007 	and.w	r0, r0, #7
 8001628:	ea4f 0080 	mov.w	r0, r0, lsl #2
 800162c:	a201      	add	r2, pc, #4	; (adr r2, 8001634 <displayEnab_dispatch_table>)
 800162e:	f852 f000 	ldr.w	pc, [r2, r0]
 8001632:	bf00      	nop

08001634 <displayEnab_dispatch_table>:
 8001634:	08001655 	.word	0x08001655
 8001638:	080016e3 	.word	0x080016e3
 800163c:	08001771 	.word	0x08001771
 8001640:	080017ff 	.word	0x080017ff
 8001644:	0800188d 	.word	0x0800188d
 8001648:	0800191b 	.word	0x0800191b
 800164c:	080019a9 	.word	0x080019a9
 8001650:	08001a37 	.word	0x08001a37

08001654 <enab0>:
 8001654:	f240 0200 	movw	r2, #0
 8001658:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800165c:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001660:	6191      	str	r1, [r2, #24]
 8001662:	f240 0200 	movw	r2, #0
 8001666:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800166a:	f04f 0110 	mov.w	r1, #16
 800166e:	6191      	str	r1, [r2, #24]
 8001670:	f240 0200 	movw	r2, #0
 8001674:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001678:	f04f 0120 	mov.w	r1, #32
 800167c:	6191      	str	r1, [r2, #24]
 800167e:	f240 0200 	movw	r2, #0
 8001682:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001686:	f04f 0101 	mov.w	r1, #1
 800168a:	6191      	str	r1, [r2, #24]
 800168c:	f240 0200 	movw	r2, #0
 8001690:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001694:	f04f 0102 	mov.w	r1, #2
 8001698:	6191      	str	r1, [r2, #24]
 800169a:	f640 0200 	movw	r2, #2048	; 0x800
 800169e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016a2:	f04f 0108 	mov.w	r1, #8
 80016a6:	6191      	str	r1, [r2, #24]
 80016a8:	f640 0200 	movw	r2, #2048	; 0x800
 80016ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016b0:	f04f 0101 	mov.w	r1, #1
 80016b4:	6191      	str	r1, [r2, #24]
 80016b6:	f640 0200 	movw	r2, #2048	; 0x800
 80016ba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016be:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80016c2:	6191      	str	r1, [r2, #24]
 80016c4:	f640 0200 	movw	r2, #2048	; 0x800
 80016c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016cc:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80016d0:	6191      	str	r1, [r2, #24]
 80016d2:	f640 0200 	movw	r2, #2048	; 0x800
 80016d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016da:	f04f 0110 	mov.w	r1, #16
 80016de:	6191      	str	r1, [r2, #24]
 80016e0:	4770      	bx	lr

080016e2 <enab1>:
 80016e2:	f240 0200 	movw	r2, #0
 80016e6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016ea:	f04f 0180 	mov.w	r1, #128	; 0x80
 80016ee:	6191      	str	r1, [r2, #24]
 80016f0:	f240 0200 	movw	r2, #0
 80016f4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016f8:	f04f 0110 	mov.w	r1, #16
 80016fc:	6191      	str	r1, [r2, #24]
 80016fe:	f240 0200 	movw	r2, #0
 8001702:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001706:	f04f 0120 	mov.w	r1, #32
 800170a:	6191      	str	r1, [r2, #24]
 800170c:	f240 0200 	movw	r2, #0
 8001710:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001714:	f04f 0101 	mov.w	r1, #1
 8001718:	6191      	str	r1, [r2, #24]
 800171a:	f240 0200 	movw	r2, #0
 800171e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001722:	f04f 0102 	mov.w	r1, #2
 8001726:	6191      	str	r1, [r2, #24]
 8001728:	f640 0200 	movw	r2, #2048	; 0x800
 800172c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001730:	f04f 0108 	mov.w	r1, #8
 8001734:	6191      	str	r1, [r2, #24]
 8001736:	f640 0200 	movw	r2, #2048	; 0x800
 800173a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800173e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001742:	6191      	str	r1, [r2, #24]
 8001744:	f640 0200 	movw	r2, #2048	; 0x800
 8001748:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800174c:	f04f 0104 	mov.w	r1, #4
 8001750:	6191      	str	r1, [r2, #24]
 8001752:	f640 0200 	movw	r2, #2048	; 0x800
 8001756:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800175a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800175e:	6191      	str	r1, [r2, #24]
 8001760:	f640 0200 	movw	r2, #2048	; 0x800
 8001764:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001768:	f04f 0110 	mov.w	r1, #16
 800176c:	6191      	str	r1, [r2, #24]
 800176e:	4770      	bx	lr

08001770 <enab2>:
 8001770:	f240 0200 	movw	r2, #0
 8001774:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001778:	f04f 0180 	mov.w	r1, #128	; 0x80
 800177c:	6191      	str	r1, [r2, #24]
 800177e:	f240 0200 	movw	r2, #0
 8001782:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001786:	f04f 0110 	mov.w	r1, #16
 800178a:	6191      	str	r1, [r2, #24]
 800178c:	f240 0200 	movw	r2, #0
 8001790:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001794:	f04f 0120 	mov.w	r1, #32
 8001798:	6191      	str	r1, [r2, #24]
 800179a:	f240 0200 	movw	r2, #0
 800179e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017a2:	f04f 0101 	mov.w	r1, #1
 80017a6:	6191      	str	r1, [r2, #24]
 80017a8:	f240 0200 	movw	r2, #0
 80017ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017b0:	f04f 0102 	mov.w	r1, #2
 80017b4:	6191      	str	r1, [r2, #24]
 80017b6:	f640 0200 	movw	r2, #2048	; 0x800
 80017ba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017be:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80017c2:	6191      	str	r1, [r2, #24]
 80017c4:	f640 0200 	movw	r2, #2048	; 0x800
 80017c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017cc:	f04f 0101 	mov.w	r1, #1
 80017d0:	6191      	str	r1, [r2, #24]
 80017d2:	f640 0200 	movw	r2, #2048	; 0x800
 80017d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017da:	f04f 0104 	mov.w	r1, #4
 80017de:	6191      	str	r1, [r2, #24]
 80017e0:	f640 0200 	movw	r2, #2048	; 0x800
 80017e4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017e8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80017ec:	6191      	str	r1, [r2, #24]
 80017ee:	f640 0200 	movw	r2, #2048	; 0x800
 80017f2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017f6:	f04f 0110 	mov.w	r1, #16
 80017fa:	6191      	str	r1, [r2, #24]
 80017fc:	4770      	bx	lr

080017fe <enab3>:
 80017fe:	f240 0200 	movw	r2, #0
 8001802:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001806:	f04f 0180 	mov.w	r1, #128	; 0x80
 800180a:	6191      	str	r1, [r2, #24]
 800180c:	f240 0200 	movw	r2, #0
 8001810:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001814:	f04f 0110 	mov.w	r1, #16
 8001818:	6191      	str	r1, [r2, #24]
 800181a:	f240 0200 	movw	r2, #0
 800181e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001822:	f04f 0120 	mov.w	r1, #32
 8001826:	6191      	str	r1, [r2, #24]
 8001828:	f240 0200 	movw	r2, #0
 800182c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001830:	f04f 0101 	mov.w	r1, #1
 8001834:	6191      	str	r1, [r2, #24]
 8001836:	f240 0200 	movw	r2, #0
 800183a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800183e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001842:	6191      	str	r1, [r2, #24]
 8001844:	f640 0200 	movw	r2, #2048	; 0x800
 8001848:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800184c:	f04f 0108 	mov.w	r1, #8
 8001850:	6191      	str	r1, [r2, #24]
 8001852:	f640 0200 	movw	r2, #2048	; 0x800
 8001856:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800185a:	f04f 0101 	mov.w	r1, #1
 800185e:	6191      	str	r1, [r2, #24]
 8001860:	f640 0200 	movw	r2, #2048	; 0x800
 8001864:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001868:	f04f 0104 	mov.w	r1, #4
 800186c:	6191      	str	r1, [r2, #24]
 800186e:	f640 0200 	movw	r2, #2048	; 0x800
 8001872:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001876:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800187a:	6191      	str	r1, [r2, #24]
 800187c:	f640 0200 	movw	r2, #2048	; 0x800
 8001880:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001884:	f04f 0110 	mov.w	r1, #16
 8001888:	6191      	str	r1, [r2, #24]
 800188a:	4770      	bx	lr

0800188c <enab4>:
 800188c:	f240 0200 	movw	r2, #0
 8001890:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001894:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001898:	6191      	str	r1, [r2, #24]
 800189a:	f240 0200 	movw	r2, #0
 800189e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018a2:	f04f 0110 	mov.w	r1, #16
 80018a6:	6191      	str	r1, [r2, #24]
 80018a8:	f240 0200 	movw	r2, #0
 80018ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018b0:	f04f 0120 	mov.w	r1, #32
 80018b4:	6191      	str	r1, [r2, #24]
 80018b6:	f240 0200 	movw	r2, #0
 80018ba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018be:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80018c2:	6191      	str	r1, [r2, #24]
 80018c4:	f240 0200 	movw	r2, #0
 80018c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018cc:	f04f 0102 	mov.w	r1, #2
 80018d0:	6191      	str	r1, [r2, #24]
 80018d2:	f640 0200 	movw	r2, #2048	; 0x800
 80018d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018da:	f04f 0108 	mov.w	r1, #8
 80018de:	6191      	str	r1, [r2, #24]
 80018e0:	f640 0200 	movw	r2, #2048	; 0x800
 80018e4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018e8:	f04f 0101 	mov.w	r1, #1
 80018ec:	6191      	str	r1, [r2, #24]
 80018ee:	f640 0200 	movw	r2, #2048	; 0x800
 80018f2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018f6:	f04f 0104 	mov.w	r1, #4
 80018fa:	6191      	str	r1, [r2, #24]
 80018fc:	f640 0200 	movw	r2, #2048	; 0x800
 8001900:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001904:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8001908:	6191      	str	r1, [r2, #24]
 800190a:	f640 0200 	movw	r2, #2048	; 0x800
 800190e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001912:	f04f 0110 	mov.w	r1, #16
 8001916:	6191      	str	r1, [r2, #24]
 8001918:	4770      	bx	lr

0800191a <enab5>:
 800191a:	f240 0200 	movw	r2, #0
 800191e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001922:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001926:	6191      	str	r1, [r2, #24]
 8001928:	f240 0200 	movw	r2, #0
 800192c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001930:	f04f 0110 	mov.w	r1, #16
 8001934:	6191      	str	r1, [r2, #24]
 8001936:	f240 0200 	movw	r2, #0
 800193a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800193e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001942:	6191      	str	r1, [r2, #24]
 8001944:	f240 0200 	movw	r2, #0
 8001948:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800194c:	f04f 0101 	mov.w	r1, #1
 8001950:	6191      	str	r1, [r2, #24]
 8001952:	f240 0200 	movw	r2, #0
 8001956:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800195a:	f04f 0102 	mov.w	r1, #2
 800195e:	6191      	str	r1, [r2, #24]
 8001960:	f640 0200 	movw	r2, #2048	; 0x800
 8001964:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001968:	f04f 0108 	mov.w	r1, #8
 800196c:	6191      	str	r1, [r2, #24]
 800196e:	f640 0200 	movw	r2, #2048	; 0x800
 8001972:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001976:	f04f 0101 	mov.w	r1, #1
 800197a:	6191      	str	r1, [r2, #24]
 800197c:	f640 0200 	movw	r2, #2048	; 0x800
 8001980:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001984:	f04f 0104 	mov.w	r1, #4
 8001988:	6191      	str	r1, [r2, #24]
 800198a:	f640 0200 	movw	r2, #2048	; 0x800
 800198e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001992:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8001996:	6191      	str	r1, [r2, #24]
 8001998:	f640 0200 	movw	r2, #2048	; 0x800
 800199c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019a0:	f04f 0110 	mov.w	r1, #16
 80019a4:	6191      	str	r1, [r2, #24]
 80019a6:	4770      	bx	lr

080019a8 <enab6>:
 80019a8:	f240 0200 	movw	r2, #0
 80019ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019b0:	f04f 0180 	mov.w	r1, #128	; 0x80
 80019b4:	6191      	str	r1, [r2, #24]
 80019b6:	f240 0200 	movw	r2, #0
 80019ba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019be:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80019c2:	6191      	str	r1, [r2, #24]
 80019c4:	f240 0200 	movw	r2, #0
 80019c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019cc:	f04f 0120 	mov.w	r1, #32
 80019d0:	6191      	str	r1, [r2, #24]
 80019d2:	f240 0200 	movw	r2, #0
 80019d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019da:	f04f 0101 	mov.w	r1, #1
 80019de:	6191      	str	r1, [r2, #24]
 80019e0:	f240 0200 	movw	r2, #0
 80019e4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019e8:	f04f 0102 	mov.w	r1, #2
 80019ec:	6191      	str	r1, [r2, #24]
 80019ee:	f640 0200 	movw	r2, #2048	; 0x800
 80019f2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019f6:	f04f 0108 	mov.w	r1, #8
 80019fa:	6191      	str	r1, [r2, #24]
 80019fc:	f640 0200 	movw	r2, #2048	; 0x800
 8001a00:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a04:	f04f 0101 	mov.w	r1, #1
 8001a08:	6191      	str	r1, [r2, #24]
 8001a0a:	f640 0200 	movw	r2, #2048	; 0x800
 8001a0e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a12:	f04f 0104 	mov.w	r1, #4
 8001a16:	6191      	str	r1, [r2, #24]
 8001a18:	f640 0200 	movw	r2, #2048	; 0x800
 8001a1c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a20:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8001a24:	6191      	str	r1, [r2, #24]
 8001a26:	f640 0200 	movw	r2, #2048	; 0x800
 8001a2a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a2e:	f04f 0110 	mov.w	r1, #16
 8001a32:	6191      	str	r1, [r2, #24]
 8001a34:	4770      	bx	lr

08001a36 <enab7>:
 8001a36:	f240 0200 	movw	r2, #0
 8001a3a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a3e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8001a42:	6191      	str	r1, [r2, #24]
 8001a44:	f240 0200 	movw	r2, #0
 8001a48:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a4c:	f04f 0110 	mov.w	r1, #16
 8001a50:	6191      	str	r1, [r2, #24]
 8001a52:	f240 0200 	movw	r2, #0
 8001a56:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a5a:	f04f 0120 	mov.w	r1, #32
 8001a5e:	6191      	str	r1, [r2, #24]
 8001a60:	f240 0200 	movw	r2, #0
 8001a64:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a68:	f04f 0101 	mov.w	r1, #1
 8001a6c:	6191      	str	r1, [r2, #24]
 8001a6e:	f240 0200 	movw	r2, #0
 8001a72:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a76:	f04f 0102 	mov.w	r1, #2
 8001a7a:	6191      	str	r1, [r2, #24]
 8001a7c:	f640 0200 	movw	r2, #2048	; 0x800
 8001a80:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a84:	f04f 0108 	mov.w	r1, #8
 8001a88:	6191      	str	r1, [r2, #24]
 8001a8a:	f640 0200 	movw	r2, #2048	; 0x800
 8001a8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a92:	f04f 0101 	mov.w	r1, #1
 8001a96:	6191      	str	r1, [r2, #24]
 8001a98:	f640 0200 	movw	r2, #2048	; 0x800
 8001a9c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001aa0:	f04f 0104 	mov.w	r1, #4
 8001aa4:	6191      	str	r1, [r2, #24]
 8001aa6:	f640 0200 	movw	r2, #2048	; 0x800
 8001aaa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001aae:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8001ab2:	6191      	str	r1, [r2, #24]
 8001ab4:	f640 0200 	movw	r2, #2048	; 0x800
 8001ab8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001abc:	f04f 0110 	mov.w	r1, #16
 8001ac0:	6191      	str	r1, [r2, #24]
 8001ac2:	4770      	bx	lr

08001ac4 <getSWITCH>:
 8001ac4:	f000 000f 	and.w	r0, r0, #15
 8001ac8:	ea4f 0080 	mov.w	r0, r0, lsl #2
 8001acc:	a201      	add	r2, pc, #4	; (adr r2, 8001ad4 <getSWITCH_dispatch_table>)
 8001ace:	f852 f000 	ldr.w	pc, [r2, r0]
 8001ad2:	bf00      	nop

08001ad4 <getSWITCH_dispatch_table>:
 8001ad4:	08001b15 	.word	0x08001b15
 8001ad8:	08001b1b 	.word	0x08001b1b
 8001adc:	08001b4b 	.word	0x08001b4b
 8001ae0:	08001b7b 	.word	0x08001b7b
 8001ae4:	08001bab 	.word	0x08001bab
 8001ae8:	08001bdb 	.word	0x08001bdb
 8001aec:	08001c0b 	.word	0x08001c0b
 8001af0:	08001c3b 	.word	0x08001c3b
 8001af4:	08001c6b 	.word	0x08001c6b
 8001af8:	08001c9b 	.word	0x08001c9b
 8001afc:	08001ccb 	.word	0x08001ccb
 8001b00:	08001cfb 	.word	0x08001cfb
 8001b04:	08001d2b 	.word	0x08001d2b
 8001b08:	08001b15 	.word	0x08001b15
 8001b0c:	08001b15 	.word	0x08001b15
 8001b10:	08001b15 	.word	0x08001b15

08001b14 <read_dummysw>:
 8001b14:	f04f 0001 	mov.w	r0, #1
 8001b18:	4770      	bx	lr

08001b1a <read_sw1>:
 8001b1a:	f240 4200 	movw	r2, #1024	; 0x400
 8001b1e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b22:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b26:	6191      	str	r1, [r2, #24]
 8001b28:	f240 4200 	movw	r2, #1024	; 0x400
 8001b2c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b30:	6910      	ldr	r0, [r2, #16]
 8001b32:	f010 0001 	ands.w	r0, r0, #1
 8001b36:	ea4f 0000 	mov.w	r0, r0
 8001b3a:	f240 4200 	movw	r2, #1024	; 0x400
 8001b3e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b46:	6191      	str	r1, [r2, #24]
 8001b48:	4770      	bx	lr

08001b4a <read_sw2>:
 8001b4a:	f240 4200 	movw	r2, #1024	; 0x400
 8001b4e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b52:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b56:	6191      	str	r1, [r2, #24]
 8001b58:	f640 4200 	movw	r2, #3072	; 0xc00
 8001b5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b60:	6910      	ldr	r0, [r2, #16]
 8001b62:	f010 0004 	ands.w	r0, r0, #4
 8001b66:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8001b6a:	f240 4200 	movw	r2, #1024	; 0x400
 8001b6e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b76:	6191      	str	r1, [r2, #24]
 8001b78:	4770      	bx	lr

08001b7a <read_sw3>:
 8001b7a:	f240 4200 	movw	r2, #1024	; 0x400
 8001b7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b82:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b86:	6191      	str	r1, [r2, #24]
 8001b88:	f240 4200 	movw	r2, #1024	; 0x400
 8001b8c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b90:	6910      	ldr	r0, [r2, #16]
 8001b92:	f010 0002 	ands.w	r0, r0, #2
 8001b96:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8001b9a:	f240 4200 	movw	r2, #1024	; 0x400
 8001b9e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ba2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ba6:	6191      	str	r1, [r2, #24]
 8001ba8:	4770      	bx	lr

08001baa <read_sw4>:
 8001baa:	f240 4200 	movw	r2, #1024	; 0x400
 8001bae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001bb2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bb6:	6191      	str	r1, [r2, #24]
 8001bb8:	f240 4200 	movw	r2, #1024	; 0x400
 8001bbc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001bc0:	6910      	ldr	r0, [r2, #16]
 8001bc2:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8001bc6:	ea4f 1090 	mov.w	r0, r0, lsr #6
 8001bca:	f240 4200 	movw	r2, #1024	; 0x400
 8001bce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001bd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bd6:	6191      	str	r1, [r2, #24]
 8001bd8:	4770      	bx	lr

08001bda <read_sw5>:
 8001bda:	f640 0200 	movw	r2, #2048	; 0x800
 8001bde:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001be2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001be6:	6191      	str	r1, [r2, #24]
 8001be8:	f240 4200 	movw	r2, #1024	; 0x400
 8001bec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001bf0:	6910      	ldr	r0, [r2, #16]
 8001bf2:	f010 0001 	ands.w	r0, r0, #1
 8001bf6:	ea4f 0000 	mov.w	r0, r0
 8001bfa:	f640 0200 	movw	r2, #2048	; 0x800
 8001bfe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c06:	6191      	str	r1, [r2, #24]
 8001c08:	4770      	bx	lr

08001c0a <read_sw6>:
 8001c0a:	f640 0200 	movw	r2, #2048	; 0x800
 8001c0e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c12:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001c16:	6191      	str	r1, [r2, #24]
 8001c18:	f640 4200 	movw	r2, #3072	; 0xc00
 8001c1c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c20:	6910      	ldr	r0, [r2, #16]
 8001c22:	f010 0004 	ands.w	r0, r0, #4
 8001c26:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8001c2a:	f640 0200 	movw	r2, #2048	; 0x800
 8001c2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c36:	6191      	str	r1, [r2, #24]
 8001c38:	4770      	bx	lr

08001c3a <read_sw7>:
 8001c3a:	f640 0200 	movw	r2, #2048	; 0x800
 8001c3e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c42:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001c46:	6191      	str	r1, [r2, #24]
 8001c48:	f240 4200 	movw	r2, #1024	; 0x400
 8001c4c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c50:	6910      	ldr	r0, [r2, #16]
 8001c52:	f010 0002 	ands.w	r0, r0, #2
 8001c56:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8001c5a:	f640 0200 	movw	r2, #2048	; 0x800
 8001c5e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c66:	6191      	str	r1, [r2, #24]
 8001c68:	4770      	bx	lr

08001c6a <read_sw8>:
 8001c6a:	f640 0200 	movw	r2, #2048	; 0x800
 8001c6e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c72:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001c76:	6191      	str	r1, [r2, #24]
 8001c78:	f240 4200 	movw	r2, #1024	; 0x400
 8001c7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c80:	6910      	ldr	r0, [r2, #16]
 8001c82:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8001c86:	ea4f 1090 	mov.w	r0, r0, lsr #6
 8001c8a:	f640 0200 	movw	r2, #2048	; 0x800
 8001c8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c96:	6191      	str	r1, [r2, #24]
 8001c98:	4770      	bx	lr

08001c9a <read_sw9>:
 8001c9a:	f640 0200 	movw	r2, #2048	; 0x800
 8001c9e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ca2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001ca6:	6191      	str	r1, [r2, #24]
 8001ca8:	f240 4200 	movw	r2, #1024	; 0x400
 8001cac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001cb0:	6910      	ldr	r0, [r2, #16]
 8001cb2:	f010 0001 	ands.w	r0, r0, #1
 8001cb6:	ea4f 0000 	mov.w	r0, r0
 8001cba:	f640 0200 	movw	r2, #2048	; 0x800
 8001cbe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001cc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cc6:	6191      	str	r1, [r2, #24]
 8001cc8:	4770      	bx	lr

08001cca <read_sw10>:
 8001cca:	f640 0200 	movw	r2, #2048	; 0x800
 8001cce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001cd2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001cd6:	6191      	str	r1, [r2, #24]
 8001cd8:	f640 4200 	movw	r2, #3072	; 0xc00
 8001cdc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ce0:	6910      	ldr	r0, [r2, #16]
 8001ce2:	f010 0004 	ands.w	r0, r0, #4
 8001ce6:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8001cea:	f640 0200 	movw	r2, #2048	; 0x800
 8001cee:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001cf2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cf6:	6191      	str	r1, [r2, #24]
 8001cf8:	4770      	bx	lr

08001cfa <read_sw11>:
 8001cfa:	f640 0200 	movw	r2, #2048	; 0x800
 8001cfe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d02:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001d06:	6191      	str	r1, [r2, #24]
 8001d08:	f240 4200 	movw	r2, #1024	; 0x400
 8001d0c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d10:	6910      	ldr	r0, [r2, #16]
 8001d12:	f010 0002 	ands.w	r0, r0, #2
 8001d16:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8001d1a:	f640 0200 	movw	r2, #2048	; 0x800
 8001d1e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d26:	6191      	str	r1, [r2, #24]
 8001d28:	4770      	bx	lr

08001d2a <read_sw12>:
 8001d2a:	f640 0200 	movw	r2, #2048	; 0x800
 8001d2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d32:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001d36:	6191      	str	r1, [r2, #24]
 8001d38:	f240 4200 	movw	r2, #1024	; 0x400
 8001d3c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d40:	6910      	ldr	r0, [r2, #16]
 8001d42:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8001d46:	ea4f 1090 	mov.w	r0, r0, lsr #6
 8001d4a:	f640 0200 	movw	r2, #2048	; 0x800
 8001d4e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d56:	6191      	str	r1, [r2, #24]
 8001d58:	4770      	bx	lr

08001d5a <enabDIGIT_1>:
 8001d5a:	f240 0200 	movw	r2, #0
 8001d5e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d62:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001d66:	6191      	str	r1, [r2, #24]
 8001d68:	f240 0200 	movw	r2, #0
 8001d6c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d70:	f04f 0110 	mov.w	r1, #16
 8001d74:	6191      	str	r1, [r2, #24]
 8001d76:	f240 0200 	movw	r2, #0
 8001d7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d7e:	f04f 0120 	mov.w	r1, #32
 8001d82:	6191      	str	r1, [r2, #24]
 8001d84:	f240 0200 	movw	r2, #0
 8001d88:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d8c:	f04f 0101 	mov.w	r1, #1
 8001d90:	6191      	str	r1, [r2, #24]
 8001d92:	f240 0200 	movw	r2, #0
 8001d96:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d9a:	f04f 0102 	mov.w	r1, #2
 8001d9e:	6191      	str	r1, [r2, #24]
 8001da0:	f640 0200 	movw	r2, #2048	; 0x800
 8001da4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001da8:	f04f 0108 	mov.w	r1, #8
 8001dac:	6191      	str	r1, [r2, #24]
 8001dae:	f640 0200 	movw	r2, #2048	; 0x800
 8001db2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001db6:	f04f 0101 	mov.w	r1, #1
 8001dba:	6191      	str	r1, [r2, #24]
 8001dbc:	f640 0200 	movw	r2, #2048	; 0x800
 8001dc0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001dc4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8001dc8:	6191      	str	r1, [r2, #24]
 8001dca:	f640 0200 	movw	r2, #2048	; 0x800
 8001dce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001dd2:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8001dd6:	6191      	str	r1, [r2, #24]
 8001dd8:	f640 0200 	movw	r2, #2048	; 0x800
 8001ddc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001de0:	f04f 0110 	mov.w	r1, #16
 8001de4:	6191      	str	r1, [r2, #24]
 8001de6:	4770      	bx	lr

08001de8 <DISPLAY_on>:
 8001de8:	f240 0200 	movw	r2, #0
 8001dec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001df0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001df4:	6191      	str	r1, [r2, #24]
 8001df6:	f640 0200 	movw	r2, #2048	; 0x800
 8001dfa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001dfe:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001e02:	6191      	str	r1, [r2, #24]
 8001e04:	4770      	bx	lr

08001e06 <DISPLAY_off>:
 8001e06:	f240 0200 	movw	r2, #0
 8001e0a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e0e:	f04f 0140 	mov.w	r1, #64	; 0x40
 8001e12:	6191      	str	r1, [r2, #24]
 8001e14:	f640 0200 	movw	r2, #2048	; 0x800
 8001e18:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e1c:	f04f 0102 	mov.w	r1, #2
 8001e20:	6191      	str	r1, [r2, #24]
 8001e22:	4770      	bx	lr

08001e24 <ST_LED_init>:
 8001e24:	f643 0230 	movw	r2, #14384	; 0x3830
 8001e28:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e2c:	6811      	ldr	r1, [r2, #0]
 8001e2e:	f041 0108 	orr.w	r1, r1, #8
 8001e32:	6011      	str	r1, [r2, #0]
 8001e34:	f640 4200 	movw	r2, #3072	; 0xc00
 8001e38:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e3c:	6811      	ldr	r1, [r2, #0]
 8001e3e:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 8001e42:	6011      	str	r1, [r2, #0]
 8001e44:	6811      	ldr	r1, [r2, #0]
 8001e46:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8001e4a:	6011      	str	r1, [r2, #0]
 8001e4c:	6851      	ldr	r1, [r2, #4]
 8001e4e:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8001e52:	6051      	str	r1, [r2, #4]
 8001e54:	6891      	ldr	r1, [r2, #8]
 8001e56:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 8001e5a:	6091      	str	r1, [r2, #8]
 8001e5c:	6891      	ldr	r1, [r2, #8]
 8001e5e:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001e62:	6091      	str	r1, [r2, #8]
 8001e64:	68d1      	ldr	r1, [r2, #12]
 8001e66:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 8001e6a:	60d1      	str	r1, [r2, #12]
 8001e6c:	68d1      	ldr	r1, [r2, #12]
 8001e6e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8001e72:	60d1      	str	r1, [r2, #12]
 8001e74:	f640 4200 	movw	r2, #3072	; 0xc00
 8001e78:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e7c:	6811      	ldr	r1, [r2, #0]
 8001e7e:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8001e82:	6011      	str	r1, [r2, #0]
 8001e84:	6811      	ldr	r1, [r2, #0]
 8001e86:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8001e8a:	6011      	str	r1, [r2, #0]
 8001e8c:	6851      	ldr	r1, [r2, #4]
 8001e8e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8001e92:	6051      	str	r1, [r2, #4]
 8001e94:	6891      	ldr	r1, [r2, #8]
 8001e96:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8001e9a:	6091      	str	r1, [r2, #8]
 8001e9c:	6891      	ldr	r1, [r2, #8]
 8001e9e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8001ea2:	6091      	str	r1, [r2, #8]
 8001ea4:	68d1      	ldr	r1, [r2, #12]
 8001ea6:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8001eaa:	60d1      	str	r1, [r2, #12]
 8001eac:	68d1      	ldr	r1, [r2, #12]
 8001eae:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8001eb2:	60d1      	str	r1, [r2, #12]
 8001eb4:	f640 4200 	movw	r2, #3072	; 0xc00
 8001eb8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ebc:	6811      	ldr	r1, [r2, #0]
 8001ebe:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8001ec2:	6011      	str	r1, [r2, #0]
 8001ec4:	6811      	ldr	r1, [r2, #0]
 8001ec6:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8001eca:	6011      	str	r1, [r2, #0]
 8001ecc:	6851      	ldr	r1, [r2, #4]
 8001ece:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8001ed2:	6051      	str	r1, [r2, #4]
 8001ed4:	6891      	ldr	r1, [r2, #8]
 8001ed6:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8001eda:	6091      	str	r1, [r2, #8]
 8001edc:	6891      	ldr	r1, [r2, #8]
 8001ede:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8001ee2:	6091      	str	r1, [r2, #8]
 8001ee4:	68d1      	ldr	r1, [r2, #12]
 8001ee6:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8001eea:	60d1      	str	r1, [r2, #12]
 8001eec:	68d1      	ldr	r1, [r2, #12]
 8001eee:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8001ef2:	60d1      	str	r1, [r2, #12]
 8001ef4:	f640 4200 	movw	r2, #3072	; 0xc00
 8001ef8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001efc:	6811      	ldr	r1, [r2, #0]
 8001efe:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8001f02:	6011      	str	r1, [r2, #0]
 8001f04:	6811      	ldr	r1, [r2, #0]
 8001f06:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001f0a:	6011      	str	r1, [r2, #0]
 8001f0c:	6851      	ldr	r1, [r2, #4]
 8001f0e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001f12:	6051      	str	r1, [r2, #4]
 8001f14:	6891      	ldr	r1, [r2, #8]
 8001f16:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8001f1a:	6091      	str	r1, [r2, #8]
 8001f1c:	6891      	ldr	r1, [r2, #8]
 8001f1e:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8001f22:	6091      	str	r1, [r2, #8]
 8001f24:	68d1      	ldr	r1, [r2, #12]
 8001f26:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8001f2a:	60d1      	str	r1, [r2, #12]
 8001f2c:	68d1      	ldr	r1, [r2, #12]
 8001f2e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001f32:	60d1      	str	r1, [r2, #12]
 8001f34:	f640 4200 	movw	r2, #3072	; 0xc00
 8001f38:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001f3c:	6811      	ldr	r1, [r2, #0]
 8001f3e:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8001f42:	6011      	str	r1, [r2, #0]
 8001f44:	6811      	ldr	r1, [r2, #0]
 8001f46:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8001f4a:	6011      	str	r1, [r2, #0]
 8001f4c:	6851      	ldr	r1, [r2, #4]
 8001f4e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8001f52:	6051      	str	r1, [r2, #4]
 8001f54:	6891      	ldr	r1, [r2, #8]
 8001f56:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8001f5a:	6091      	str	r1, [r2, #8]
 8001f5c:	6891      	ldr	r1, [r2, #8]
 8001f5e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8001f62:	6091      	str	r1, [r2, #8]
 8001f64:	68d1      	ldr	r1, [r2, #12]
 8001f66:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8001f6a:	60d1      	str	r1, [r2, #12]
 8001f6c:	68d1      	ldr	r1, [r2, #12]
 8001f6e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8001f72:	60d1      	str	r1, [r2, #12]
 8001f74:	4770      	bx	lr

08001f76 <ST_BTN_init>:
 8001f76:	f643 0230 	movw	r2, #14384	; 0x3830
 8001f7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001f7e:	6811      	ldr	r1, [r2, #0]
 8001f80:	f041 0101 	orr.w	r1, r1, #1
 8001f84:	6011      	str	r1, [r2, #0]
 8001f86:	f240 0200 	movw	r2, #0
 8001f8a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001f8e:	6811      	ldr	r1, [r2, #0]
 8001f90:	f021 0103 	bic.w	r1, r1, #3
 8001f94:	6011      	str	r1, [r2, #0]
 8001f96:	6891      	ldr	r1, [r2, #8]
 8001f98:	f021 0103 	bic.w	r1, r1, #3
 8001f9c:	6091      	str	r1, [r2, #8]
 8001f9e:	6891      	ldr	r1, [r2, #8]
 8001fa0:	f041 0102 	orr.w	r1, r1, #2
 8001fa4:	6091      	str	r1, [r2, #8]
 8001fa6:	68d1      	ldr	r1, [r2, #12]
 8001fa8:	f021 0103 	bic.w	r1, r1, #3
 8001fac:	60d1      	str	r1, [r2, #12]
 8001fae:	4770      	bx	lr

08001fb0 <ST_LED0_On>:
 8001fb0:	f640 4200 	movw	r2, #3072	; 0xc00
 8001fb4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001fb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fbc:	6191      	str	r1, [r2, #24]
 8001fbe:	4770      	bx	lr

08001fc0 <ST_LED1_On>:
 8001fc0:	f640 4200 	movw	r2, #3072	; 0xc00
 8001fc4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001fc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fcc:	6191      	str	r1, [r2, #24]
 8001fce:	4770      	bx	lr

08001fd0 <ST_LED2_On>:
 8001fd0:	f640 4200 	movw	r2, #3072	; 0xc00
 8001fd4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001fd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fdc:	6191      	str	r1, [r2, #24]
 8001fde:	4770      	bx	lr

08001fe0 <ST_LED3_On>:
 8001fe0:	f640 4200 	movw	r2, #3072	; 0xc00
 8001fe4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001fe8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fec:	6191      	str	r1, [r2, #24]
 8001fee:	4770      	bx	lr

08001ff0 <ST_LED0_Off>:
 8001ff0:	f640 4200 	movw	r2, #3072	; 0xc00
 8001ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ff8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8001ffc:	6191      	str	r1, [r2, #24]
 8001ffe:	4770      	bx	lr

08002000 <ST_LED1_Off>:
 8002000:	f640 4200 	movw	r2, #3072	; 0xc00
 8002004:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002008:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 800200c:	6191      	str	r1, [r2, #24]
 800200e:	4770      	bx	lr

08002010 <ST_LED2_Off>:
 8002010:	f640 4200 	movw	r2, #3072	; 0xc00
 8002014:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002018:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800201c:	6191      	str	r1, [r2, #24]
 800201e:	4770      	bx	lr

08002020 <ST_LED3_Off>:
 8002020:	f640 4200 	movw	r2, #3072	; 0xc00
 8002024:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002028:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800202c:	6191      	str	r1, [r2, #24]
 800202e:	4770      	bx	lr

08002030 <ST_BTN_Get>:
 8002030:	f240 0200 	movw	r2, #0
 8002034:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002038:	6910      	ldr	r0, [r2, #16]
 800203a:	f010 0001 	ands.w	r0, r0, #1
 800203e:	ea4f 0000 	mov.w	r0, r0
 8002042:	4770      	bx	lr

08002044 <testmacro>:
 8002044:	f241 20af 	movw	r0, #4783	; 0x12af
 8002048:	f6ca 30cd 	movt	r0, #43981	; 0xabcd
 800204c:	f245 6078 	movw	r0, #22136	; 0x5678
 8002050:	f2c1 2034 	movt	r0, #4660	; 0x1234
 8002054:	f240 0000 	movw	r0, #0
 8002058:	f2c0 0000 	movt	r0, #0
 800205c:	f040 0078 	orr.w	r0, r0, #120	; 0x78
 8002060:	f440 40ac 	orr.w	r0, r0, #22016	; 0x5600
 8002064:	f440 1050 	orr.w	r0, r0, #3407872	; 0x340000
 8002068:	f040 5090 	orr.w	r0, r0, #301989888	; 0x12000000
 800206c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002070:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 8002074:	f020 0078 	bic.w	r0, r0, #120	; 0x78
 8002078:	f420 40ac 	bic.w	r0, r0, #22016	; 0x5600
 800207c:	f420 1050 	bic.w	r0, r0, #3407872	; 0x340000
 8002080:	f020 5090 	bic.w	r0, r0, #301989888	; 0x12000000
 8002084:	f040 0000 	orr.w	r0, r0, #0
 8002088:	f040 0000 	orr.w	r0, r0, #0
 800208c:	f040 0000 	orr.w	r0, r0, #0
 8002090:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8002094:	f020 0000 	bic.w	r0, r0, #0
 8002098:	f020 0000 	bic.w	r0, r0, #0
 800209c:	f020 0000 	bic.w	r0, r0, #0
 80020a0:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 80020a4:	4770      	bx	lr

080020a6 <asmLED_init>:
 80020a6:	f643 0230 	movw	r2, #14384	; 0x3830
 80020aa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80020ae:	6811      	ldr	r1, [r2, #0]
 80020b0:	f041 0108 	orr.w	r1, r1, #8
 80020b4:	6011      	str	r1, [r2, #0]
 80020b6:	f640 4200 	movw	r2, #3072	; 0xc00
 80020ba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80020be:	6811      	ldr	r1, [r2, #0]
 80020c0:	f021 0100 	bic.w	r1, r1, #0
 80020c4:	f021 0100 	bic.w	r1, r1, #0
 80020c8:	f021 0100 	bic.w	r1, r1, #0
 80020cc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80020d0:	6011      	str	r1, [r2, #0]
 80020d2:	f640 4200 	movw	r2, #3072	; 0xc00
 80020d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80020da:	6811      	ldr	r1, [r2, #0]
 80020dc:	f041 0100 	orr.w	r1, r1, #0
 80020e0:	f041 0100 	orr.w	r1, r1, #0
 80020e4:	f041 0100 	orr.w	r1, r1, #0
 80020e8:	f041 41aa 	orr.w	r1, r1, #1426063360	; 0x55000000
 80020ec:	6011      	str	r1, [r2, #0]
 80020ee:	f640 4204 	movw	r2, #3076	; 0xc04
 80020f2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80020f6:	6811      	ldr	r1, [r2, #0]
 80020f8:	f021 0100 	bic.w	r1, r1, #0
 80020fc:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
 8002100:	f021 0100 	bic.w	r1, r1, #0
 8002104:	f021 0100 	bic.w	r1, r1, #0
 8002108:	6011      	str	r1, [r2, #0]
 800210a:	f640 4208 	movw	r2, #3080	; 0xc08
 800210e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002112:	6811      	ldr	r1, [r2, #0]
 8002114:	f021 0100 	bic.w	r1, r1, #0
 8002118:	f021 0100 	bic.w	r1, r1, #0
 800211c:	f021 0100 	bic.w	r1, r1, #0
 8002120:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8002124:	6011      	str	r1, [r2, #0]
 8002126:	f640 4208 	movw	r2, #3080	; 0xc08
 800212a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800212e:	6811      	ldr	r1, [r2, #0]
 8002130:	f041 0100 	orr.w	r1, r1, #0
 8002134:	f041 0100 	orr.w	r1, r1, #0
 8002138:	f041 0100 	orr.w	r1, r1, #0
 800213c:	f041 412a 	orr.w	r1, r1, #2852126720	; 0xaa000000
 8002140:	6011      	str	r1, [r2, #0]
 8002142:	f640 420c 	movw	r2, #3084	; 0xc0c
 8002146:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800214a:	6811      	ldr	r1, [r2, #0]
 800214c:	f021 0100 	bic.w	r1, r1, #0
 8002150:	f021 0100 	bic.w	r1, r1, #0
 8002154:	f021 0100 	bic.w	r1, r1, #0
 8002158:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800215c:	6011      	str	r1, [r2, #0]
 800215e:	f640 420c 	movw	r2, #3084	; 0xc0c
 8002162:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002166:	6811      	ldr	r1, [r2, #0]
 8002168:	f041 0100 	orr.w	r1, r1, #0
 800216c:	f041 0100 	orr.w	r1, r1, #0
 8002170:	f041 0100 	orr.w	r1, r1, #0
 8002174:	f041 41aa 	orr.w	r1, r1, #1426063360	; 0x55000000
 8002178:	6011      	str	r1, [r2, #0]
 800217a:	4770      	bx	lr

0800217c <asmBTN_init>:
 800217c:	f643 0230 	movw	r2, #14384	; 0x3830
 8002180:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002184:	6811      	ldr	r1, [r2, #0]
 8002186:	f041 0101 	orr.w	r1, r1, #1
 800218a:	6011      	str	r1, [r2, #0]
 800218c:	f240 0200 	movw	r2, #0
 8002190:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002194:	6811      	ldr	r1, [r2, #0]
 8002196:	f021 0103 	bic.w	r1, r1, #3
 800219a:	f021 0100 	bic.w	r1, r1, #0
 800219e:	f021 0100 	bic.w	r1, r1, #0
 80021a2:	f021 0100 	bic.w	r1, r1, #0
 80021a6:	6011      	str	r1, [r2, #0]
 80021a8:	f240 0208 	movw	r2, #8
 80021ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80021b0:	6811      	ldr	r1, [r2, #0]
 80021b2:	f021 0103 	bic.w	r1, r1, #3
 80021b6:	f021 0100 	bic.w	r1, r1, #0
 80021ba:	f021 0100 	bic.w	r1, r1, #0
 80021be:	f021 0100 	bic.w	r1, r1, #0
 80021c2:	6011      	str	r1, [r2, #0]
 80021c4:	f240 0208 	movw	r2, #8
 80021c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80021cc:	6811      	ldr	r1, [r2, #0]
 80021ce:	f041 0102 	orr.w	r1, r1, #2
 80021d2:	f041 0100 	orr.w	r1, r1, #0
 80021d6:	f041 0100 	orr.w	r1, r1, #0
 80021da:	f041 0100 	orr.w	r1, r1, #0
 80021de:	6011      	str	r1, [r2, #0]
 80021e0:	f240 020c 	movw	r2, #12
 80021e4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80021e8:	6811      	ldr	r1, [r2, #0]
 80021ea:	f021 0103 	bic.w	r1, r1, #3
 80021ee:	f021 0100 	bic.w	r1, r1, #0
 80021f2:	f021 0100 	bic.w	r1, r1, #0
 80021f6:	f021 0100 	bic.w	r1, r1, #0
 80021fa:	6011      	str	r1, [r2, #0]
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop

08002200 <SystemCoreClockUpdate>:
#define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysTick CALIB: TENMS Mask */

/*@} end of group CMSIS_SysTick */

void SystemCoreClockUpdate(void)
{
 8002200:	b480      	push	{r7}
 8002202:	b087      	sub	sp, #28
 8002204:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	f04f 0300 	mov.w	r3, #0
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	f04f 0302 	mov.w	r3, #2
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	f04f 0302 	mov.w	r3, #2
 8002222:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS; //!!in simulator says "*** error 65: access violation at 0x40023808 : no 'read' permission"
 8002224:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002228:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	2b04      	cmp	r3, #4
 8002238:	d00d      	beq.n	8002256 <SystemCoreClockUpdate+0x56>
 800223a:	2b08      	cmp	r3, #8
 800223c:	d015      	beq.n	800226a <SystemCoreClockUpdate+0x6a>
 800223e:	2b00      	cmp	r3, #0
 8002240:	d169      	bne.n	8002316 <SystemCoreClockUpdate+0x116>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002242:	f240 0340 	movw	r3, #64	; 0x40
 8002246:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800224a:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 800224e:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8002252:	601a      	str	r2, [r3, #0]
      break;
 8002254:	e069      	b.n	800232a <SystemCoreClockUpdate+0x12a>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002256:	f240 0340 	movw	r3, #64	; 0x40
 800225a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800225e:	f647 0240 	movw	r2, #30784	; 0x7840
 8002262:	f2c0 127d 	movt	r2, #381	; 0x17d
 8002266:	601a      	str	r2, [r3, #0]
      break;
 8002268:	e05f      	b.n	800232a <SystemCoreClockUpdate+0x12a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800226a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800226e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002278:	ea4f 5393 	mov.w	r3, r3, lsr #22
 800227c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800227e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002282:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800228c:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d014      	beq.n	80022be <SystemCoreClockUpdate+0xbe>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002294:	f647 0340 	movw	r3, #30784	; 0x7840
 8002298:	f2c0 137d 	movt	r3, #381	; 0x17d
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	fbb3 f2f2 	udiv	r2, r3, r2
 80022a2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80022a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022aa:	6859      	ldr	r1, [r3, #4]
 80022ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022b0:	400b      	ands	r3, r1
 80022b2:	ea4f 1393 	mov.w	r3, r3, lsr #6
 80022b6:	fb03 f302 	mul.w	r3, r3, r2
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	e013      	b.n	80022e6 <SystemCoreClockUpdate+0xe6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80022be:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80022c2:	f2c0 03f4 	movt	r3, #244	; 0xf4
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80022cc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80022d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022d4:	6859      	ldr	r1, [r3, #4]
 80022d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022da:	400b      	ands	r3, r1
 80022dc:	ea4f 1393 	mov.w	r3, r3, lsr #6
 80022e0:	fb03 f302 	mul.w	r3, r3, r2
 80022e4:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80022e6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80022ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022f4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80022f8:	f103 0301 	add.w	r3, r3, #1
 80022fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002300:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	fbb2 f2f3 	udiv	r2, r2, r3
 800230a:	f240 0340 	movw	r3, #64	; 0x40
 800230e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002312:	601a      	str	r2, [r3, #0]
      break;
 8002314:	e009      	b.n	800232a <SystemCoreClockUpdate+0x12a>
    default:
      SystemCoreClock = HSI_VALUE;
 8002316:	f240 0340 	movw	r3, #64	; 0x40
 800231a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800231e:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8002322:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8002326:	601a      	str	r2, [r3, #0]
      break;
 8002328:	bf00      	nop
  }
}
 800232a:	f107 071c 	add.w	r7, r7, #28
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr

08002334 <SysTick_Handler>:

volatile uint32_t msTicks;                      /* counts 1ms timeTicks       */
/*----------------------------------------------------------------------------
  SysTick_Handler
 *----------------------------------------------------------------------------*/
void SysTick_Handler(void) {
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  msTicks++;
 8002338:	f242 0350 	movw	r3, #8272	; 0x2050
 800233c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f103 0201 	add.w	r2, r3, #1
 8002346:	f242 0350 	movw	r3, #8272	; 0x2050
 800234a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800234e:	601a      	str	r2, [r3, #0]
}
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop

08002358 <Delay>:

/*----------------------------------------------------------------------------
  delays number of tick Systicks (happens every 1 ms)
 *----------------------------------------------------------------------------*/
void Delay (uint32_t dlyTicks) {                                              
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t curTicks;

//!!temporary -- replaced delay mediated by SysTick_Handler() with software delay
//  curTicks = msTicks;
//  while ((msTicks - curTicks) < dlyTicks);
  curTicks = 0x12345;
 8002360:	f242 3345 	movw	r3, #9029	; 0x2345
 8002364:	f2c0 0301 	movt	r3, #1
 8002368:	60fb      	str	r3, [r7, #12]
  while(curTicks-- > 0);
 800236a:	bf00      	nop
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	bf0c      	ite	eq
 8002372:	2300      	moveq	r3, #0
 8002374:	2301      	movne	r3, #1
 8002376:	b2db      	uxtb	r3, r3
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	f102 32ff 	add.w	r2, r2, #4294967295
 800237e:	60fa      	str	r2, [r7, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1f3      	bne.n	800236c <Delay+0x14>
  return;
}
 8002384:	f107 0714 	add.w	r7, r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop

08002390 <display_num_at_digit>:
	 second value goes into GPIOC_BSRR. 
	 param num: The number to be displayed [0-9].  10 is a special case, for lighting up LED1.
	 param position: The digit position we want the number to be displayed at [1-6]. 
	               A 1 corresponds to digit1, 2 to digit2, 3 to digit3, 4 to digit4,
								 5 to colon+degree sign, 6 to an_r, and 7 to an_g.  */
void display_num_at_digit(unsigned int num, unsigned int position) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
	int an_bitpatterns[2] = {0};
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]

	switch (num) {
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b11      	cmp	r3, #17
 80023aa:	f200 8161 	bhi.w	8002670 <display_num_at_digit+0x2e0>
 80023ae:	a201      	add	r2, pc, #4	; (adr r2, 80023b4 <display_num_at_digit+0x24>)
 80023b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b4:	080023fd 	.word	0x080023fd
 80023b8:	0800241f 	.word	0x0800241f
 80023bc:	08002445 	.word	0x08002445
 80023c0:	0800246b 	.word	0x0800246b
 80023c4:	08002491 	.word	0x08002491
 80023c8:	080024b7 	.word	0x080024b7
 80023cc:	080024d9 	.word	0x080024d9
 80023d0:	080024fb 	.word	0x080024fb
 80023d4:	08002521 	.word	0x08002521
 80023d8:	08002543 	.word	0x08002543
 80023dc:	08002565 	.word	0x08002565
 80023e0:	080025a5 	.word	0x080025a5
 80023e4:	0800264f 	.word	0x0800264f
 80023e8:	08002587 	.word	0x08002587
 80023ec:	080025c7 	.word	0x080025c7
 80023f0:	080025e9 	.word	0x080025e9
 80023f4:	0800260b 	.word	0x0800260b
 80023f8:	0800262d 	.word	0x0800262d
		
		// If assigned to the colon position, a zero will turn on the colon dots and the degree dot.

		case 0:
			translate_digit_to_anode_bitpattern(position, an_bitpatterns);
 80023fc:	f107 0308 	add.w	r3, r7, #8
 8002400:	6838      	ldr	r0, [r7, #0]
 8002402:	4619      	mov	r1, r3
 8002404:	f000 f938 	bl	8002678 <translate_digit_to_anode_bitpattern>
			display_bitpattern_at_digit(CA_BITPATTERN_A_ZERO, CA_BITPATTERN_C_ZERO, an_bitpatterns[0], an_bitpatterns[1]);
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f04f 0022 	mov.w	r0, #34	; 0x22
 8002410:	f2c0 0091 	movt	r0, #145	; 0x91
 8002414:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 8002418:	f7fd ffbd 	bl	8000396 <display_bitpattern_at_digit>
			break;
 800241c:	e128      	b.n	8002670 <display_num_at_digit+0x2e0>
		case 1:
			translate_digit_to_anode_bitpattern(position, an_bitpatterns);
 800241e:	f107 0308 	add.w	r3, r7, #8
 8002422:	6838      	ldr	r0, [r7, #0]
 8002424:	4619      	mov	r1, r3
 8002426:	f000 f927 	bl	8002678 <translate_digit_to_anode_bitpattern>
			display_bitpattern_at_digit(CA_BITPATTERN_A_ONE, CA_BITPATTERN_C_ONE, an_bitpatterns[0], an_bitpatterns[1]);
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f04f 00b2 	mov.w	r0, #178	; 0xb2
 8002432:	f2c0 0001 	movt	r0, #1
 8002436:	f04f 0105 	mov.w	r1, #5
 800243a:	f2c0 0108 	movt	r1, #8
 800243e:	f7fd ffaa 	bl	8000396 <display_bitpattern_at_digit>
			break;
 8002442:	e115      	b.n	8002670 <display_num_at_digit+0x2e0>
		case 2:
			translate_digit_to_anode_bitpattern(position, an_bitpatterns);
 8002444:	f107 0308 	add.w	r3, r7, #8
 8002448:	6838      	ldr	r0, [r7, #0]
 800244a:	4619      	mov	r1, r3
 800244c:	f000 f914 	bl	8002678 <translate_digit_to_anode_bitpattern>
			display_bitpattern_at_digit(CA_BITPATTERN_A_TWO, CA_BITPATTERN_C_TWO, an_bitpatterns[0], an_bitpatterns[1]);
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f04f 0020 	mov.w	r0, #32
 8002458:	f2c0 0093 	movt	r0, #147	; 0x93
 800245c:	f04f 0109 	mov.w	r1, #9
 8002460:	f2c0 0105 	movt	r1, #5
 8002464:	f7fd ff97 	bl	8000396 <display_bitpattern_at_digit>
			break;
 8002468:	e102      	b.n	8002670 <display_num_at_digit+0x2e0>
		case 3:
			translate_digit_to_anode_bitpattern(position, an_bitpatterns);
 800246a:	f107 0308 	add.w	r3, r7, #8
 800246e:	6838      	ldr	r0, [r7, #0]
 8002470:	4619      	mov	r1, r3
 8002472:	f000 f901 	bl	8002678 <translate_digit_to_anode_bitpattern>
			display_bitpattern_at_digit(CA_BITPATTERN_A_THREE, CA_BITPATTERN_C_THREE, an_bitpatterns[0], an_bitpatterns[1]);
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f04f 0030 	mov.w	r0, #48	; 0x30
 800247e:	f2c0 0083 	movt	r0, #131	; 0x83
 8002482:	f04f 0101 	mov.w	r1, #1
 8002486:	f2c0 010c 	movt	r1, #12
 800248a:	f7fd ff84 	bl	8000396 <display_bitpattern_at_digit>
			break;
 800248e:	e0ef      	b.n	8002670 <display_num_at_digit+0x2e0>
		case 4:
			translate_digit_to_anode_bitpattern(position, an_bitpatterns);
 8002490:	f107 0308 	add.w	r3, r7, #8
 8002494:	6838      	ldr	r0, [r7, #0]
 8002496:	4619      	mov	r1, r3
 8002498:	f000 f8ee 	bl	8002678 <translate_digit_to_anode_bitpattern>
			display_bitpattern_at_digit(CA_BITPATTERN_A_FOUR, CA_BITPATTERN_C_FOUR, an_bitpatterns[0], an_bitpatterns[1]);
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f04f 00b0 	mov.w	r0, #176	; 0xb0
 80024a4:	f2c0 0003 	movt	r0, #3
 80024a8:	f04f 0104 	mov.w	r1, #4
 80024ac:	f2c0 0109 	movt	r1, #9
 80024b0:	f7fd ff71 	bl	8000396 <display_bitpattern_at_digit>
			break;	
 80024b4:	e0dc      	b.n	8002670 <display_num_at_digit+0x2e0>
		case 5:
			translate_digit_to_anode_bitpattern(position, an_bitpatterns);
 80024b6:	f107 0308 	add.w	r3, r7, #8
 80024ba:	6838      	ldr	r0, [r7, #0]
 80024bc:	4619      	mov	r1, r3
 80024be:	f000 f8db 	bl	8002678 <translate_digit_to_anode_bitpattern>
			display_bitpattern_at_digit(CA_BITPATTERN_A_FIVE, CA_BITPATTERN_C_FIVE, an_bitpatterns[0], an_bitpatterns[1]);
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f04f 0031 	mov.w	r0, #49	; 0x31
 80024ca:	f2c0 0082 	movt	r0, #130	; 0x82
 80024ce:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 80024d2:	f7fd ff60 	bl	8000396 <display_bitpattern_at_digit>
			break;	
 80024d6:	e0cb      	b.n	8002670 <display_num_at_digit+0x2e0>
		case 6:
			translate_digit_to_anode_bitpattern(position, an_bitpatterns);
 80024d8:	f107 0308 	add.w	r3, r7, #8
 80024dc:	6838      	ldr	r0, [r7, #0]
 80024de:	4619      	mov	r1, r3
 80024e0:	f000 f8ca 	bl	8002678 <translate_digit_to_anode_bitpattern>
			display_bitpattern_at_digit(CA_BITPATTERN_A_SIX, CA_BITPATTERN_C_SIX, an_bitpatterns[0], an_bitpatterns[1]);
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f04f 0021 	mov.w	r0, #33	; 0x21
 80024ec:	f2c0 0092 	movt	r0, #146	; 0x92
 80024f0:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 80024f4:	f7fd ff4f 	bl	8000396 <display_bitpattern_at_digit>
			break;	
 80024f8:	e0ba      	b.n	8002670 <display_num_at_digit+0x2e0>
		case 7:
			translate_digit_to_anode_bitpattern(position, an_bitpatterns);
 80024fa:	f107 0308 	add.w	r3, r7, #8
 80024fe:	6838      	ldr	r0, [r7, #0]
 8002500:	4619      	mov	r1, r3
 8002502:	f000 f8b9 	bl	8002678 <translate_digit_to_anode_bitpattern>
			display_bitpattern_at_digit(CA_BITPATTERN_A_SEVEN, CA_BITPATTERN_C_SEVEN, an_bitpatterns[0], an_bitpatterns[1]);
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f04f 00b2 	mov.w	r0, #178	; 0xb2
 800250e:	f2c0 0001 	movt	r0, #1
 8002512:	f04f 0101 	mov.w	r1, #1
 8002516:	f2c0 010c 	movt	r1, #12
 800251a:	f7fd ff3c 	bl	8000396 <display_bitpattern_at_digit>
			break;	
 800251e:	e0a7      	b.n	8002670 <display_num_at_digit+0x2e0>
		case 8:
			translate_digit_to_anode_bitpattern(position, an_bitpatterns);
 8002520:	f107 0308 	add.w	r3, r7, #8
 8002524:	6838      	ldr	r0, [r7, #0]
 8002526:	4619      	mov	r1, r3
 8002528:	f000 f8a6 	bl	8002678 <translate_digit_to_anode_bitpattern>
			display_bitpattern_at_digit(CA_BITPATTERN_A_EIGHT, CA_BITPATTERN_C_EIGHT, an_bitpatterns[0], an_bitpatterns[1]);
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f04f 0020 	mov.w	r0, #32
 8002534:	f2c0 0093 	movt	r0, #147	; 0x93
 8002538:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800253c:	f7fd ff2b 	bl	8000396 <display_bitpattern_at_digit>
			break;
 8002540:	e096      	b.n	8002670 <display_num_at_digit+0x2e0>
		case 9:
			translate_digit_to_anode_bitpattern(position, an_bitpatterns);
 8002542:	f107 0308 	add.w	r3, r7, #8
 8002546:	6838      	ldr	r0, [r7, #0]
 8002548:	4619      	mov	r1, r3
 800254a:	f000 f895 	bl	8002678 <translate_digit_to_anode_bitpattern>
			display_bitpattern_at_digit(CA_BITPATTERN_A_NINE, CA_BITPATTERN_C_NINE, an_bitpatterns[0], an_bitpatterns[1]);
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f04f 0030 	mov.w	r0, #48	; 0x30
 8002556:	f2c0 0083 	movt	r0, #131	; 0x83
 800255a:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800255e:	f7fd ff1a 	bl	8000396 <display_bitpattern_at_digit>
			break;
 8002562:	e085      	b.n	8002670 <display_num_at_digit+0x2e0>
		// This case is only for the LED position (red or green).
		case FREQ_LED:
			translate_digit_to_anode_bitpattern(position, an_bitpatterns);
 8002564:	f107 0308 	add.w	r3, r7, #8
 8002568:	6838      	ldr	r0, [r7, #0]
 800256a:	4619      	mov	r1, r3
 800256c:	f000 f884 	bl	8002678 <translate_digit_to_anode_bitpattern>
			display_bitpattern_at_digit(CA_BITPATTERN_A_LED1, CA_BITPATTERN_C_LED1, an_bitpatterns[0], an_bitpatterns[1]);
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f04f 00b3 	mov.w	r0, #179	; 0xb3
 8002578:	f04f 0105 	mov.w	r1, #5
 800257c:	f2c0 0108 	movt	r1, #8
 8002580:	f7fd ff09 	bl	8000396 <display_bitpattern_at_digit>
		break;
 8002584:	e074      	b.n	8002670 <display_num_at_digit+0x2e0>
		case OFF:
			translate_digit_to_anode_bitpattern(position, an_bitpatterns);
 8002586:	f107 0308 	add.w	r3, r7, #8
 800258a:	6838      	ldr	r0, [r7, #0]
 800258c:	4619      	mov	r1, r3
 800258e:	f000 f873 	bl	8002678 <translate_digit_to_anode_bitpattern>
			display_bitpattern_at_digit(CA_BITPATTERN_A_OFF, CA_BITPATTERN_C_OFF, an_bitpatterns[0], an_bitpatterns[1]);
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f04f 00b3 	mov.w	r0, #179	; 0xb3
 800259a:	f04f 010d 	mov.w	r1, #13
 800259e:	f7fd fefa 	bl	8000396 <display_bitpattern_at_digit>
		break;
 80025a2:	e065      	b.n	8002670 <display_num_at_digit+0x2e0>
		case RESET_LED:
				translate_digit_to_anode_bitpattern(position, an_bitpatterns);
 80025a4:	f107 0308 	add.w	r3, r7, #8
 80025a8:	6838      	ldr	r0, [r7, #0]
 80025aa:	4619      	mov	r1, r3
 80025ac:	f000 f864 	bl	8002678 <translate_digit_to_anode_bitpattern>
				display_bitpattern_at_digit(CA_BITPATTERN_A_LED4, CA_BITPATTERN_C_LED4, an_bitpatterns[0], an_bitpatterns[1]);
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f04f 00b3 	mov.w	r0, #179	; 0xb3
 80025b8:	f04f 0104 	mov.w	r1, #4
 80025bc:	f2c0 0101 	movt	r1, #1
 80025c0:	f7fd fee9 	bl	8000396 <display_bitpattern_at_digit>
				break;
 80025c4:	e054      	b.n	8002670 <display_num_at_digit+0x2e0>
		case PLAY_LED:
				translate_digit_to_anode_bitpattern(position, an_bitpatterns);
 80025c6:	f107 0308 	add.w	r3, r7, #8
 80025ca:	6838      	ldr	r0, [r7, #0]
 80025cc:	4619      	mov	r1, r3
 80025ce:	f000 f853 	bl	8002678 <translate_digit_to_anode_bitpattern>
				display_bitpattern_at_digit(CA_BITPATTERN_A_LED6, CA_BITPATTERN_C_LED6, an_bitpatterns[0], an_bitpatterns[1]);
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f04f 0022 	mov.w	r0, #34	; 0x22
 80025da:	f2c0 0001 	movt	r0, #1
 80025de:	f04f 010d 	mov.w	r1, #13
 80025e2:	f7fd fed8 	bl	8000396 <display_bitpattern_at_digit>
				break;
 80025e6:	e043      	b.n	8002670 <display_num_at_digit+0x2e0>
		case REVIEW_LED:
				translate_digit_to_anode_bitpattern(position, an_bitpatterns);
 80025e8:	f107 0308 	add.w	r3, r7, #8
 80025ec:	6838      	ldr	r0, [r7, #0]
 80025ee:	4619      	mov	r1, r3
 80025f0:	f000 f842 	bl	8002678 <translate_digit_to_anode_bitpattern>
				display_bitpattern_at_digit(CA_BITPATTERN_A_LED3, CA_BITPATTERN_C_LED3, an_bitpatterns[0], an_bitpatterns[1]);
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f04f 0003 	mov.w	r0, #3
 80025fc:	f2c0 0020 	movt	r0, #32
 8002600:	f04f 010d 	mov.w	r1, #13
 8002604:	f7fd fec7 	bl	8000396 <display_bitpattern_at_digit>
				break;
 8002608:	e032      	b.n	8002670 <display_num_at_digit+0x2e0>
		case WARNING_LED:
				translate_digit_to_anode_bitpattern(position, an_bitpatterns);
 800260a:	f107 0308 	add.w	r3, r7, #8
 800260e:	6838      	ldr	r0, [r7, #0]
 8002610:	4619      	mov	r1, r3
 8002612:	f000 f831 	bl	8002678 <translate_digit_to_anode_bitpattern>
				display_bitpattern_at_digit(CA_BITPATTERN_A_LED5, CA_BITPATTERN_C_LED5, an_bitpatterns[0], an_bitpatterns[1]);
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f04f 00b3 	mov.w	r0, #179	; 0xb3
 800261e:	f04f 0101 	mov.w	r1, #1
 8002622:	f2c0 0104 	movt	r1, #4
 8002626:	f7fd feb6 	bl	8000396 <display_bitpattern_at_digit>
				break;
 800262a:	e021      	b.n	8002670 <display_num_at_digit+0x2e0>
		case INTEN_LED:
				translate_digit_to_anode_bitpattern(position, an_bitpatterns);
 800262c:	f107 0308 	add.w	r3, r7, #8
 8002630:	6838      	ldr	r0, [r7, #0]
 8002632:	4619      	mov	r1, r3
 8002634:	f000 f820 	bl	8002678 <translate_digit_to_anode_bitpattern>
				display_bitpattern_at_digit(CA_BITPATTERN_A_LED2, CA_BITPATTERN_C_LED2, an_bitpatterns[0], an_bitpatterns[1]);
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f04f 0021 	mov.w	r0, #33	; 0x21
 8002640:	f2c0 0002 	movt	r0, #2
 8002644:	f04f 010d 	mov.w	r1, #13
 8002648:	f7fd fea5 	bl	8000396 <display_bitpattern_at_digit>
				break;
 800264c:	e010      	b.n	8002670 <display_num_at_digit+0x2e0>
		case NEG_SIGN:
				translate_digit_to_anode_bitpattern(position, an_bitpatterns);
 800264e:	f107 0308 	add.w	r3, r7, #8
 8002652:	6838      	ldr	r0, [r7, #0]
 8002654:	4619      	mov	r1, r3
 8002656:	f000 f80f 	bl	8002678 <translate_digit_to_anode_bitpattern>
				display_bitpattern_at_digit(CA_BITPATTERN_A_NEG, CA_BITPATTERN_C_NEG, an_bitpatterns[0], an_bitpatterns[1]);
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f04f 00b1 	mov.w	r0, #177	; 0xb1
 8002662:	f2c0 0002 	movt	r0, #2
 8002666:	f04f 010d 	mov.w	r1, #13
 800266a:	f7fd fe94 	bl	8000396 <display_bitpattern_at_digit>
				break;
 800266e:	bf00      	nop
	}
	

}
 8002670:	f107 0710 	add.w	r7, r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <translate_digit_to_anode_bitpattern>:
																		gpioC_bsrr <- 0x 0000 000d
		PARAM1 position: This is the position whose digit we wish to illuminate.
		PARAM2 bitpatterns: This is the array where we store the 2 bitpatterns: 
												one for the gpioA_bsrr register, and one for the gpioC_bsrr register. 
*/
void translate_digit_to_anode_bitpattern(unsigned int position, int * bitpatterns) {
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
	
		switch (position) {
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b07      	cmp	r3, #7
 8002686:	d879      	bhi.n	800277c <translate_digit_to_anode_bitpattern+0x104>
 8002688:	a201      	add	r2, pc, #4	; (adr r2, 8002690 <translate_digit_to_anode_bitpattern+0x18>)
 800268a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268e:	bf00      	nop
 8002690:	080026b1 	.word	0x080026b1
 8002694:	080026c7 	.word	0x080026c7
 8002698:	080026e1 	.word	0x080026e1
 800269c:	080026fb 	.word	0x080026fb
 80026a0:	08002715 	.word	0x08002715
 80026a4:	0800272f 	.word	0x0800272f
 80026a8:	08002749 	.word	0x08002749
 80026ac:	08002763 	.word	0x08002763
			
			// all off:
			case 0:
				bitpatterns[0] = AN_BITPATTERN_A_NONE;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	f04f 0233 	mov.w	r2, #51	; 0x33
 80026b6:	601a      	str	r2, [r3, #0]
				bitpatterns[1] = AN_BITPATTERN_C_NONE;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	f103 0304 	add.w	r3, r3, #4
 80026be:	f04f 020d 	mov.w	r2, #13
 80026c2:	601a      	str	r2, [r3, #0]
				break;
 80026c4:	e05a      	b.n	800277c <translate_digit_to_anode_bitpattern+0x104>
			// digit1 position:	
			case 1:
				bitpatterns[0] = AN_BITPATTERN_A_DIG1;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	f04f 0233 	mov.w	r2, #51	; 0x33
 80026cc:	601a      	str	r2, [r3, #0]
				bitpatterns[1] = AN_BITPATTERN_C_DIG1;		
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	f103 0204 	add.w	r2, r3, #4
 80026d4:	f04f 030c 	mov.w	r3, #12
 80026d8:	f2c0 0301 	movt	r3, #1
 80026dc:	6013      	str	r3, [r2, #0]
				break;
 80026de:	e04d      	b.n	800277c <translate_digit_to_anode_bitpattern+0x104>
			// digit2 position:
			case 2:
				bitpatterns[0] = AN_BITPATTERN_A_DIG2;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	f04f 0233 	mov.w	r2, #51	; 0x33
 80026e6:	601a      	str	r2, [r3, #0]
				bitpatterns[1] = AN_BITPATTERN_C_DIG2;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	f103 0204 	add.w	r2, r3, #4
 80026ee:	f04f 0305 	mov.w	r3, #5
 80026f2:	f2c0 0308 	movt	r3, #8
 80026f6:	6013      	str	r3, [r2, #0]
				break;
 80026f8:	e040      	b.n	800277c <translate_digit_to_anode_bitpattern+0x104>
			// digit3 position:
			case 3:
				bitpatterns[0] = AN_BITPATTERN_A_DIG3;
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	f04f 0331 	mov.w	r3, #49	; 0x31
 8002700:	f2c0 0302 	movt	r3, #2
 8002704:	6013      	str	r3, [r2, #0]
				bitpatterns[1] = AN_BITPATTERN_C_DIG3;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	f103 0304 	add.w	r3, r3, #4
 800270c:	f04f 020d 	mov.w	r2, #13
 8002710:	601a      	str	r2, [r3, #0]
				break;
 8002712:	e033      	b.n	800277c <translate_digit_to_anode_bitpattern+0x104>
			// digit4 position:
			case 4:
				bitpatterns[0] = AN_BITPATTERN_A_DIG4;
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	f04f 0332 	mov.w	r3, #50	; 0x32
 800271a:	f2c0 0301 	movt	r3, #1
 800271e:	6013      	str	r3, [r2, #0]
				bitpatterns[1] = AN_BITPATTERN_C_DIG4;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	f103 0304 	add.w	r3, r3, #4
 8002726:	f04f 020d 	mov.w	r2, #13
 800272a:	601a      	str	r2, [r3, #0]
				break;
 800272c:	e026      	b.n	800277c <translate_digit_to_anode_bitpattern+0x104>
			// an_r position:			
			case 5:
				bitpatterns[0] = AN_BITPATTERN_A_RED;
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	f04f 0323 	mov.w	r3, #35	; 0x23
 8002734:	f2c0 0310 	movt	r3, #16
 8002738:	6013      	str	r3, [r2, #0]
				bitpatterns[1] = AN_BITPATTERN_C_RED;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	f103 0304 	add.w	r3, r3, #4
 8002740:	f04f 020d 	mov.w	r2, #13
 8002744:	601a      	str	r2, [r3, #0]
				break;
 8002746:	e019      	b.n	800277c <translate_digit_to_anode_bitpattern+0x104>
			// an_g position:
			case 6:
				bitpatterns[0] = AN_BITPATTERN_A_GREEN;
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	f04f 0313 	mov.w	r3, #19
 800274e:	f2c0 0320 	movt	r3, #32
 8002752:	6013      	str	r3, [r2, #0]
				bitpatterns[1] = AN_BITPATTERN_C_GREEN;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	f103 0304 	add.w	r3, r3, #4
 800275a:	f04f 020d 	mov.w	r2, #13
 800275e:	601a      	str	r2, [r3, #0]
				break;
 8002760:	e00c      	b.n	800277c <translate_digit_to_anode_bitpattern+0x104>
			// colon+degree position:
			case 7:
				bitpatterns[0] = AN_BITPATTERN_A_COL;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	f04f 0233 	mov.w	r2, #51	; 0x33
 8002768:	601a      	str	r2, [r3, #0]
				bitpatterns[1] = AN_BITPATTERN_C_COL;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	f103 0204 	add.w	r2, r3, #4
 8002770:	f04f 0309 	mov.w	r3, #9
 8002774:	f2c0 0304 	movt	r3, #4
 8002778:	6013      	str	r3, [r2, #0]
				break;
 800277a:	bf00      	nop
			
	}
	
}
 800277c:	f107 070c 	add.w	r7, r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop

08002788 <mikes_display_update>:

/* This function causes the digit associated with a position (according to digitvals, the global variable)
   to be displayed at that position.  It then increments the position, so that the
	 next time around the NEXT position will be displayed.  In this way, it displays
   all digits round-robin style. */
void mikes_display_update() {
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
	unsigned static int position = 0;
	position = (position % 5) + 1;
 800278c:	f240 033c 	movw	r3, #60	; 0x3c
 8002790:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002794:	6819      	ldr	r1, [r3, #0]
 8002796:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 800279a:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 800279e:	fba3 2301 	umull	r2, r3, r3, r1
 80027a2:	ea4f 0293 	mov.w	r2, r3, lsr #2
 80027a6:	4613      	mov	r3, r2
 80027a8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80027ac:	189b      	adds	r3, r3, r2
 80027ae:	1aca      	subs	r2, r1, r3
 80027b0:	f102 0201 	add.w	r2, r2, #1
 80027b4:	f240 033c 	movw	r3, #60	; 0x3c
 80027b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027bc:	601a      	str	r2, [r3, #0]
	// position cycles between the values of 1 and 5, incrementing with each call
	// to this function.  It indications the digit position to be lit up.
	display_num_at_digit(digitvals[position-1], position);	
 80027be:	f240 033c 	movw	r3, #60	; 0x3c
 80027c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f103 32ff 	add.w	r2, r3, #4294967295
 80027cc:	f240 0310 	movw	r3, #16
 80027d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80027d8:	f240 033c 	movw	r3, #60	; 0x3c
 80027dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4610      	mov	r0, r2
 80027e4:	4619      	mov	r1, r3
 80027e6:	f7ff fdd3 	bl	8002390 <display_num_at_digit>
	position++;
 80027ea:	f240 033c 	movw	r3, #60	; 0x3c
 80027ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f103 0201 	add.w	r2, r3, #1
 80027f8:	f240 033c 	movw	r3, #60	; 0x3c
 80027fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002800:	601a      	str	r2, [r3, #0]
}
 8002802:	bd80      	pop	{r7, pc}

08002804 <arrtosi>:
	 arr[4] is for the LED pattern so we don't touch that,
	 arr[3] is the least sig digit (start here),
	 and the most sig digit could be anywhere beyond that; we just
	 stop when we see a NEG_SIGN or an OFF array value.
*/
int arrtosi(unsigned int *int_arr) {
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
	int returnNum = 0, i = 3, j = 0;
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	f04f 0303 	mov.w	r3, #3
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
	
	// Add digits to the total until we encounter stop digit.
	while (i != -1 && int_arr[i] != OFF) {
 800281e:	e031      	b.n	8002884 <arrtosi+0x80>
		// If neg sign, negate whole thing and finish accumulating
		if (int_arr[i] == NEG_SIGN) {
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	18d3      	adds	r3, r2, r3
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b0c      	cmp	r3, #12
 800282e:	d104      	bne.n	800283a <arrtosi+0x36>
			returnNum *= -1;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f1c3 0300 	rsb	r3, r3, #0
 8002836:	617b      	str	r3, [r7, #20]
			break;
 8002838:	e030      	b.n	800289c <arrtosi+0x98>
		}
		int curVal = int_arr[i];
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	18d3      	adds	r3, r2, r3
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	60bb      	str	r3, [r7, #8]
		// get value of cur digit
		for (j = 0; j < (3-i); j++) curVal *= 10;
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	e00b      	b.n	8002868 <arrtosi+0x64>
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	4613      	mov	r3, r2
 8002854:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002858:	189b      	adds	r3, r3, r2
 800285a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f103 0301 	add.w	r3, r3, #1
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	f1c3 0203 	rsb	r2, r3, #3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	429a      	cmp	r2, r3
 8002872:	dced      	bgt.n	8002850 <arrtosi+0x4c>
		// add cur digit to total
		returnNum += curVal;
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	18d3      	adds	r3, r2, r3
 800287a:	617b      	str	r3, [r7, #20]
		// increment array position
		i--;
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	f103 33ff 	add.w	r3, r3, #4294967295
 8002882:	613b      	str	r3, [r7, #16]
*/
int arrtosi(unsigned int *int_arr) {
	int returnNum = 0, i = 3, j = 0;
	
	// Add digits to the total until we encounter stop digit.
	while (i != -1 && int_arr[i] != OFF) {
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288a:	d007      	beq.n	800289c <arrtosi+0x98>
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	18d3      	adds	r3, r2, r3
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b0d      	cmp	r3, #13
 800289a:	d1c1      	bne.n	8002820 <arrtosi+0x1c>
		// add cur digit to total
		returnNum += curVal;
		// increment array position
		i--;
	}
	return returnNum;
 800289c:	697b      	ldr	r3, [r7, #20]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	f107 071c 	add.w	r7, r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop

080028ac <sitoarr>:
	 The array we populate is given to us as an argument 
   (we give back the altered array pass-by-reference style). 
	  Note that this function returns an array OFF-padded
		rather than zero-padded from the left (which is currently
	  the convention only for the display of the intensity value). */
void sitoarr(unsigned int * int_arr, int num) {
 80028ac:	b490      	push	{r4, r7}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
	int i = 0, j = 0;
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	60bb      	str	r3, [r7, #8]
	int curNum = num;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	613b      	str	r3, [r7, #16]
	int modVal = 1;
 80028c6:	f04f 0301 	mov.w	r3, #1
 80028ca:	60fb      	str	r3, [r7, #12]
	
	// Take abs value of curNum
	if (curNum < 0) curNum *= -1;
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	da03      	bge.n	80028da <sitoarr+0x2e>
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f1c3 0300 	rsb	r3, r3, #0
 80028d8:	613b      	str	r3, [r7, #16]
	
	for (i = 3; i >= 0; i--) {
 80028da:	f04f 0303 	mov.w	r3, #3
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	e044      	b.n	800296c <sitoarr+0xc0>
		modVal *= 10;
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	4613      	mov	r3, r2
 80028e6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80028ea:	189b      	adds	r3, r3, r2
 80028ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80028f0:	60fb      	str	r3, [r7, #12]
		int_arr[i] = (curNum % modVal);
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	18d2      	adds	r2, r2, r3
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	68f9      	ldr	r1, [r7, #12]
 8002900:	fb93 f1f1 	sdiv	r1, r3, r1
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	fb00 f101 	mul.w	r1, r0, r1
 800290a:	1a5b      	subs	r3, r3, r1
 800290c:	6013      	str	r3, [r2, #0]
		curNum -= int_arr[i];
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	18cb      	adds	r3, r1, r3
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	613b      	str	r3, [r7, #16]
		int_arr[i] = int_arr[i] / (modVal/10);
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	18d1      	adds	r1, r2, r3
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	18d3      	adds	r3, r2, r3
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	f246 6367 	movw	r3, #26215	; 0x6667
 800293c:	f2c6 6366 	movt	r3, #26214	; 0x6666
 8002940:	fb83 c302 	smull	ip, r3, r3, r2
 8002944:	ea4f 04a3 	mov.w	r4, r3, asr #2
 8002948:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800294c:	1ae3      	subs	r3, r4, r3
 800294e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002952:	600b      	str	r3, [r1, #0]
		
		if (curNum == 0) {
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d104      	bne.n	8002964 <sitoarr+0xb8>
			i--;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f103 33ff 	add.w	r3, r3, #4294967295
 8002960:	617b      	str	r3, [r7, #20]
			break;
 8002962:	e006      	b.n	8002972 <sitoarr+0xc6>
	int modVal = 1;
	
	// Take abs value of curNum
	if (curNum < 0) curNum *= -1;
	
	for (i = 3; i >= 0; i--) {
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f103 33ff 	add.w	r3, r3, #4294967295
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	2b00      	cmp	r3, #0
 8002970:	dab7      	bge.n	80028e2 <sitoarr+0x36>
		}
	}
	
	// If the original number was negative, than add the neg sign
	// to the current array position and decrement the array position.
	if (num < 0) {
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	da18      	bge.n	80029aa <sitoarr+0xfe>
		int_arr[i] = NEG_SIGN;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	18d3      	adds	r3, r2, r3
 8002982:	f04f 020c 	mov.w	r2, #12
 8002986:	601a      	str	r2, [r3, #0]
		i--;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f103 33ff 	add.w	r3, r3, #4294967295
 800298e:	617b      	str	r3, [r7, #20]
	}
	
	// OFF-pad remaining digits
	for (i; i >= 0; i--) int_arr[i] = OFF;
 8002990:	e00b      	b.n	80029aa <sitoarr+0xfe>
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	18d3      	adds	r3, r2, r3
 800299c:	f04f 020d 	mov.w	r2, #13
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f103 33ff 	add.w	r3, r3, #4294967295
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	daf0      	bge.n	8002992 <sitoarr+0xe6>
}
 80029b0:	f107 0718 	add.w	r7, r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc90      	pop	{r4, r7}
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop

080029bc <decrement_arr>:

/* This function takes a 3-digit number stored as a size-3 array,
	 converts it to a number, decrements it by 5, and then converts
	 it to an array again. No return value since we'll be passing by reference.
*/
void decrement_arr(unsigned int * int_arr, int step) {
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
	// 1. Convert array to number (saturation values are -10 and 110).
	int num = arrtosi(int_arr);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff ff1c 	bl	8002804 <arrtosi>
 80029cc:	4603      	mov	r3, r0
 80029ce:	60fb      	str	r3, [r7, #12]
	
	// 2. Increment by step var.
	num -= step;
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	60fb      	str	r3, [r7, #12]
	
	// 3. Convert number back to array, put in original array.
	sitoarr(int_arr, num);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	68f9      	ldr	r1, [r7, #12]
 80029dc:	f7ff ff66 	bl	80028ac <sitoarr>
	
}
 80029e0:	f107 0710 	add.w	r7, r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <increment_arr>:

/* This function takes a 3-digit number stored as a size-3 array,
	 converts it to a number, INCREMENTS it by the step parameter, and then converts
	 it to an array again. No return value since we'll be passing by reference.
*/
void increment_arr(unsigned int * int_arr, int step) {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
	// 1. Convert array to number (saturation values are -10 and 110).
	int num = arrtosi(int_arr);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff ff06 	bl	8002804 <arrtosi>
 80029f8:	4603      	mov	r3, r0
 80029fa:	60fb      	str	r3, [r7, #12]
	
	// 2. Increment by step var.
	num += step;
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	18d3      	adds	r3, r2, r3
 8002a02:	60fb      	str	r3, [r7, #12]
	
	// 3. Convert number back to array, put in original array.
	sitoarr(int_arr, num);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	68f9      	ldr	r1, [r7, #12]
 8002a08:	f7ff ff50 	bl	80028ac <sitoarr>
}
 8002a0c:	f107 0710 	add.w	r7, r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <update_fsm_level2>:

/* This function modifies the fsm level 2 state, a global variable. 
    Input parameters are the two encoder signals.
		Return value represents fsm_level2 output: 1 for the up-detent signal,
	  -1 for the down-detent signal, and 0 if no signal generated. */
int update_fsm_level2(unsigned int encA, unsigned int encB) {
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
	int fsm_lvl2_output = 0;
 8002a1e:	f04f 0300 	mov.w	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]
					switch (encoder_state_lvl2) {			
 8002a24:	f240 0331 	movw	r3, #49	; 0x31
 8002a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b06      	cmp	r3, #6
 8002a30:	f200 811b 	bhi.w	8002c6a <update_fsm_level2+0x256>
 8002a34:	a201      	add	r2, pc, #4	; (adr r2, 8002a3c <update_fsm_level2+0x28>)
 8002a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3a:	bf00      	nop
 8002a3c:	08002a59 	.word	0x08002a59
 8002a40:	08002aa3 	.word	0x08002aa3
 8002a44:	08002aed 	.word	0x08002aed
 8002a48:	08002b37 	.word	0x08002b37
 8002a4c:	08002b87 	.word	0x08002b87
 8002a50:	08002bd1 	.word	0x08002bd1
 8002a54:	08002c1b 	.word	0x08002c1b
					// If at state INITIAL, just check to see if we can move to state UP1 or DOWN1.
					case INITIAL:
						if       (!encA && encB)  encoder_state_lvl2 = UP1;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10a      	bne.n	8002a74 <update_fsm_level2+0x60>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d007      	beq.n	8002a74 <update_fsm_level2+0x60>
 8002a64:	f240 0331 	movw	r3, #49	; 0x31
 8002a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a6c:	f04f 0201 	mov.w	r2, #1
 8002a70:	701a      	strb	r2, [r3, #0]
 8002a72:	e015      	b.n	8002aa0 <update_fsm_level2+0x8c>
						else if  (encA && !encB)  encoder_state_lvl2 = DOWN1;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <update_fsm_level2+0x7c>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d107      	bne.n	8002a90 <update_fsm_level2+0x7c>
 8002a80:	f240 0331 	movw	r3, #49	; 0x31
 8002a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a88:	f04f 0204 	mov.w	r2, #4
 8002a8c:	701a      	strb	r2, [r3, #0]
 8002a8e:	e007      	b.n	8002aa0 <update_fsm_level2+0x8c>
						else                      encoder_state_lvl2 = INITIAL;
 8002a90:	f240 0331 	movw	r3, #49	; 0x31
 8002a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
						break;
 8002a9e:	e0e4      	b.n	8002c6a <update_fsm_level2+0x256>
 8002aa0:	e0e3      	b.n	8002c6a <update_fsm_level2+0x256>
					
					case UP1:		
						if       (!encA && encB)   encoder_state_lvl2 = UP1;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10a      	bne.n	8002abe <update_fsm_level2+0xaa>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d007      	beq.n	8002abe <update_fsm_level2+0xaa>
 8002aae:	f240 0331 	movw	r3, #49	; 0x31
 8002ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ab6:	f04f 0201 	mov.w	r2, #1
 8002aba:	701a      	strb	r2, [r3, #0]
 8002abc:	e015      	b.n	8002aea <update_fsm_level2+0xd6>
						else if  (!encA && !encB)  encoder_state_lvl2 = UP2;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <update_fsm_level2+0xc6>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d107      	bne.n	8002ada <update_fsm_level2+0xc6>
 8002aca:	f240 0331 	movw	r3, #49	; 0x31
 8002ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ad2:	f04f 0202 	mov.w	r2, #2
 8002ad6:	701a      	strb	r2, [r3, #0]
 8002ad8:	e007      	b.n	8002aea <update_fsm_level2+0xd6>
						else                       encoder_state_lvl2 = INITIAL;						
 8002ada:	f240 0331 	movw	r3, #49	; 0x31
 8002ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]
						break;
 8002ae8:	e0bf      	b.n	8002c6a <update_fsm_level2+0x256>
 8002aea:	e0be      	b.n	8002c6a <update_fsm_level2+0x256>
					
					case UP2:				
						if       (!encA && !encB)   encoder_state_lvl2 = UP2;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10a      	bne.n	8002b08 <update_fsm_level2+0xf4>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d107      	bne.n	8002b08 <update_fsm_level2+0xf4>
 8002af8:	f240 0331 	movw	r3, #49	; 0x31
 8002afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b00:	f04f 0202 	mov.w	r2, #2
 8002b04:	701a      	strb	r2, [r3, #0]
 8002b06:	e015      	b.n	8002b34 <update_fsm_level2+0x120>
						else if  (encA && !encB)    encoder_state_lvl2 = UP3;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <update_fsm_level2+0x110>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d107      	bne.n	8002b24 <update_fsm_level2+0x110>
 8002b14:	f240 0331 	movw	r3, #49	; 0x31
 8002b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b1c:	f04f 0203 	mov.w	r2, #3
 8002b20:	701a      	strb	r2, [r3, #0]
 8002b22:	e007      	b.n	8002b34 <update_fsm_level2+0x120>
						else                        encoder_state_lvl2 = INITIAL;
 8002b24:	f240 0331 	movw	r3, #49	; 0x31
 8002b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]
						break;
 8002b32:	e09a      	b.n	8002c6a <update_fsm_level2+0x256>
 8002b34:	e099      	b.n	8002c6a <update_fsm_level2+0x256>
					
					case UP3:					
						if       (encA && !encB) {  encoder_state_lvl2 = UP3; }
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <update_fsm_level2+0x13e>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d107      	bne.n	8002b52 <update_fsm_level2+0x13e>
 8002b42:	f240 0331 	movw	r3, #49	; 0x31
 8002b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b4a:	f04f 0203 	mov.w	r2, #3
 8002b4e:	701a      	strb	r2, [r3, #0]
 8002b50:	e018      	b.n	8002b84 <update_fsm_level2+0x170>
						else if  (encA && encB) {
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00d      	beq.n	8002b74 <update_fsm_level2+0x160>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <update_fsm_level2+0x160>
							encoder_state_lvl2 = INITIAL;
 8002b5e:	f240 0331 	movw	r3, #49	; 0x31
 8002b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
							// made it through a full detent! INCREMENT as necessary.
							fsm_lvl2_output = 1;
 8002b6c:	f04f 0301 	mov.w	r3, #1
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	e007      	b.n	8002b84 <update_fsm_level2+0x170>
						}	
						else                     {  encoder_state_lvl2 = INITIAL; }
 8002b74:	f240 0331 	movw	r3, #49	; 0x31
 8002b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	701a      	strb	r2, [r3, #0]
						break;
 8002b82:	e072      	b.n	8002c6a <update_fsm_level2+0x256>
 8002b84:	e071      	b.n	8002c6a <update_fsm_level2+0x256>
					
					
					case DOWN1:		
						if       (encA && !encB)   encoder_state_lvl2 = DOWN1;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <update_fsm_level2+0x18e>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d107      	bne.n	8002ba2 <update_fsm_level2+0x18e>
 8002b92:	f240 0331 	movw	r3, #49	; 0x31
 8002b96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b9a:	f04f 0204 	mov.w	r2, #4
 8002b9e:	701a      	strb	r2, [r3, #0]
 8002ba0:	e015      	b.n	8002bce <update_fsm_level2+0x1ba>
						else if  (!encA && !encB)  encoder_state_lvl2 = DOWN2;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10a      	bne.n	8002bbe <update_fsm_level2+0x1aa>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d107      	bne.n	8002bbe <update_fsm_level2+0x1aa>
 8002bae:	f240 0331 	movw	r3, #49	; 0x31
 8002bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bb6:	f04f 0205 	mov.w	r2, #5
 8002bba:	701a      	strb	r2, [r3, #0]
 8002bbc:	e007      	b.n	8002bce <update_fsm_level2+0x1ba>
						else                       encoder_state_lvl2 = INITIAL;
 8002bbe:	f240 0331 	movw	r3, #49	; 0x31
 8002bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]
						break;
 8002bcc:	e04d      	b.n	8002c6a <update_fsm_level2+0x256>
 8002bce:	e04c      	b.n	8002c6a <update_fsm_level2+0x256>
					
					case DOWN2:		
						if       (!encA && !encB)   encoder_state_lvl2 = DOWN2;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10a      	bne.n	8002bec <update_fsm_level2+0x1d8>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d107      	bne.n	8002bec <update_fsm_level2+0x1d8>
 8002bdc:	f240 0331 	movw	r3, #49	; 0x31
 8002be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002be4:	f04f 0205 	mov.w	r2, #5
 8002be8:	701a      	strb	r2, [r3, #0]
 8002bea:	e015      	b.n	8002c18 <update_fsm_level2+0x204>
						else if  (!encA && encB)    encoder_state_lvl2 = DOWN3;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10a      	bne.n	8002c08 <update_fsm_level2+0x1f4>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d007      	beq.n	8002c08 <update_fsm_level2+0x1f4>
 8002bf8:	f240 0331 	movw	r3, #49	; 0x31
 8002bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c00:	f04f 0206 	mov.w	r2, #6
 8002c04:	701a      	strb	r2, [r3, #0]
 8002c06:	e007      	b.n	8002c18 <update_fsm_level2+0x204>
						else                        encoder_state_lvl2 = INITIAL;
 8002c08:	f240 0331 	movw	r3, #49	; 0x31
 8002c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]
						break;
 8002c16:	e028      	b.n	8002c6a <update_fsm_level2+0x256>
 8002c18:	e027      	b.n	8002c6a <update_fsm_level2+0x256>
					
					case DOWN3:				
						if       (!encA && encB) {  encoder_state_lvl2 = DOWN3; }
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10a      	bne.n	8002c36 <update_fsm_level2+0x222>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d007      	beq.n	8002c36 <update_fsm_level2+0x222>
 8002c26:	f240 0331 	movw	r3, #49	; 0x31
 8002c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c2e:	f04f 0206 	mov.w	r2, #6
 8002c32:	701a      	strb	r2, [r3, #0]
 8002c34:	e018      	b.n	8002c68 <update_fsm_level2+0x254>
						else if  (encA && encB) {
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00d      	beq.n	8002c58 <update_fsm_level2+0x244>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <update_fsm_level2+0x244>
							encoder_state_lvl2 = INITIAL;
 8002c42:	f240 0331 	movw	r3, #49	; 0x31
 8002c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	701a      	strb	r2, [r3, #0]
							// made it through a full detent! DECREMENT as necessary.
							fsm_lvl2_output = -1;;
 8002c50:	f04f 33ff 	mov.w	r3, #4294967295
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	e007      	b.n	8002c68 <update_fsm_level2+0x254>
						}
						else                     {  
	encoder_state_lvl2 = INITIAL;
 8002c58:	f240 0331 	movw	r3, #49	; 0x31
 8002c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	701a      	strb	r2, [r3, #0]
						}
						break;
 8002c66:	e7ff      	b.n	8002c68 <update_fsm_level2+0x254>
 8002c68:	bf00      	nop
					}
		
			
			return fsm_lvl2_output;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
				}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f107 0714 	add.w	r7, r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr

08002c78 <blink_playmode_led>:
				
				
void blink_playmode_led(unsigned int * intenvals_param) {
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	unsigned int blinkTime = 150; // count of 900 is about one second (maybe a little more)
 8002c80:	f04f 0396 	mov.w	r3, #150	; 0x96
 8002c84:	60fb      	str	r3, [r7, #12]
	unsigned int curTime = getTime();
 8002c86:	f7fd fcab 	bl	80005e0 <getTime>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	60bb      	str	r3, [r7, #8]
					// change digitvals[4] such that it is alternately in LED6 pattern for 0.17 sec,
					// and OFF for 0.17 sec.
					
					if ( (curTime % (2*blinkTime)) == 0 ) {
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c9a:	fb02 f201 	mul.w	r2, r2, r1
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10d      	bne.n	8002cc0 <blink_playmode_led+0x48>
						// turn LED6 on
						intenvals_param[4] = PLAY_LED;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f103 0310 	add.w	r3, r3, #16
 8002caa:	f04f 020e 	mov.w	r2, #14
 8002cae:	601a      	str	r2, [r3, #0]
						digitvals[4] = PLAY_LED;
 8002cb0:	f240 0310 	movw	r3, #16
 8002cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cb8:	f04f 020e 	mov.w	r2, #14
 8002cbc:	611a      	str	r2, [r3, #16]
 8002cbe:	e016      	b.n	8002cee <blink_playmode_led+0x76>
					} else if ( (curTime % (blinkTime)) == 0 ) {
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	fbb3 f2f2 	udiv	r2, r3, r2
 8002cc8:	68f9      	ldr	r1, [r7, #12]
 8002cca:	fb01 f202 	mul.w	r2, r1, r2
 8002cce:	1a9b      	subs	r3, r3, r2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10c      	bne.n	8002cee <blink_playmode_led+0x76>
					// turn LED6 off
					intenvals_param[4] = OFF;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f103 0310 	add.w	r3, r3, #16
 8002cda:	f04f 020d 	mov.w	r2, #13
 8002cde:	601a      	str	r2, [r3, #0]
					digitvals[4] = OFF;
 8002ce0:	f240 0310 	movw	r3, #16
 8002ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ce8:	f04f 020d 	mov.w	r2, #13
 8002cec:	611a      	str	r2, [r3, #16]
				}
			}
 8002cee:	f107 0710 	add.w	r7, r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop

08002cf8 <blink_reset_led>:
// of digitvals[4], which is a global variable.
// Specifically, it turns off index 4 (which controls the single LEDs) every blinkTime,
// and then turns it back on.
unsigned int prevTime = 0;
unsigned int offset = 0;
void blink_reset_led(unsigned int timeOfLastReset) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
	unsigned int timeSinceLastReset = (getTime() - timeOfLastReset) / 900;
 8002d00:	f7fd fc6e 	bl	80005e0 <getTime>
 8002d04:	4602      	mov	r2, r0
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	1ad2      	subs	r2, r2, r3
 8002d0a:	f24b 33c5 	movw	r3, #46021	; 0xb3c5
 8002d0e:	f2c9 13a2 	movt	r3, #37282	; 0x91a2
 8002d12:	fba3 1302 	umull	r1, r3, r3, r2
 8002d16:	ea4f 2353 	mov.w	r3, r3, lsr #9
 8002d1a:	617b      	str	r3, [r7, #20]
	unsigned int period = 900 / timeSinceLastReset;
 8002d1c:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d26:	613b      	str	r3, [r7, #16]
	unsigned int blinkTime = period/2; // count of 900 is about one second
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8002d2e:	60fb      	str	r3, [r7, #12]
	unsigned int curTime = getTime() + offset;
 8002d30:	f7fd fc56 	bl	80005e0 <getTime>
 8002d34:	4602      	mov	r2, r0
 8002d36:	f240 0338 	movw	r3, #56	; 0x38
 8002d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	18d3      	adds	r3, r2, r3
 8002d42:	60bb      	str	r3, [r7, #8]
					// change digitvals[4] such that it is alternately in LED6 pattern for 0.17 sec,
					// and OFF for 0.17 sec.
	
					// if the timeSinceLastReset increments by a second, then alternate blink once
					if (timeSinceLastReset != prevTime) {
 8002d44:	f240 0334 	movw	r3, #52	; 0x34
 8002d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d030      	beq.n	8002db6 <blink_reset_led+0xbe>
						// alternate
						if (digitvals[4] == WARNING_LED) digitvals[4] = OFF;
 8002d54:	f240 0310 	movw	r3, #16
 8002d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b10      	cmp	r3, #16
 8002d60:	d107      	bne.n	8002d72 <blink_reset_led+0x7a>
 8002d62:	f240 0310 	movw	r3, #16
 8002d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d6a:	f04f 020d 	mov.w	r2, #13
 8002d6e:	611a      	str	r2, [r3, #16]
 8002d70:	e00d      	b.n	8002d8e <blink_reset_led+0x96>
						else if (digitvals[4] == OFF) digitvals[4] = WARNING_LED;
 8002d72:	f240 0310 	movw	r3, #16
 8002d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	2b0d      	cmp	r3, #13
 8002d7e:	d106      	bne.n	8002d8e <blink_reset_led+0x96>
 8002d80:	f240 0310 	movw	r3, #16
 8002d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d88:	f04f 0210 	mov.w	r2, #16
 8002d8c:	611a      	str	r2, [r3, #16]
						// create cumulative time offset that pushes curTime up to next multiple of current period
						offset += curTime % period;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	fbb3 f2f2 	udiv	r2, r3, r2
 8002d96:	6939      	ldr	r1, [r7, #16]
 8002d98:	fb01 f202 	mul.w	r2, r1, r2
 8002d9c:	1a9a      	subs	r2, r3, r2
 8002d9e:	f240 0338 	movw	r3, #56	; 0x38
 8002da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	18d2      	adds	r2, r2, r3
 8002daa:	f240 0338 	movw	r3, #56	; 0x38
 8002dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	e023      	b.n	8002dfe <blink_reset_led+0x106>
					} else {
						if ( (curTime % (2*blinkTime)) == 0 ) {
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8002dc2:	fb02 f201 	mul.w	r2, r2, r1
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d107      	bne.n	8002ddc <blink_reset_led+0xe4>
							digitvals[4] = WARNING_LED;
 8002dcc:	f240 0310 	movw	r3, #16
 8002dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002dd4:	f04f 0210 	mov.w	r2, #16
 8002dd8:	611a      	str	r2, [r3, #16]
 8002dda:	e010      	b.n	8002dfe <blink_reset_led+0x106>
						} else if ( (curTime % (blinkTime)) == 0 ) {
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	fbb3 f2f2 	udiv	r2, r3, r2
 8002de4:	68f9      	ldr	r1, [r7, #12]
 8002de6:	fb01 f202 	mul.w	r2, r1, r2
 8002dea:	1a9b      	subs	r3, r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d106      	bne.n	8002dfe <blink_reset_led+0x106>
						// turn LED6 off
						digitvals[4] = OFF;
 8002df0:	f240 0310 	movw	r3, #16
 8002df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002df8:	f04f 020d 	mov.w	r2, #13
 8002dfc:	611a      	str	r2, [r3, #16]
					}
			}
				
				prevTime = timeSinceLastReset;
 8002dfe:	f240 0334 	movw	r3, #52	; 0x34
 8002e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	601a      	str	r2, [r3, #0]
			}
 8002e0a:	f107 0718 	add.w	r7, r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop

08002e14 <reset_intensity>:
			
			
			
			
void reset_intensity(unsigned int * inten_array) {
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
	inten_array[0] = OFF;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f04f 020d 	mov.w	r2, #13
 8002e22:	601a      	str	r2, [r3, #0]
	inten_array[1] = NEG_SIGN;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f103 0304 	add.w	r3, r3, #4
 8002e2a:	f04f 020c 	mov.w	r2, #12
 8002e2e:	601a      	str	r2, [r3, #0]
	inten_array[2] = 1;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f103 0308 	add.w	r3, r3, #8
 8002e36:	f04f 0201 	mov.w	r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
	inten_array[3] = 0;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f103 030c 	add.w	r3, r3, #12
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
}
 8002e48:	f107 070c 	add.w	r7, r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop

08002e54 <off_disp>:



void off_disp() {
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
	digitvals[0] = digitvals[1] = digitvals[2] = digitvals[3] = OFF;
 8002e58:	f240 0310 	movw	r3, #16
 8002e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e60:	f04f 020d 	mov.w	r2, #13
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	f240 0310 	movw	r3, #16
 8002e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	f240 0310 	movw	r3, #16
 8002e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e78:	609a      	str	r2, [r3, #8]
 8002e7a:	f240 0310 	movw	r3, #16
 8002e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	f240 0310 	movw	r3, #16
 8002e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	f240 0310 	movw	r3, #16
 8002e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	f240 0310 	movw	r3, #16
 8002e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ea0:	601a      	str	r2, [r3, #0]
}
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <zero_disp>:

void zero_disp() {
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
	digitvals[0] = digitvals[1] = digitvals[2] = digitvals[3] = 0;
 8002eac:	f240 0310 	movw	r3, #16
 8002eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	f240 0310 	movw	r3, #16
 8002ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	f240 0310 	movw	r3, #16
 8002ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ecc:	609a      	str	r2, [r3, #8]
 8002ece:	f240 0310 	movw	r3, #16
 8002ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	f240 0310 	movw	r3, #16
 8002edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	f240 0310 	movw	r3, #16
 8002ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	f240 0310 	movw	r3, #16
 8002ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ef4:	601a      	str	r2, [r3, #0]
}
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr

08002efc <main>:

/*----------------------------------------------------------------------------
  MAIN Function
	 *----------------------------------------------------------------------------*/

int main (void) {	
 8002efc:	b5b0      	push	{r4, r5, r7, lr}
 8002efe:	b0a4      	sub	sp, #144	; 0x90
 8002f00:	af00      	add	r7, sp, #0
	unsigned int timeOfLastReset = 0, resetPendingBeginTime = 0;
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	int resetPending = 0;
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	int curFreq = 0, curInten = 0, numTonesPos = 0;
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	67bb      	str	r3, [r7, #120]	; 0x78
	testMode = 1; // start off in test mode(as opposed to review mode)
 8002f2e:	f240 0344 	movw	r3, #68	; 0x44
 8002f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f36:	f04f 0201 	mov.w	r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
	numTones = 0; // init numTones
 8002f3c:	f242 034c 	movw	r3, #8268	; 0x204c
 8002f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
	unsigned int intenvals[5] = {OFF, NEG_SIGN, 1, 0, INTEN_LED}; // intensity display array
 8002f4a:	f643 53b4 	movw	r3, #15796	; 0x3db4
 8002f4e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002f52:	f107 0418 	add.w	r4, r7, #24
 8002f56:	461d      	mov	r5, r3
 8002f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f5c:	682b      	ldr	r3, [r5, #0]
 8002f5e:	6023      	str	r3, [r4, #0]
	
	// The encoder FSM input/output variables. 
	
	// fsm level2 i/o:
	unsigned int encA = 1;
 8002f60:	f04f 0301 	mov.w	r3, #1
 8002f64:	647b      	str	r3, [r7, #68]	; 0x44
	unsigned int encB = 1;
 8002f66:	f04f 0301 	mov.w	r3, #1
 8002f6a:	643b      	str	r3, [r7, #64]	; 0x40
	int fsm_lvl2_output = 0;
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	63fb      	str	r3, [r7, #60]	; 0x3c
	// (fsm level1 input is fsm_lvl2_output, and level1 output doesn't need a variable
	// since it's just an action which is immediately taken)
	
	// The first four elements of freqvals[] correspond to digits on the 7seg display,
	// and the last element is the pattern of red LEDs to be displayed.
	unsigned int buttonIsBeingHit = 0; //buttonIsBeingHit is default FALSE
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	677b      	str	r3, [r7, #116]	; 0x74
	unsigned int actionPerformed = 1;  // actionPerformed is default TRUE
 8002f78:	f04f 0301 	mov.w	r3, #1
 8002f7c:	673b      	str	r3, [r7, #112]	; 0x70
	// Display mode - 0 = intensity, 1 = frequency
	unsigned int displayMode = OFF_DISP_MODE; // default frequency display mode
 8002f7e:	f04f 0302 	mov.w	r3, #2
 8002f82:	66fb      	str	r3, [r7, #108]	; 0x6c
	unsigned int curDisplayMode = displayMode;
 8002f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f86:	66bb      	str	r3, [r7, #104]	; 0x68
  unsigned int playMode = 0;  //default play mode (0 = off, 1 = on)
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	667b      	str	r3, [r7, #100]	; 0x64
	unsigned int freqvals[5] = {0, 1, 2, 5, FREQ_LED};	
 8002f8e:	f643 53c8 	movw	r3, #15816	; 0x3dc8
 8002f92:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002f96:	f107 0404 	add.w	r4, r7, #4
 8002f9a:	461d      	mov	r5, r3
 8002f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fa0:	682b      	ldr	r3, [r5, #0]
 8002fa2:	6023      	str	r3, [r4, #0]
	int i=0, j=0, i_sw = 0;
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	663b      	str	r3, [r7, #96]	; 0x60
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	65bb      	str	r3, [r7, #88]	; 0x58
	
	// Initialize ST32F4 I/O pins controlling LEDs, switches (aka buttons), and rotary encoder.
	mikes_IO_init();	
 8002fb6:	f7fd f8a7 	bl	8000108 <mikes_IO_init>
	
// Initialize display refresh timer interrupt.
// Clock runs at 2.6 MHz apparently (this is how frequently the timer increments according to
// experimental data), so counting up to 0xA28 should give us a 1000kHz interrupt.
	timer_init(0x4380);				
 8002fba:	f44f 4087 	mov.w	r0, #17280	; 0x4380
 8002fbe:	f7fd f947 	bl	8000250 <timer_init>
	
	// Initialize timekeeping timer interrupt.  Counting up to 0x107AC40 should give us a 0.01 second
	// interrupt, upon which we increment the wall clock.  So the wall clock will be the time passed
	// in hundredths of seconds.
	wallClk_init(0x4444);		
 8002fc2:	f244 4044 	movw	r0, #17476	; 0x4444
 8002fc6:	f7fd f97c 	bl	80002c2 <wallClk_init>
 8002fca:	e000      	b.n	8002fce <main+0xd2>
				}
			}
		}
		
		
	}
 8002fcc:	bf00      	nop
		// 2 - Check to see if a switch has just been released.
		// 3 - Perform the associated action once if a switch has just been hit.
	while(1) {   
					
			/**** Check to see if a button has just been hit. ****/
			if(!buttonIsBeingHit) {
 8002fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d125      	bne.n	8003020 <main+0x124>
				for (i_sw=1; i_sw<=12; i_sw++) {	
 8002fd4:	f04f 0301 	mov.w	r3, #1
 8002fd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fda:	e01e      	b.n	800301a <main+0x11e>
					// If a button is hit when no other button is being hit: 
					if (!mikes_get_switch(i_sw)) {
 8002fdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd f9ff 	bl	80003e2 <mikes_get_switch>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d113      	bne.n	8003012 <main+0x116>
						// 1) Set being-hit status.
						buttonIsBeingHit = 1;
 8002fea:	f04f 0301 	mov.w	r3, #1
 8002fee:	677b      	str	r3, [r7, #116]	; 0x74
						actionPerformed = 0;
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	673b      	str	r3, [r7, #112]	; 0x70
						// 2) Wait out the bounce.
						for (j = 0; j < 1500; j++) {};		
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ffc:	e003      	b.n	8003006 <main+0x10a>
 8002ffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003000:	f103 0301 	add.w	r3, r3, #1
 8003004:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003006:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003008:	f240 53db 	movw	r3, #1499	; 0x5db
 800300c:	429a      	cmp	r2, r3
 800300e:	ddf6      	ble.n	8002ffe <main+0x102>
						// 3) Exit loop (note that i will still be the number of the switch that was hit). 
						break;
 8003010:	e006      	b.n	8003020 <main+0x124>
		// 3 - Perform the associated action once if a switch has just been hit.
	while(1) {   
					
			/**** Check to see if a button has just been hit. ****/
			if(!buttonIsBeingHit) {
				for (i_sw=1; i_sw<=12; i_sw++) {	
 8003012:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003014:	f103 0301 	add.w	r3, r3, #1
 8003018:	65bb      	str	r3, [r7, #88]	; 0x58
 800301a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800301c:	2b0c      	cmp	r3, #12
 800301e:	dddd      	ble.n	8002fdc <main+0xe0>
					}
				}
			}

			/*** Check to see if the button has just been released. ****/
			if (buttonIsBeingHit && mikes_get_switch(i_sw)) {
 8003020:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003022:	2b00      	cmp	r3, #0
 8003024:	d016      	beq.n	8003054 <main+0x158>
 8003026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003028:	4618      	mov	r0, r3
 800302a:	f7fd f9da 	bl	80003e2 <mikes_get_switch>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00f      	beq.n	8003054 <main+0x158>
				buttonIsBeingHit = 0;
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	677b      	str	r3, [r7, #116]	; 0x74
				// Wait out the bounce here, too.
				for (j = 0; j < 1500; j++) {};
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003040:	e003      	b.n	800304a <main+0x14e>
 8003042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003044:	f103 0301 	add.w	r3, r3, #1
 8003048:	65fb      	str	r3, [r7, #92]	; 0x5c
 800304a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800304c:	f240 53db 	movw	r3, #1499	; 0x5db
 8003050:	429a      	cmp	r2, r3
 8003052:	ddf6      	ble.n	8003042 <main+0x146>
			}
	
			/**** Perform the action associated with a particular button being hit. ****/
			if (!actionPerformed) {
 8003054:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003056:	2b00      	cmp	r3, #0
 8003058:	f040 843a 	bne.w	80038d0 <main+0x9d4>
				actionPerformed = 1;
 800305c:	f04f 0301 	mov.w	r3, #1
 8003060:	673b      	str	r3, [r7, #112]	; 0x70
				switch (i_sw) {
 8003062:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003064:	f103 33ff 	add.w	r3, r3, #4294967295
 8003068:	2b0b      	cmp	r3, #11
 800306a:	f200 8431 	bhi.w	80038d0 <main+0x9d4>
 800306e:	a201      	add	r2, pc, #4	; (adr r2, 8003074 <main+0x178>)
 8003070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003074:	080030a5 	.word	0x080030a5
 8003078:	08003105 	.word	0x08003105
 800307c:	08003155 	.word	0x08003155
 8003080:	080031b5 	.word	0x080031b5
 8003084:	08003205 	.word	0x08003205
 8003088:	08003265 	.word	0x08003265
 800308c:	080032b5 	.word	0x080032b5
 8003090:	08003315 	.word	0x08003315
 8003094:	08003365 	.word	0x08003365
 8003098:	080033cd 	.word	0x080033cd
 800309c:	080034d1 	.word	0x080034d1
 80030a0:	0800376f 	.word	0x0800376f
					case 1:		
						if (displayMode == FREQ_DISP_MODE && testMode && !resetPending) {
 80030a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	f040 83fb 	bne.w	80038a2 <main+0x9a6>
 80030ac:	f240 0344 	movw	r3, #68	; 0x44
 80030b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 83f3 	beq.w	80038a2 <main+0x9a6>
 80030bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f040 83ee 	bne.w	80038a2 <main+0x9a6>
							digitvals[0] = freqvals[0] = (freqvals[0] + 1) % 10;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f103 0101 	add.w	r1, r3, #1
 80030cc:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 80030d0:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 80030d4:	fba3 2301 	umull	r2, r3, r3, r1
 80030d8:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 80030dc:	4613      	mov	r3, r2
 80030de:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80030e2:	189b      	adds	r3, r3, r2
 80030e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80030e8:	1aca      	subs	r2, r1, r3
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	f240 0310 	movw	r3, #16
 80030f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030f6:	601a      	str	r2, [r3, #0]
							reset_intensity(intenvals);
 80030f8:	f107 0318 	add.w	r3, r7, #24
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff fe89 	bl	8002e14 <reset_intensity>
						}
						break;		
 8003102:	e3ce      	b.n	80038a2 <main+0x9a6>
						
					case 2:
						if (displayMode == FREQ_DISP_MODE && testMode && !resetPending) {
 8003104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003106:	2b01      	cmp	r3, #1
 8003108:	f040 83cd 	bne.w	80038a6 <main+0x9aa>
 800310c:	f240 0344 	movw	r3, #68	; 0x44
 8003110:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 83c5 	beq.w	80038a6 <main+0x9aa>
 800311c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003120:	2b00      	cmp	r3, #0
 8003122:	f040 83c0 	bne.w	80038a6 <main+0x9aa>
							if (!freqvals[0]) {
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d103      	bne.n	8003134 <main+0x238>
								freqvals[0] = 9;
 800312c:	f04f 0309 	mov.w	r3, #9
 8003130:	607b      	str	r3, [r7, #4]
 8003132:	e003      	b.n	800313c <main+0x240>
							} else {
								freqvals[0]--;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f103 33ff 	add.w	r3, r3, #4294967295
 800313a:	607b      	str	r3, [r7, #4]
							}
							digitvals[0] = freqvals[0];
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	f240 0310 	movw	r3, #16
 8003142:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003146:	601a      	str	r2, [r3, #0]
							reset_intensity(intenvals);
 8003148:	f107 0318 	add.w	r3, r7, #24
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fe61 	bl	8002e14 <reset_intensity>
						}
						break;
 8003152:	e3a8      	b.n	80038a6 <main+0x9aa>
						
					case 3:
						if (displayMode == FREQ_DISP_MODE && testMode && !resetPending) {
 8003154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003156:	2b01      	cmp	r3, #1
 8003158:	f040 83a7 	bne.w	80038aa <main+0x9ae>
 800315c:	f240 0344 	movw	r3, #68	; 0x44
 8003160:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 839f 	beq.w	80038aa <main+0x9ae>
 800316c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003170:	2b00      	cmp	r3, #0
 8003172:	f040 839a 	bne.w	80038aa <main+0x9ae>
							reset_intensity(intenvals);
 8003176:	f107 0318 	add.w	r3, r7, #24
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fe4a 	bl	8002e14 <reset_intensity>
							digitvals[1] = freqvals[1] = (freqvals[1] + 1) % 10;
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f103 0101 	add.w	r1, r3, #1
 8003186:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 800318a:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 800318e:	fba3 2301 	umull	r2, r3, r3, r1
 8003192:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 8003196:	4613      	mov	r3, r2
 8003198:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800319c:	189b      	adds	r3, r3, r2
 800319e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80031a2:	1aca      	subs	r2, r1, r3
 80031a4:	60ba      	str	r2, [r7, #8]
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	f240 0310 	movw	r3, #16
 80031ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031b0:	605a      	str	r2, [r3, #4]
					  }
						break;
 80031b2:	e37a      	b.n	80038aa <main+0x9ae>
						
					case 4:
						if (displayMode == FREQ_DISP_MODE && testMode && !resetPending) {
 80031b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	f040 8379 	bne.w	80038ae <main+0x9b2>
 80031bc:	f240 0344 	movw	r3, #68	; 0x44
 80031c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 8371 	beq.w	80038ae <main+0x9b2>
 80031cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f040 836c 	bne.w	80038ae <main+0x9b2>
							reset_intensity(intenvals);
 80031d6:	f107 0318 	add.w	r3, r7, #24
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff fe1a 	bl	8002e14 <reset_intensity>
							if (!freqvals[1]) {
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d103      	bne.n	80031ee <main+0x2f2>
								freqvals[1] = 9;
 80031e6:	f04f 0309 	mov.w	r3, #9
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	e003      	b.n	80031f6 <main+0x2fa>
							} else {
								freqvals[1]--;
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	f103 33ff 	add.w	r3, r3, #4294967295
 80031f4:	60bb      	str	r3, [r7, #8]
							}
							digitvals[1] = freqvals[1];
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	f240 0310 	movw	r3, #16
 80031fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003200:	605a      	str	r2, [r3, #4]
						}
						break;
 8003202:	e354      	b.n	80038ae <main+0x9b2>
						
					case 5:
						if (displayMode == FREQ_DISP_MODE && testMode && !resetPending) {
 8003204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003206:	2b01      	cmp	r3, #1
 8003208:	f040 8353 	bne.w	80038b2 <main+0x9b6>
 800320c:	f240 0344 	movw	r3, #68	; 0x44
 8003210:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 834b 	beq.w	80038b2 <main+0x9b6>
 800321c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003220:	2b00      	cmp	r3, #0
 8003222:	f040 8346 	bne.w	80038b2 <main+0x9b6>
							reset_intensity(intenvals);
 8003226:	f107 0318 	add.w	r3, r7, #24
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff fdf2 	bl	8002e14 <reset_intensity>
							digitvals[2] = freqvals[2] = (freqvals[2] + 1) % 10;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f103 0101 	add.w	r1, r3, #1
 8003236:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 800323a:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 800323e:	fba3 2301 	umull	r2, r3, r3, r1
 8003242:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 8003246:	4613      	mov	r3, r2
 8003248:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800324c:	189b      	adds	r3, r3, r2
 800324e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003252:	1aca      	subs	r2, r1, r3
 8003254:	60fa      	str	r2, [r7, #12]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	f240 0310 	movw	r3, #16
 800325c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003260:	609a      	str	r2, [r3, #8]
						}
						break;
 8003262:	e326      	b.n	80038b2 <main+0x9b6>
						
					case 6:
						if (displayMode == FREQ_DISP_MODE && testMode && !resetPending) {
 8003264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003266:	2b01      	cmp	r3, #1
 8003268:	f040 8325 	bne.w	80038b6 <main+0x9ba>
 800326c:	f240 0344 	movw	r3, #68	; 0x44
 8003270:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 831d 	beq.w	80038b6 <main+0x9ba>
 800327c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003280:	2b00      	cmp	r3, #0
 8003282:	f040 8318 	bne.w	80038b6 <main+0x9ba>
							reset_intensity(intenvals);
 8003286:	f107 0318 	add.w	r3, r7, #24
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fdc2 	bl	8002e14 <reset_intensity>
							if (!freqvals[2]) {
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d103      	bne.n	800329e <main+0x3a2>
								freqvals[2] = 9;
 8003296:	f04f 0309 	mov.w	r3, #9
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	e003      	b.n	80032a6 <main+0x3aa>
							} else {
								freqvals[2]--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f103 33ff 	add.w	r3, r3, #4294967295
 80032a4:	60fb      	str	r3, [r7, #12]
							}
							digitvals[2] = freqvals[2];
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	f240 0310 	movw	r3, #16
 80032ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032b0:	609a      	str	r2, [r3, #8]
						}
						break;
 80032b2:	e300      	b.n	80038b6 <main+0x9ba>
						
					case 7:
						if (displayMode == FREQ_DISP_MODE && testMode && !resetPending) {
 80032b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	f040 82ff 	bne.w	80038ba <main+0x9be>
 80032bc:	f240 0344 	movw	r3, #68	; 0x44
 80032c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 82f7 	beq.w	80038ba <main+0x9be>
 80032cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f040 82f2 	bne.w	80038ba <main+0x9be>
							reset_intensity(intenvals);
 80032d6:	f107 0318 	add.w	r3, r7, #24
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff fd9a 	bl	8002e14 <reset_intensity>
							digitvals[3] = freqvals[3] = (freqvals[3] + 1) % 10;
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f103 0101 	add.w	r1, r3, #1
 80032e6:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 80032ea:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 80032ee:	fba3 2301 	umull	r2, r3, r3, r1
 80032f2:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 80032f6:	4613      	mov	r3, r2
 80032f8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80032fc:	189b      	adds	r3, r3, r2
 80032fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003302:	1aca      	subs	r2, r1, r3
 8003304:	613a      	str	r2, [r7, #16]
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	f240 0310 	movw	r3, #16
 800330c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003310:	60da      	str	r2, [r3, #12]
						}
						break;
 8003312:	e2d2      	b.n	80038ba <main+0x9be>
						
					case 8:
						if (displayMode == FREQ_DISP_MODE && testMode && !resetPending) {
 8003314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003316:	2b01      	cmp	r3, #1
 8003318:	f040 82d1 	bne.w	80038be <main+0x9c2>
 800331c:	f240 0344 	movw	r3, #68	; 0x44
 8003320:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 82c9 	beq.w	80038be <main+0x9c2>
 800332c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003330:	2b00      	cmp	r3, #0
 8003332:	f040 82c4 	bne.w	80038be <main+0x9c2>
							reset_intensity(intenvals);
 8003336:	f107 0318 	add.w	r3, r7, #24
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff fd6a 	bl	8002e14 <reset_intensity>
							if (!freqvals[3]) {
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d103      	bne.n	800334e <main+0x452>
								freqvals[3] = 9;
 8003346:	f04f 0309 	mov.w	r3, #9
 800334a:	613b      	str	r3, [r7, #16]
 800334c:	e003      	b.n	8003356 <main+0x45a>
							} else {
								freqvals[3]--;
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	f103 33ff 	add.w	r3, r3, #4294967295
 8003354:	613b      	str	r3, [r7, #16]
							}
							digitvals[3] = freqvals[3];
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	f240 0310 	movw	r3, #16
 800335c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003360:	60da      	str	r2, [r3, #12]
						}
						break;
 8003362:	e2ac      	b.n	80038be <main+0x9c2>
						
					case 9:
						if(!resetPending) {
 8003364:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003368:	2b00      	cmp	r3, #0
 800336a:	f040 82aa 	bne.w	80038c2 <main+0x9c6>
						// Change display values to Test Frequency.
						displayMode = FREQ_DISP_MODE;
 800336e:	f04f 0301 	mov.w	r3, #1
 8003372:	66fb      	str	r3, [r7, #108]	; 0x6c
					  playMode = 0;
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	667b      	str	r3, [r7, #100]	; 0x64
						if (testMode) intenvals[4] = INTEN_LED;
 800337a:	f240 0344 	movw	r3, #68	; 0x44
 800337e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <main+0x492>
 8003388:	f04f 0311 	mov.w	r3, #17
 800338c:	62bb      	str	r3, [r7, #40]	; 0x28
					
					  digitvals[0] = freqvals[0];
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	f240 0310 	movw	r3, #16
 8003394:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003398:	601a      	str	r2, [r3, #0]
						digitvals[1] = freqvals[1];
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	f240 0310 	movw	r3, #16
 80033a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033a4:	605a      	str	r2, [r3, #4]
						digitvals[2] = freqvals[2];
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	f240 0310 	movw	r3, #16
 80033ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033b0:	609a      	str	r2, [r3, #8]
						digitvals[3] = freqvals[3];
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	f240 0310 	movw	r3, #16
 80033b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033bc:	60da      	str	r2, [r3, #12]
						digitvals[4] = freqvals[4];
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	f240 0310 	movw	r3, #16
 80033c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033c8:	611a      	str	r2, [r3, #16]
						}
						break;
 80033ca:	e27a      	b.n	80038c2 <main+0x9c6>
					
					case 10:
						// Intensity display button has just been hit.
					if(!resetPending) {
 80033cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f040 8278 	bne.w	80038c6 <main+0x9ca>
					// Do different stuff for each 
						switch (displayMode) {
 80033d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d027      	beq.n	800342c <main+0x530>
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d350      	bcc.n	8003482 <main+0x586>
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d174      	bne.n	80034ce <main+0x5d2>
							
							case OFF_DISP_MODE:
							playMode = 0;
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	667b      	str	r3, [r7, #100]	; 0x64
							intenvals[4] = INTEN_LED;
 80033ea:	f04f 0311 	mov.w	r3, #17
 80033ee:	62bb      	str	r3, [r7, #40]	; 0x28
							for (i=0; i<=4; i++) digitvals[i] = intenvals[i];
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	663b      	str	r3, [r7, #96]	; 0x60
 80033f6:	e012      	b.n	800341e <main+0x522>
 80033f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033fa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80033fe:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003402:	18d3      	adds	r3, r2, r3
 8003404:	f853 1c78 	ldr.w	r1, [r3, #-120]
 8003408:	f240 0310 	movw	r3, #16
 800340c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003410:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003418:	f103 0301 	add.w	r3, r3, #1
 800341c:	663b      	str	r3, [r7, #96]	; 0x60
 800341e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003420:	2b04      	cmp	r3, #4
 8003422:	dde9      	ble.n	80033f8 <main+0x4fc>
							displayMode = INTEN_DISP_MODE;
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	66fb      	str	r3, [r7, #108]	; 0x6c
							break;
 800342a:	e050      	b.n	80034ce <main+0x5d2>
							
						  case FREQ_DISP_MODE:
							playMode = 0;
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	667b      	str	r3, [r7, #100]	; 0x64
							if (testMode) intenvals[4] = INTEN_LED;
 8003432:	f240 0344 	movw	r3, #68	; 0x44
 8003436:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <main+0x54a>
 8003440:	f04f 0311 	mov.w	r3, #17
 8003444:	62bb      	str	r3, [r7, #40]	; 0x28
							for (i=0; i<=4; i++) digitvals[i] = intenvals[i];
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	663b      	str	r3, [r7, #96]	; 0x60
 800344c:	e012      	b.n	8003474 <main+0x578>
 800344e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003450:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003454:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003458:	18d3      	adds	r3, r2, r3
 800345a:	f853 1c78 	ldr.w	r1, [r3, #-120]
 800345e:	f240 0310 	movw	r3, #16
 8003462:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003466:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800346c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800346e:	f103 0301 	add.w	r3, r3, #1
 8003472:	663b      	str	r3, [r7, #96]	; 0x60
 8003474:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003476:	2b04      	cmp	r3, #4
 8003478:	dde9      	ble.n	800344e <main+0x552>
							displayMode = INTEN_DISP_MODE;
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	66fb      	str	r3, [r7, #108]	; 0x6c
							break;
 8003480:	e025      	b.n	80034ce <main+0x5d2>
							
						  case INTEN_DISP_MODE:
							if (testMode) {
 8003482:	f240 0344 	movw	r3, #68	; 0x44
 8003486:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d01d      	beq.n	80034cc <main+0x5d0>
								playMode = !playMode;
 8003490:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003492:	2b00      	cmp	r3, #0
 8003494:	bf14      	ite	ne
 8003496:	2300      	movne	r3, #0
 8003498:	2301      	moveq	r3, #1
 800349a:	667b      	str	r3, [r7, #100]	; 0x64
								if (playMode) {
 800349c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <main+0x5bc>
									intenvals[4] = PLAY_LED;
 80034a2:	f04f 030e 	mov.w	r3, #14
 80034a6:	62bb      	str	r3, [r7, #40]	; 0x28
									digitvals[4] = PLAY_LED;
 80034a8:	f240 0310 	movw	r3, #16
 80034ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80034b0:	f04f 020e 	mov.w	r2, #14
 80034b4:	611a      	str	r2, [r3, #16]
								} else {
									intenvals[4] = INTEN_LED;
									digitvals[4] = INTEN_LED;
								}
						}
							break;
 80034b6:	e009      	b.n	80034cc <main+0x5d0>
								playMode = !playMode;
								if (playMode) {
									intenvals[4] = PLAY_LED;
									digitvals[4] = PLAY_LED;
								} else {
									intenvals[4] = INTEN_LED;
 80034b8:	f04f 0311 	mov.w	r3, #17
 80034bc:	62bb      	str	r3, [r7, #40]	; 0x28
									digitvals[4] = INTEN_LED;
 80034be:	f240 0310 	movw	r3, #16
 80034c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80034c6:	f04f 0211 	mov.w	r2, #17
 80034ca:	611a      	str	r2, [r3, #16]
								}
						}
							break;
 80034cc:	bf00      	nop
						}
					}
						break;
 80034ce:	e1fa      	b.n	80038c6 <main+0x9ca>
					
					case 11:
						// get time button was hit
						timeOfLastReset = getTime();	
 80034d0:	f7fd f886 	bl	80005e0 <getTime>
 80034d4:	4603      	mov	r3, r0
 80034d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					
						/* This button deletes a tone from the tone array (when held < 1s). */
						if (displayMode != OFF_DISP_MODE) {
 80034da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034dc:	2b02      	cmp	r3, #2
 80034de:	f000 81f4 	beq.w	80038ca <main+0x9ce>
							int timeStart = getTime();
 80034e2:	f7fd f87d 	bl	80005e0 <getTime>
 80034e6:	4603      	mov	r3, r0
 80034e8:	63bb      	str	r3, [r7, #56]	; 0x38
							int timeHeld = 0;
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	637b      	str	r3, [r7, #52]	; 0x34
							int alreadyHere = 0;
 80034f0:	f04f 0300 	mov.w	r3, #0
 80034f4:	657b      	str	r3, [r7, #84]	; 0x54
 80034f6:	e000      	b.n	80034fa <main+0x5fe>
								  break;
								}
								// if button held longer than 10s, RESET: inten/freq/digitvals, turn to OFF_DISP_MODE, erase all response,
								// play mode = 0, testMode = 1, set timeOfLastReset						
							
							}
 80034f8:	bf00      	nop
							int timeStart = getTime();
							int timeHeld = 0;
							int alreadyHere = 0;
							while(1) {
								// update time held			
								timeHeld = getTime() - timeStart;
 80034fa:	f7fd f871 	bl	80005e0 <getTime>
 80034fe:	4602      	mov	r2, r0
 8003500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	637b      	str	r3, [r7, #52]	; 0x34
								
								// if button released before 1s, just delete last tone and break.
								if (mikes_get_switch(11) && timeHeld < 900) {
 8003506:	f04f 000b 	mov.w	r0, #11
 800350a:	f7fc ff6a 	bl	80003e2 <mikes_get_switch>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d021      	beq.n	8003558 <main+0x65c>
 8003514:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003516:	f240 3383 	movw	r3, #899	; 0x383
 800351a:	429a      	cmp	r2, r3
 800351c:	dc1c      	bgt.n	8003558 <main+0x65c>
									if (testMode == 0) break;
 800351e:	f240 0344 	movw	r3, #68	; 0x44
 8003522:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 811a 	beq.w	8003762 <main+0x866>
									if (numTones > 0) numTones--; // "free"		
 800352e:	f242 034c 	movw	r3, #8268	; 0x204c
 8003532:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	f340 8114 	ble.w	8003766 <main+0x86a>
 800353e:	f242 034c 	movw	r3, #8268	; 0x204c
 8003542:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f103 32ff 	add.w	r2, r3, #4294967295
 800354c:	f242 034c 	movw	r3, #8268	; 0x204c
 8003550:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003554:	601a      	str	r2, [r3, #0]
									break;
 8003556:	e106      	b.n	8003766 <main+0x86a>
								}								
								// if button held between 1 and 5s, enter review mode and break. (also turn on LED3)
								// TOGGLE REVIEW MODE
								if (timeHeld >= 900 && timeHeld < 4500 && !alreadyHere) {
 8003558:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800355a:	f240 3383 	movw	r3, #899	; 0x383
 800355e:	429a      	cmp	r2, r3
 8003560:	f340 80e1 	ble.w	8003726 <main+0x82a>
 8003564:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003566:	f241 1393 	movw	r3, #4499	; 0x1193
 800356a:	429a      	cmp	r2, r3
 800356c:	f300 80db 	bgt.w	8003726 <main+0x82a>
 8003570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003572:	2b00      	cmp	r3, #0
 8003574:	f040 80d7 	bne.w	8003726 <main+0x82a>
									alreadyHere = 1;
 8003578:	f04f 0301 	mov.w	r3, #1
 800357c:	657b      	str	r3, [r7, #84]	; 0x54
									if (numTones <= 0) continue;
 800357e:	f242 034c 	movw	r3, #8268	; 0x204c
 8003582:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	f340 80e6 	ble.w	800375a <main+0x85e>
									if (testMode) {
 800358e:	f240 0344 	movw	r3, #68	; 0x44
 8003592:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d061      	beq.n	8003660 <main+0x764>
										testMode = 0;  // now in review Mode!		
 800359c:	f240 0344 	movw	r3, #68	; 0x44
 80035a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80035a4:	f04f 0200 	mov.w	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
										// save the current frequency, intensity
										curFreq = arrtosi(freqvals);
 80035aa:	f107 0304 	add.w	r3, r7, #4
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff f928 	bl	8002804 <arrtosi>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
										curInten = arrtosi(intenvals);
 80035ba:	f107 0318 	add.w	r3, r7, #24
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff f920 	bl	8002804 <arrtosi>
 80035c4:	4603      	mov	r3, r0
 80035c6:	67fb      	str	r3, [r7, #124]	; 0x7c
										numTonesPos = numTones - 1;
 80035c8:	f242 034c 	movw	r3, #8268	; 0x204c
 80035cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80035d6:	67bb      	str	r3, [r7, #120]	; 0x78
										// update the display vals with the most recent saved intensity / frequency, and set both to LED3
										sitoarr(freqvals, toneArr[numTonesPos].frequency);
 80035d8:	f240 0348 	movw	r3, #72	; 0x48
 80035dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80035e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80035e2:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80035e6:	f107 0204 	add.w	r2, r7, #4
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	f7ff f95d 	bl	80028ac <sitoarr>
										sitoarr(intenvals, toneArr[numTonesPos].intensity);
 80035f2:	f240 0248 	movw	r2, #72	; 0x48
 80035f6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80035fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035fc:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8003600:	18d3      	adds	r3, r2, r3
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f107 0218 	add.w	r2, r7, #24
 8003608:	4610      	mov	r0, r2
 800360a:	4619      	mov	r1, r3
 800360c:	f7ff f94e 	bl	80028ac <sitoarr>
										intenvals[4] = freqvals[4] = REVIEW_LED;
 8003610:	f04f 030f 	mov.w	r3, #15
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	62bb      	str	r3, [r7, #40]	; 0x28
										int iter = 0;
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	653b      	str	r3, [r7, #80]	; 0x50
										for (iter=0; iter<=4; iter++) { digitvals[iter] = intenvals[iter]; }
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	653b      	str	r3, [r7, #80]	; 0x50
 8003626:	e012      	b.n	800364e <main+0x752>
 8003628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800362a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800362e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003632:	18d3      	adds	r3, r2, r3
 8003634:	f853 1c78 	ldr.w	r1, [r3, #-120]
 8003638:	f240 0310 	movw	r3, #16
 800363c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003640:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003648:	f103 0301 	add.w	r3, r3, #1
 800364c:	653b      	str	r3, [r7, #80]	; 0x50
 800364e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003650:	2b04      	cmp	r3, #4
 8003652:	dde9      	ble.n	8003628 <main+0x72c>
										curDisplayMode = displayMode;
 8003654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003656:	66bb      	str	r3, [r7, #104]	; 0x68
										displayMode = INTEN_DISP_MODE;
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	66fb      	str	r3, [r7, #108]	; 0x6c
										} else if (displayMode == INTEN_DISP_MODE) {
											for (it=0; it<=4; it++) digitvals[it] = intenvals[it];
										}
										
									}
									continue;
 800365e:	e07e      	b.n	800375e <main+0x862>
										int iter = 0;
										for (iter=0; iter<=4; iter++) { digitvals[iter] = intenvals[iter]; }
										curDisplayMode = displayMode;
										displayMode = INTEN_DISP_MODE;
									}
									else if (!testMode) {
 8003660:	f240 0344 	movw	r3, #68	; 0x44
 8003664:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d177      	bne.n	800375e <main+0x862>
										// go back to test mode from review mode
										testMode = 1;
 800366e:	f240 0344 	movw	r3, #68	; 0x44
 8003672:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003676:	f04f 0201 	mov.w	r2, #1
 800367a:	601a      	str	r2, [r3, #0]
										displayMode = curDisplayMode;
 800367c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800367e:	66fb      	str	r3, [r7, #108]	; 0x6c
										sitoarr(freqvals, curFreq);
 8003680:	f107 0304 	add.w	r3, r7, #4
 8003684:	4618      	mov	r0, r3
 8003686:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800368a:	f7ff f90f 	bl	80028ac <sitoarr>
										freqvals[4] = FREQ_LED;
 800368e:	f04f 030a 	mov.w	r3, #10
 8003692:	617b      	str	r3, [r7, #20]
										sitoarr(intenvals, curInten);
 8003694:	f107 0318 	add.w	r3, r7, #24
 8003698:	4618      	mov	r0, r3
 800369a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800369c:	f7ff f906 	bl	80028ac <sitoarr>
										intenvals[4] = INTEN_LED;
 80036a0:	f04f 0311 	mov.w	r3, #17
 80036a4:	62bb      	str	r3, [r7, #40]	; 0x28
										
										// set digitvals back
										int it = 0;
 80036a6:	f04f 0300 	mov.w	r3, #0
 80036aa:	64fb      	str	r3, [r7, #76]	; 0x4c
										if (displayMode == FREQ_DISP_MODE) {
 80036ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d11a      	bne.n	80036e8 <main+0x7ec>
											for (it=0; it<=4; it++) digitvals[it] = freqvals[it];
 80036b2:	f04f 0300 	mov.w	r3, #0
 80036b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036b8:	e012      	b.n	80036e0 <main+0x7e4>
 80036ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036bc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80036c0:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80036c4:	18d3      	adds	r3, r2, r3
 80036c6:	f853 1c8c 	ldr.w	r1, [r3, #-140]
 80036ca:	f240 0310 	movw	r3, #16
 80036ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80036d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80036d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036da:	f103 0301 	add.w	r3, r3, #1
 80036de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	dde9      	ble.n	80036ba <main+0x7be>
 80036e6:	e01d      	b.n	8003724 <main+0x828>
										} else if (displayMode == INTEN_DISP_MODE) {
 80036e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d137      	bne.n	800375e <main+0x862>
											for (it=0; it<=4; it++) digitvals[it] = intenvals[it];
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036f4:	e012      	b.n	800371c <main+0x820>
 80036f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036f8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80036fc:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003700:	18d3      	adds	r3, r2, r3
 8003702:	f853 1c78 	ldr.w	r1, [r3, #-120]
 8003706:	f240 0310 	movw	r3, #16
 800370a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800370e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003716:	f103 0301 	add.w	r3, r3, #1
 800371a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800371c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800371e:	2b04      	cmp	r3, #4
 8003720:	dde9      	ble.n	80036f6 <main+0x7fa>
										}
										
									}
									continue;
 8003722:	e01c      	b.n	800375e <main+0x862>
 8003724:	e01b      	b.n	800375e <main+0x862>
									
								}
								
								// if switch released after review toggle, but before reset, just break
								if (alreadyHere && mikes_get_switch(11)) {
 8003726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003728:	2b00      	cmp	r3, #0
 800372a:	d006      	beq.n	800373a <main+0x83e>
 800372c:	f04f 000b 	mov.w	r0, #11
 8003730:	f7fc fe57 	bl	80003e2 <mikes_get_switch>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d117      	bne.n	800376a <main+0x86e>
									break;
								}
								
								// if button held longer than 5s, start blinking led5 at rate w (erase warning) and continue
								if (timeHeld >= 4500) {
 800373a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800373c:	f241 1393 	movw	r3, #4499	; 0x1193
 8003740:	429a      	cmp	r2, r3
 8003742:	f77f aed9 	ble.w	80034f8 <main+0x5fc>
								  resetPending = 1;
 8003746:	f04f 0301 	mov.w	r3, #1
 800374a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
									resetPendingBeginTime= getTime();
 800374e:	f7fc ff47 	bl	80005e0 <getTime>
 8003752:	4603      	mov	r3, r0
 8003754:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
								  break;
 8003758:	e008      	b.n	800376c <main+0x870>
								}								
								// if button held between 1 and 5s, enter review mode and break. (also turn on LED3)
								// TOGGLE REVIEW MODE
								if (timeHeld >= 900 && timeHeld < 4500 && !alreadyHere) {
									alreadyHere = 1;
									if (numTones <= 0) continue;
 800375a:	bf00      	nop
 800375c:	e000      	b.n	8003760 <main+0x864>
										} else if (displayMode == INTEN_DISP_MODE) {
											for (it=0; it<=4; it++) digitvals[it] = intenvals[it];
										}
										
									}
									continue;
 800375e:	bf00      	nop
								  break;
								}
								// if button held longer than 10s, RESET: inten/freq/digitvals, turn to OFF_DISP_MODE, erase all response,
								// play mode = 0, testMode = 1, set timeOfLastReset						
							
							}
 8003760:	e6ca      	b.n	80034f8 <main+0x5fc>
								// update time held			
								timeHeld = getTime() - timeStart;
								
								// if button released before 1s, just delete last tone and break.
								if (mikes_get_switch(11) && timeHeld < 900) {
									if (testMode == 0) break;
 8003762:	bf00      	nop
 8003764:	e002      	b.n	800376c <main+0x870>
									if (numTones > 0) numTones--; // "free"		
									break;
 8003766:	bf00      	nop
 8003768:	e000      	b.n	800376c <main+0x870>
									
								}
								
								// if switch released after review toggle, but before reset, just break
								if (alreadyHere && mikes_get_switch(11)) {
									break;
 800376a:	bf00      	nop
								// if button held longer than 10s, RESET: inten/freq/digitvals, turn to OFF_DISP_MODE, erase all response,
								// play mode = 0, testMode = 1, set timeOfLastReset						
							
							}
						}						
						break;
 800376c:	e0ad      	b.n	80038ca <main+0x9ce>
					
					case 12:
						/* This button saves a tone to the tone array. */
						if (displayMode != OFF_DISP_MODE && !resetPending) {
 800376e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003770:	2b02      	cmp	r3, #2
 8003772:	f000 80ac 	beq.w	80038ce <main+0x9d2>
 8003776:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800377a:	2b00      	cmp	r3, #0
 800377c:	f040 80a7 	bne.w	80038ce <main+0x9d2>
							if (testMode == 1) {
 8003780:	f240 0344 	movw	r3, #68	; 0x44
 8003784:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d130      	bne.n	80037f0 <main+0x8f4>
							toneArr[numTones].frequency = arrtosi(freqvals);
 800378e:	f242 034c 	movw	r3, #8268	; 0x204c
 8003792:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003796:	681c      	ldr	r4, [r3, #0]
 8003798:	f107 0304 	add.w	r3, r7, #4
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff f831 	bl	8002804 <arrtosi>
 80037a2:	4602      	mov	r2, r0
 80037a4:	f240 0348 	movw	r3, #72	; 0x48
 80037a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037ac:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
							toneArr[numTones].intensity = arrtosi(intenvals);
 80037b0:	f242 034c 	movw	r3, #8268	; 0x204c
 80037b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037b8:	681c      	ldr	r4, [r3, #0]
 80037ba:	f107 0318 	add.w	r3, r7, #24
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff f820 	bl	8002804 <arrtosi>
 80037c4:	4601      	mov	r1, r0
 80037c6:	f240 0248 	movw	r2, #72	; 0x48
 80037ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80037ce:	ea4f 03c4 	mov.w	r3, r4, lsl #3
 80037d2:	18d3      	adds	r3, r2, r3
 80037d4:	6059      	str	r1, [r3, #4]
							numTones++; //numTones always points to next free space.
 80037d6:	f242 034c 	movw	r3, #8268	; 0x204c
 80037da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f103 0201 	add.w	r2, r3, #1
 80037e4:	f242 034c 	movw	r3, #8268	; 0x204c
 80037e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037ec:	601a      	str	r2, [r3, #0]
									int iter = 0;
									for (iter=0; iter<=4; iter++) { digitvals[iter] = intenvals[iter]; }
									displayMode = INTEN_DISP_MODE;
							}								
						}							
						break;				
 80037ee:	e06e      	b.n	80038ce <main+0x9d2>
						if (displayMode != OFF_DISP_MODE && !resetPending) {
							if (testMode == 1) {
							toneArr[numTones].frequency = arrtosi(freqvals);
							toneArr[numTones].intensity = arrtosi(intenvals);
							numTones++; //numTones always points to next free space.
							} else if (testMode == 0) { //in review mode, iterate saved tones
 80037f0:	f240 0344 	movw	r3, #68	; 0x44
 80037f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d167      	bne.n	80038ce <main+0x9d2>
									if (numTonesPos > 0) numTonesPos--;
 80037fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003800:	2b00      	cmp	r3, #0
 8003802:	dd04      	ble.n	800380e <main+0x912>
 8003804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003806:	f103 33ff 	add.w	r3, r3, #4294967295
 800380a:	67bb      	str	r3, [r7, #120]	; 0x78
 800380c:	e007      	b.n	800381e <main+0x922>
								else numTonesPos = numTones - 1;
 800380e:	f242 034c 	movw	r3, #8268	; 0x204c
 8003812:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f103 33ff 	add.w	r3, r3, #4294967295
 800381c:	67bb      	str	r3, [r7, #120]	; 0x78
									sitoarr(freqvals, toneArr[numTonesPos].frequency);
 800381e:	f240 0348 	movw	r3, #72	; 0x48
 8003822:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003826:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003828:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800382c:	f107 0204 	add.w	r2, r7, #4
 8003830:	4610      	mov	r0, r2
 8003832:	4619      	mov	r1, r3
 8003834:	f7ff f83a 	bl	80028ac <sitoarr>
									sitoarr(intenvals, toneArr[numTonesPos].intensity);
 8003838:	f240 0248 	movw	r2, #72	; 0x48
 800383c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003840:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8003846:	18d3      	adds	r3, r2, r3
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f107 0218 	add.w	r2, r7, #24
 800384e:	4610      	mov	r0, r2
 8003850:	4619      	mov	r1, r3
 8003852:	f7ff f82b 	bl	80028ac <sitoarr>
									intenvals[4] = freqvals[4] = REVIEW_LED;
 8003856:	f04f 030f 	mov.w	r3, #15
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	62bb      	str	r3, [r7, #40]	; 0x28
									int iter = 0;
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	64bb      	str	r3, [r7, #72]	; 0x48
									for (iter=0; iter<=4; iter++) { digitvals[iter] = intenvals[iter]; }
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	64bb      	str	r3, [r7, #72]	; 0x48
 800386c:	e012      	b.n	8003894 <main+0x998>
 800386e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003870:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003874:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003878:	18d3      	adds	r3, r2, r3
 800387a:	f853 1c78 	ldr.w	r1, [r3, #-120]
 800387e:	f240 0310 	movw	r3, #16
 8003882:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003886:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800388c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800388e:	f103 0301 	add.w	r3, r3, #1
 8003892:	64bb      	str	r3, [r7, #72]	; 0x48
 8003894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003896:	2b04      	cmp	r3, #4
 8003898:	dde9      	ble.n	800386e <main+0x972>
									displayMode = INTEN_DISP_MODE;
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	66fb      	str	r3, [r7, #108]	; 0x6c
							}								
						}							
						break;				
 80038a0:	e015      	b.n	80038ce <main+0x9d2>
					case 1:		
						if (displayMode == FREQ_DISP_MODE && testMode && !resetPending) {
							digitvals[0] = freqvals[0] = (freqvals[0] + 1) % 10;
							reset_intensity(intenvals);
						}
						break;		
 80038a2:	bf00      	nop
 80038a4:	e014      	b.n	80038d0 <main+0x9d4>
								freqvals[0]--;
							}
							digitvals[0] = freqvals[0];
							reset_intensity(intenvals);
						}
						break;
 80038a6:	bf00      	nop
 80038a8:	e012      	b.n	80038d0 <main+0x9d4>
					case 3:
						if (displayMode == FREQ_DISP_MODE && testMode && !resetPending) {
							reset_intensity(intenvals);
							digitvals[1] = freqvals[1] = (freqvals[1] + 1) % 10;
					  }
						break;
 80038aa:	bf00      	nop
 80038ac:	e010      	b.n	80038d0 <main+0x9d4>
							} else {
								freqvals[1]--;
							}
							digitvals[1] = freqvals[1];
						}
						break;
 80038ae:	bf00      	nop
 80038b0:	e00e      	b.n	80038d0 <main+0x9d4>
					case 5:
						if (displayMode == FREQ_DISP_MODE && testMode && !resetPending) {
							reset_intensity(intenvals);
							digitvals[2] = freqvals[2] = (freqvals[2] + 1) % 10;
						}
						break;
 80038b2:	bf00      	nop
 80038b4:	e00c      	b.n	80038d0 <main+0x9d4>
							} else {
								freqvals[2]--;
							}
							digitvals[2] = freqvals[2];
						}
						break;
 80038b6:	bf00      	nop
 80038b8:	e00a      	b.n	80038d0 <main+0x9d4>
					case 7:
						if (displayMode == FREQ_DISP_MODE && testMode && !resetPending) {
							reset_intensity(intenvals);
							digitvals[3] = freqvals[3] = (freqvals[3] + 1) % 10;
						}
						break;
 80038ba:	bf00      	nop
 80038bc:	e008      	b.n	80038d0 <main+0x9d4>
							} else {
								freqvals[3]--;
							}
							digitvals[3] = freqvals[3];
						}
						break;
 80038be:	bf00      	nop
 80038c0:	e006      	b.n	80038d0 <main+0x9d4>
						digitvals[1] = freqvals[1];
						digitvals[2] = freqvals[2];
						digitvals[3] = freqvals[3];
						digitvals[4] = freqvals[4];
						}
						break;
 80038c2:	bf00      	nop
 80038c4:	e004      	b.n	80038d0 <main+0x9d4>
								}
						}
							break;
						}
					}
						break;
 80038c6:	bf00      	nop
 80038c8:	e002      	b.n	80038d0 <main+0x9d4>
								// if button held longer than 10s, RESET: inten/freq/digitvals, turn to OFF_DISP_MODE, erase all response,
								// play mode = 0, testMode = 1, set timeOfLastReset						
							
							}
						}						
						break;
 80038ca:	bf00      	nop
 80038cc:	e000      	b.n	80038d0 <main+0x9d4>
									int iter = 0;
									for (iter=0; iter<=4; iter++) { digitvals[iter] = intenvals[iter]; }
									displayMode = INTEN_DISP_MODE;
							}								
						}							
						break;				
 80038ce:	bf00      	nop
			}
			
			// If the button-hit/value-update switch statement above has changed the
			// value to something outside of our min/max values 125/8000, then put it 
			// to that min/max.
			if ( displayMode == FREQ_DISP_MODE && 
 80038d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d137      	bne.n	8003946 <main+0xa4a>
				(arrtosi(freqvals) < 125 || (freqvals[0] == 9 && freqvals[1] != 0 && freqvals[2] != 0 && freqvals[3] != 0)) ) {
 80038d6:	f107 0304 	add.w	r3, r7, #4
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fe ff92 	bl	8002804 <arrtosi>
 80038e0:	4603      	mov	r3, r0
			}
			
			// If the button-hit/value-update switch statement above has changed the
			// value to something outside of our min/max values 125/8000, then put it 
			// to that min/max.
			if ( displayMode == FREQ_DISP_MODE && 
 80038e2:	2b7c      	cmp	r3, #124	; 0x7c
 80038e4:	dd0b      	ble.n	80038fe <main+0xa02>
				(arrtosi(freqvals) < 125 || (freqvals[0] == 9 && freqvals[1] != 0 && freqvals[2] != 0 && freqvals[3] != 0)) ) {
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b09      	cmp	r3, #9
 80038ea:	d12c      	bne.n	8003946 <main+0xa4a>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d029      	beq.n	8003946 <main+0xa4a>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d026      	beq.n	8003946 <main+0xa4a>
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d023      	beq.n	8003946 <main+0xa4a>
				digitvals[0] = freqvals[0] = 0;
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	607b      	str	r3, [r7, #4]
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	f240 0310 	movw	r3, #16
 800390a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800390e:	601a      	str	r2, [r3, #0]
				digitvals[1] = freqvals[1] = 1;
 8003910:	f04f 0301 	mov.w	r3, #1
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	f240 0310 	movw	r3, #16
 800391c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003920:	605a      	str	r2, [r3, #4]
				digitvals[2] = freqvals[2] = 2;
 8003922:	f04f 0302 	mov.w	r3, #2
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	f240 0310 	movw	r3, #16
 800392e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003932:	609a      	str	r2, [r3, #8]
				digitvals[3] = freqvals[3] = 5;
 8003934:	f04f 0305 	mov.w	r3, #5
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	f240 0310 	movw	r3, #16
 8003940:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003944:	60da      	str	r2, [r3, #12]
			}
			
			if (displayMode == FREQ_DISP_MODE && arrtosi(freqvals) > 8000) {
 8003946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003948:	2b01      	cmp	r3, #1
 800394a:	d12c      	bne.n	80039a6 <main+0xaaa>
 800394c:	f107 0304 	add.w	r3, r7, #4
 8003950:	4618      	mov	r0, r3
 8003952:	f7fe ff57 	bl	8002804 <arrtosi>
 8003956:	4603      	mov	r3, r0
 8003958:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800395c:	dd23      	ble.n	80039a6 <main+0xaaa>
				digitvals[0] = freqvals[0] = 8;
 800395e:	f04f 0308 	mov.w	r3, #8
 8003962:	607b      	str	r3, [r7, #4]
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	f240 0310 	movw	r3, #16
 800396a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800396e:	601a      	str	r2, [r3, #0]
				digitvals[1] = freqvals[1] = 0;
 8003970:	f04f 0300 	mov.w	r3, #0
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	f240 0310 	movw	r3, #16
 800397c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003980:	605a      	str	r2, [r3, #4]
				digitvals[2] = freqvals[2] = 0;
 8003982:	f04f 0300 	mov.w	r3, #0
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	f240 0310 	movw	r3, #16
 800398e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003992:	609a      	str	r2, [r3, #8]
				digitvals[3] = freqvals[3] = 0;
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	613b      	str	r3, [r7, #16]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	f240 0310 	movw	r3, #16
 80039a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039a4:	60da      	str	r2, [r3, #12]
					 sent to the upper level state machine.  These signals occur at the end of
					 the longest sequence of states, when we've finally come full circle and can decide that
					 a full detent occured, generate that signal, and reset the state to INITIAL.
				*/
			
			if (displayMode == INTEN_DISP_MODE && testMode) {
 80039a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f040 80cd 	bne.w	8003b48 <main+0xc4c>
 80039ae:	f240 0344 	movw	r3, #68	; 0x44
 80039b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 80c5 	beq.w	8003b48 <main+0xc4c>
				unsigned int origLedPattern = digitvals[4]; // save the single LED pattern, 
 80039be:	f240 0310 	movw	r3, #16
 80039c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	633b      	str	r3, [r7, #48]	; 0x30
																										// because the switch statement will mess it up
			// get current encoder values
			encA = read_encoderA();
 80039ca:	f7fc fddd 	bl	8000588 <read_encoderA>
 80039ce:	4603      	mov	r3, r0
 80039d0:	647b      	str	r3, [r7, #68]	; 0x44
			encB = read_encoderB();
 80039d2:	f7fc fdef 	bl	80005b4 <read_encoderB>
 80039d6:	4603      	mov	r3, r0
 80039d8:	643b      	str	r3, [r7, #64]	; 0x40
				
				// update fsm level 2.
				fsm_lvl2_output = update_fsm_level2(encA, encB);
 80039da:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80039dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039de:	f7ff f819 	bl	8002a14 <update_fsm_level2>
 80039e2:	4603      	mov	r3, r0
 80039e4:	63fb      	str	r3, [r7, #60]	; 0x3c
					 
			  // update fsm level 1, using level 2's output as input
				switch (encoder_state_lvl1) {
 80039e6:	f240 0330 	movw	r3, #48	; 0x30
 80039ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d01c      	beq.n	8003a2e <main+0xb32>
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d05b      	beq.n	8003ab0 <main+0xbb4>
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f040 809f 	bne.w	8003b3c <main+0xc40>
					case INITIAL_LVL1:
						// 1 is up-detent signal, -1 is down-detent, 0 is no signal.
						if (fsm_lvl2_output == 1) {
 80039fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d107      	bne.n	8003a14 <main+0xb18>
							encoder_state_lvl1 = UP_DETENT1;
 8003a04:	f240 0330 	movw	r3, #48	; 0x30
 8003a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a0c:	f04f 0201 	mov.w	r2, #1
 8003a10:	701a      	strb	r2, [r3, #0]
						} else if (fsm_lvl2_output == -1) {
							encoder_state_lvl1 = DOWN_DETENT1;
						} else if (fsm_lvl2_output == 0) {
							// state remains at initial
						}
						break;
 8003a12:	e08e      	b.n	8003b32 <main+0xc36>
				switch (encoder_state_lvl1) {
					case INITIAL_LVL1:
						// 1 is up-detent signal, -1 is down-detent, 0 is no signal.
						if (fsm_lvl2_output == 1) {
							encoder_state_lvl1 = UP_DETENT1;
						} else if (fsm_lvl2_output == -1) {
 8003a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1a:	f040 808a 	bne.w	8003b32 <main+0xc36>
							encoder_state_lvl1 = DOWN_DETENT1;
 8003a1e:	f240 0330 	movw	r3, #48	; 0x30
 8003a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a26:	f04f 0202 	mov.w	r2, #2
 8003a2a:	701a      	strb	r2, [r3, #0]
						} else if (fsm_lvl2_output == 0) {
							// state remains at initial
						}
						break;
 8003a2c:	e081      	b.n	8003b32 <main+0xc36>
						
					case UP_DETENT1:
						if (fsm_lvl2_output == 1) {
 8003a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d131      	bne.n	8003a98 <main+0xb9c>
							// ding ding ding we have a winner!  2 up detents make an increment
							if (intenvals[1] != 1 || intenvals[2] != 1 || intenvals[3] != 0) increment_arr(intenvals, 5);
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d105      	bne.n	8003a46 <main+0xb4a>
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d102      	bne.n	8003a46 <main+0xb4a>
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d006      	beq.n	8003a54 <main+0xb58>
 8003a46:	f107 0318 	add.w	r3, r7, #24
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f04f 0105 	mov.w	r1, #5
 8003a50:	f7fe ffca 	bl	80029e8 <increment_arr>
							for (i=0; i<=4; i++) digitvals[i] = intenvals[i];
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	663b      	str	r3, [r7, #96]	; 0x60
 8003a5a:	e012      	b.n	8003a82 <main+0xb86>
 8003a5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a5e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003a62:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003a66:	18d3      	adds	r3, r2, r3
 8003a68:	f853 1c78 	ldr.w	r1, [r3, #-120]
 8003a6c:	f240 0310 	movw	r3, #16
 8003a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003a7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a7c:	f103 0301 	add.w	r3, r3, #1
 8003a80:	663b      	str	r3, [r7, #96]	; 0x60
 8003a82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	dde9      	ble.n	8003a5c <main+0xb60>
							encoder_state_lvl1 = INITIAL_LVL1;
 8003a88:	f240 0330 	movw	r3, #48	; 0x30
 8003a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	701a      	strb	r2, [r3, #0]
							// jump to down_detent1
							encoder_state_lvl1 = DOWN_DETENT1;
						} else if (fsm_lvl2_output == 0) {
							// state doesn't change
						}
						break;
 8003a96:	e04e      	b.n	8003b36 <main+0xc3a>
						if (fsm_lvl2_output == 1) {
							// ding ding ding we have a winner!  2 up detents make an increment
							if (intenvals[1] != 1 || intenvals[2] != 1 || intenvals[3] != 0) increment_arr(intenvals, 5);
							for (i=0; i<=4; i++) digitvals[i] = intenvals[i];
							encoder_state_lvl1 = INITIAL_LVL1;
						} else if (fsm_lvl2_output == -1) {
 8003a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9e:	d14a      	bne.n	8003b36 <main+0xc3a>
							// jump to down_detent1
							encoder_state_lvl1 = DOWN_DETENT1;
 8003aa0:	f240 0330 	movw	r3, #48	; 0x30
 8003aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003aa8:	f04f 0202 	mov.w	r2, #2
 8003aac:	701a      	strb	r2, [r3, #0]
						} else if (fsm_lvl2_output == 0) {
							// state doesn't change
						}
						break;
 8003aae:	e042      	b.n	8003b36 <main+0xc3a>
					
					case DOWN_DETENT1:
						if (fsm_lvl2_output == 1) {
 8003ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d107      	bne.n	8003ac6 <main+0xbca>
							// jump to up detent 1
							encoder_state_lvl1 = UP_DETENT1;				
 8003ab6:	f240 0330 	movw	r3, #48	; 0x30
 8003aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003abe:	f04f 0201 	mov.w	r2, #1
 8003ac2:	701a      	strb	r2, [r3, #0]
							for (i=0; i<=4; i++) digitvals[i] = intenvals[i];
							encoder_state_lvl1 = INITIAL_LVL1;
						} else if (fsm_lvl2_output == 0) {
							// state doesn't change
						}
						break;
 8003ac4:	e039      	b.n	8003b3a <main+0xc3e>
					
					case DOWN_DETENT1:
						if (fsm_lvl2_output == 1) {
							// jump to up detent 1
							encoder_state_lvl1 = UP_DETENT1;				
						} else if (fsm_lvl2_output == -1) {
 8003ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003acc:	d135      	bne.n	8003b3a <main+0xc3e>
							// ding ding ding we have a winner!  2 down detents make a decrement
							if (intenvals[1] != NEG_SIGN || intenvals[2] != 1 || intenvals[3] != 0) decrement_arr(intenvals, 5);
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	2b0c      	cmp	r3, #12
 8003ad2:	d105      	bne.n	8003ae0 <main+0xbe4>
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d102      	bne.n	8003ae0 <main+0xbe4>
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d006      	beq.n	8003aee <main+0xbf2>
 8003ae0:	f107 0318 	add.w	r3, r7, #24
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f04f 0105 	mov.w	r1, #5
 8003aea:	f7fe ff67 	bl	80029bc <decrement_arr>
							for (i=0; i<=4; i++) digitvals[i] = intenvals[i];
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	663b      	str	r3, [r7, #96]	; 0x60
 8003af4:	e012      	b.n	8003b1c <main+0xc20>
 8003af6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003af8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003afc:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003b00:	18d3      	adds	r3, r2, r3
 8003b02:	f853 1c78 	ldr.w	r1, [r3, #-120]
 8003b06:	f240 0310 	movw	r3, #16
 8003b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003b14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b16:	f103 0301 	add.w	r3, r3, #1
 8003b1a:	663b      	str	r3, [r7, #96]	; 0x60
 8003b1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	dde9      	ble.n	8003af6 <main+0xbfa>
							encoder_state_lvl1 = INITIAL_LVL1;
 8003b22:	f240 0330 	movw	r3, #48	; 0x30
 8003b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	701a      	strb	r2, [r3, #0]
						} else if (fsm_lvl2_output == 0) {
							// state doesn't change
						}
						break;
 8003b30:	e003      	b.n	8003b3a <main+0xc3e>
						} else if (fsm_lvl2_output == -1) {
							encoder_state_lvl1 = DOWN_DETENT1;
						} else if (fsm_lvl2_output == 0) {
							// state remains at initial
						}
						break;
 8003b32:	bf00      	nop
 8003b34:	e002      	b.n	8003b3c <main+0xc40>
							// jump to down_detent1
							encoder_state_lvl1 = DOWN_DETENT1;
						} else if (fsm_lvl2_output == 0) {
							// state doesn't change
						}
						break;
 8003b36:	bf00      	nop
 8003b38:	e000      	b.n	8003b3c <main+0xc40>
							for (i=0; i<=4; i++) digitvals[i] = intenvals[i];
							encoder_state_lvl1 = INITIAL_LVL1;
						} else if (fsm_lvl2_output == 0) {
							// state doesn't change
						}
						break;
 8003b3a:	bf00      	nop
					}
			digitvals[4] = origLedPattern;
 8003b3c:	f240 0310 	movw	r3, #16
 8003b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b46:	611a      	str	r2, [r3, #16]
		}
		
		
		
		/*** Handle the flashing of LED6 for when we are in playMode. ***/
		if (playMode && testMode) blink_playmode_led(intenvals);
 8003b48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00b      	beq.n	8003b66 <main+0xc6a>
 8003b4e:	f240 0344 	movw	r3, #68	; 0x44
 8003b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d004      	beq.n	8003b66 <main+0xc6a>
 8003b5c:	f107 0318 	add.w	r3, r7, #24
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff f889 	bl	8002c78 <blink_playmode_led>
		
		// flash reset led when reset is pending
		if (resetPending) blink_reset_led(timeOfLastReset);
 8003b66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <main+0xc7a>
 8003b6e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8003b72:	f7ff f8c1 	bl	8002cf8 <blink_reset_led>
		
				
		// if reset pending for 5 seconds, reset
		if ( resetPending && (getTime() - resetPendingBeginTime) >= 4500) {
 8003b76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 80ce 	beq.w	8003d1c <main+0xe20>
 8003b80:	f7fc fd2e 	bl	80005e0 <getTime>
 8003b84:	4602      	mov	r2, r0
 8003b86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b8a:	1ad2      	subs	r2, r2, r3
 8003b8c:	f241 1393 	movw	r3, #4499	; 0x1193
 8003b90:	429a      	cmp	r2, r3
 8003b92:	f240 80c3 	bls.w	8003d1c <main+0xe20>
			
			// turn on Reset LED4 for 2 seconds and blank screen.
			freqvals[4] = intenvals[4] = digitvals[4] = RESET_LED;
 8003b96:	f240 0310 	movw	r3, #16
 8003b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b9e:	f04f 020b 	mov.w	r2, #11
 8003ba2:	611a      	str	r2, [r3, #16]
 8003ba4:	f240 0310 	movw	r3, #16
 8003ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb2:	617b      	str	r3, [r7, #20]
			zero_disp();
 8003bb4:	f7ff f978 	bl	8002ea8 <zero_disp>
			unsigned int curTime = getTime();
 8003bb8:	f7fc fd12 	bl	80005e0 <getTime>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc0:	e000      	b.n	8003bc4 <main+0xcc8>
				else if (getTime() > (curTime + 1500)) off_disp();
				else if (getTime() > (curTime + 1200)) zero_disp();
				else if (getTime() > (curTime + 900)) off_disp();
				else if (getTime() > (curTime + 600)) zero_disp();
				else if (getTime() > (curTime + 300)) off_disp();
			}
 8003bc2:	bf00      	nop
			// turn on Reset LED4 for 2 seconds and blank screen.
			freqvals[4] = intenvals[4] = digitvals[4] = RESET_LED;
			zero_disp();
			unsigned int curTime = getTime();
			while(1) {
				if (getTime() > (curTime + 1800)) break;
 8003bc4:	f7fc fd0c 	bl	80005e0 <getTime>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bcc:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d838      	bhi.n	8003c46 <main+0xd4a>
				else if (getTime() > (curTime + 1500)) off_disp();
 8003bd4:	f7fc fd04 	bl	80005e0 <getTime>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bdc:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 8003be0:	f103 030c 	add.w	r3, r3, #12
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d902      	bls.n	8003bee <main+0xcf2>
 8003be8:	f7ff f934 	bl	8002e54 <off_disp>
				else if (getTime() > (curTime + 1200)) zero_disp();
				else if (getTime() > (curTime + 900)) off_disp();
				else if (getTime() > (curTime + 600)) zero_disp();
				else if (getTime() > (curTime + 300)) off_disp();
			}
 8003bec:	e7e9      	b.n	8003bc2 <main+0xcc6>
			zero_disp();
			unsigned int curTime = getTime();
			while(1) {
				if (getTime() > (curTime + 1800)) break;
				else if (getTime() > (curTime + 1500)) off_disp();
				else if (getTime() > (curTime + 1200)) zero_disp();
 8003bee:	f7fc fcf7 	bl	80005e0 <getTime>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf6:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d902      	bls.n	8003c04 <main+0xd08>
 8003bfe:	f7ff f953 	bl	8002ea8 <zero_disp>
				else if (getTime() > (curTime + 900)) off_disp();
				else if (getTime() > (curTime + 600)) zero_disp();
				else if (getTime() > (curTime + 300)) off_disp();
			}
 8003c02:	e7de      	b.n	8003bc2 <main+0xcc6>
			unsigned int curTime = getTime();
			while(1) {
				if (getTime() > (curTime + 1800)) break;
				else if (getTime() > (curTime + 1500)) off_disp();
				else if (getTime() > (curTime + 1200)) zero_disp();
				else if (getTime() > (curTime + 900)) off_disp();
 8003c04:	f7fc fcec 	bl	80005e0 <getTime>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0c:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d902      	bls.n	8003c1a <main+0xd1e>
 8003c14:	f7ff f91e 	bl	8002e54 <off_disp>
				else if (getTime() > (curTime + 600)) zero_disp();
				else if (getTime() > (curTime + 300)) off_disp();
			}
 8003c18:	e7d3      	b.n	8003bc2 <main+0xcc6>
			while(1) {
				if (getTime() > (curTime + 1800)) break;
				else if (getTime() > (curTime + 1500)) off_disp();
				else if (getTime() > (curTime + 1200)) zero_disp();
				else if (getTime() > (curTime + 900)) off_disp();
				else if (getTime() > (curTime + 600)) zero_disp();
 8003c1a:	f7fc fce1 	bl	80005e0 <getTime>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c22:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d902      	bls.n	8003c30 <main+0xd34>
 8003c2a:	f7ff f93d 	bl	8002ea8 <zero_disp>
				else if (getTime() > (curTime + 300)) off_disp();
			}
 8003c2e:	e7c8      	b.n	8003bc2 <main+0xcc6>
				if (getTime() > (curTime + 1800)) break;
				else if (getTime() > (curTime + 1500)) off_disp();
				else if (getTime() > (curTime + 1200)) zero_disp();
				else if (getTime() > (curTime + 900)) off_disp();
				else if (getTime() > (curTime + 600)) zero_disp();
				else if (getTime() > (curTime + 300)) off_disp();
 8003c30:	f7fc fcd6 	bl	80005e0 <getTime>
 8003c34:	4602      	mov	r2, r0
 8003c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c38:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d9c0      	bls.n	8003bc2 <main+0xcc6>
 8003c40:	f7ff f908 	bl	8002e54 <off_disp>
			}
 8003c44:	e7bd      	b.n	8003bc2 <main+0xcc6>
			// turn on Reset LED4 for 2 seconds and blank screen.
			freqvals[4] = intenvals[4] = digitvals[4] = RESET_LED;
			zero_disp();
			unsigned int curTime = getTime();
			while(1) {
				if (getTime() > (curTime + 1800)) break;
 8003c46:	bf00      	nop
				else if (getTime() > (curTime + 600)) zero_disp();
				else if (getTime() > (curTime + 300)) off_disp();
			}
			
			// reset display values
			freqvals[0] = 0; freqvals[1] = 1; freqvals[2] = 2; freqvals[3] = 5; freqvals[4] = FREQ_LED;
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	607b      	str	r3, [r7, #4]
 8003c4e:	f04f 0301 	mov.w	r3, #1
 8003c52:	60bb      	str	r3, [r7, #8]
 8003c54:	f04f 0302 	mov.w	r3, #2
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	f04f 0305 	mov.w	r3, #5
 8003c5e:	613b      	str	r3, [r7, #16]
 8003c60:	f04f 030a 	mov.w	r3, #10
 8003c64:	617b      	str	r3, [r7, #20]
			intenvals[0] = OFF; intenvals[1] = NEG_SIGN; intenvals[2] = 1; intenvals[3] = 0; intenvals[4] = INTEN_LED;
 8003c66:	f04f 030d 	mov.w	r3, #13
 8003c6a:	61bb      	str	r3, [r7, #24]
 8003c6c:	f04f 030c 	mov.w	r3, #12
 8003c70:	61fb      	str	r3, [r7, #28]
 8003c72:	f04f 0301 	mov.w	r3, #1
 8003c76:	623b      	str	r3, [r7, #32]
 8003c78:	f04f 0300 	mov.w	r3, #0
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c7e:	f04f 0311 	mov.w	r3, #17
 8003c82:	62bb      	str	r3, [r7, #40]	; 0x28
			digitvals[0] = 0; digitvals[1] = 0; digitvals[2] = 0; digitvals[3] = 0; digitvals[4] = OFF;
 8003c84:	f240 0310 	movw	r3, #16
 8003c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	f240 0310 	movw	r3, #16
 8003c96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	605a      	str	r2, [r3, #4]
 8003ca0:	f240 0310 	movw	r3, #16
 8003ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	609a      	str	r2, [r3, #8]
 8003cae:	f240 0310 	movw	r3, #16
 8003cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	60da      	str	r2, [r3, #12]
 8003cbc:	f240 0310 	movw	r3, #16
 8003cc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003cc4:	f04f 020d 	mov.w	r2, #13
 8003cc8:	611a      	str	r2, [r3, #16]
			
			// erase responses
			numTones = 0;
 8003cca:	f242 034c 	movw	r3, #8268	; 0x204c
 8003cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]
			
			// reset modes
			playMode = 0;
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	667b      	str	r3, [r7, #100]	; 0x64
			testMode = 1;
 8003cde:	f240 0344 	movw	r3, #68	; 0x44
 8003ce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003ce6:	f04f 0201 	mov.w	r2, #1
 8003cea:	601a      	str	r2, [r3, #0]
			
			// reset reset pending
			resetPending = 0;
 8003cec:	f04f 0300 	mov.w	r3, #0
 8003cf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			
			//reset display mode
			displayMode = OFF_DISP_MODE;
 8003cf4:	f04f 0302 	mov.w	r3, #2
 8003cf8:	66fb      	str	r3, [r7, #108]	; 0x6c
			
			// reset blink_warning_led global variables
			offset = prevTime = 0;
 8003cfa:	f240 0334 	movw	r3, #52	; 0x34
 8003cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	f240 0334 	movw	r3, #52	; 0x34
 8003d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	f240 0338 	movw	r3, #56	; 0x38
 8003d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003d1a:	601a      	str	r2, [r3, #0]
		}
		
				
		// If reset pending switched off early, then restore proper LED (must be in review mode)
		if (resetPending) {
 8003d1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f43f a953 	beq.w	8002fcc <main+0xd0>
			
			if (mikes_get_switch(11)) {
 8003d26:	f04f 000b 	mov.w	r0, #11
 8003d2a:	f7fc fb5a 	bl	80003e2 <mikes_get_switch>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f43f a94b 	beq.w	8002fcc <main+0xd0>
				offset = prevTime = 0; // reset blink_warning_led global variables
 8003d36:	f240 0334 	movw	r3, #52	; 0x34
 8003d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	f240 0334 	movw	r3, #52	; 0x34
 8003d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	f240 0338 	movw	r3, #56	; 0x38
 8003d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003d56:	601a      	str	r2, [r3, #0]
				resetPending = 0;
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				if (testMode) {
 8003d60:	f240 0344 	movw	r3, #68	; 0x44
 8003d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d018      	beq.n	8003da0 <main+0xea4>
					if (displayMode == FREQ_DISP_MODE) {
 8003d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d108      	bne.n	8003d86 <main+0xe8a>
						digitvals[4] = FREQ_LED;
 8003d74:	f240 0310 	movw	r3, #16
 8003d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003d7c:	f04f 020a 	mov.w	r2, #10
 8003d80:	611a      	str	r2, [r3, #16]
				}
			}
		}
		
		
	}
 8003d82:	f7ff b923 	b.w	8002fcc <main+0xd0>
				offset = prevTime = 0; // reset blink_warning_led global variables
				resetPending = 0;
				if (testMode) {
					if (displayMode == FREQ_DISP_MODE) {
						digitvals[4] = FREQ_LED;
					} else if (displayMode == INTEN_DISP_MODE) {
 8003d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f47f a91f 	bne.w	8002fcc <main+0xd0>
						digitvals[4] = INTEN_LED;
 8003d8e:	f240 0310 	movw	r3, #16
 8003d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003d96:	f04f 0211 	mov.w	r2, #17
 8003d9a:	611a      	str	r2, [r3, #16]
				}
			}
		}
		
		
	}
 8003d9c:	f7ff b916 	b.w	8002fcc <main+0xd0>
						digitvals[4] = FREQ_LED;
					} else if (displayMode == INTEN_DISP_MODE) {
						digitvals[4] = INTEN_LED;
					}
				} else { // review mode
					digitvals[4] = REVIEW_LED;
 8003da0:	f240 0310 	movw	r3, #16
 8003da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003da8:	f04f 020f 	mov.w	r2, #15
 8003dac:	611a      	str	r2, [r3, #16]
				}
			}
		}
		
		
	}
 8003dae:	f7ff b90d 	b.w	8002fcc <main+0xd0>
 8003db2:	bf00      	nop
 8003db4:	0000000d 	.word	0x0000000d
 8003db8:	0000000c 	.word	0x0000000c
 8003dbc:	00000001 	.word	0x00000001
 8003dc0:	00000000 	.word	0x00000000
 8003dc4:	00000011 	.word	0x00000011
 8003dc8:	00000000 	.word	0x00000000
 8003dcc:	00000001 	.word	0x00000001
 8003dd0:	00000002 	.word	0x00000002
 8003dd4:	00000005 	.word	0x00000005
 8003dd8:	0000000a 	.word	0x0000000a
